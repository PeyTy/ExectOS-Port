/// Performs an early initialization of the XTOS Memory Manager.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun mmInitializeMemoryManager() {
	mmpScanMemoryDescriptors()
	if mmNumberOfPhysicalPages < 2048 {
		if keDbgPrint {

			keDbgPrint("Insufficient physical pages! Install additional memory\n")
		}

		kePanic(0)

	}

	mmPageMapLevel = keInitializationBlock.loaderInformation.pageMapLevel
	mmpInitializeArchitecture()
}

/// Scans memory descriptors provided by the boot loader.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun mmpScanMemoryDescriptors() {
	let memoryDescriptor = new ByValue<PLOADER_MEMORY_DESCRIPTOR>()

	let memoryMappings = new ByValue<PLIST_ENTRY>()

	var freePages PFN_NUMBER
	freePages = 0
	memoryMappings = keInitializationBlock.memoryDescriptorListHead.flink
	while memoryMappings != keInitializationBlock.memoryDescriptorListHead {
		memoryDescriptor = (((memoryMappings) as! Char * - __builtin_offsetof<Unsigned long long>()) as! LOADER_MEMORY_DESCRIPTOR *)
		if mmpVerifyMemoryTypeInvisible(memoryDescriptor.memoryType) or (memoryDescriptor.memoryType == loaderHardwareCachedMemory) {
			memoryMappings = memoryMappings.flink
			continue
		}

		if memoryDescriptor.memoryType != loaderBad {
			mmNumberOfPhysicalPages += memoryDescriptor.pageCount

		}

		if memoryDescriptor.basePage < mmLowestPhysicalPage {
			mmLowestPhysicalPage = memoryDescriptor.basePage

		}

		if memoryDescriptor.basePage + memoryDescriptor.pageCount > mmHighestPhysicalPage {
			mmHighestPhysicalPage = (memoryDescriptor.basePage + memoryDescriptor.pageCount) - 1

		}

		if mmpVerifyMemoryTypeFree(memoryDescriptor.memoryType) {
			if memoryDescriptor.pageCount >= freePages {
				freePages = memoryDescriptor.pageCount
				mmFreeDescriptor = memoryDescriptor

			}


		}

		memoryMappings = memoryMappings.flink

	}

	rtlCopyMemory(mmOldFreeDescriptor, mmFreeDescriptor, sizeOf<Unsigned long long>())
}

/// Checks whether the specified memory type should be considered as free.
/// 
/// @param MemoryType
///        Specifies the memory type to verify.
/// 
/// @return This routine returns TRUE if the specified memory type should be considered as free, or FALSE otherwise.
/// 
/// @since XT 1.0
fun mmpVerifyMemoryTypeFree(memoryType LOADER_MEMORY_TYPE) {
	return (memoryType == loaderFree) or (memoryType == loaderFirmwareTemporary) or (memoryType == loaderLoadedProgram) or (memoryType == loaderOsloaderStack)
}

/// Checks whether the specified memory type should be considered as invisible for the memory manager.
/// 
/// @param MemoryType
///        Specifies the memory type to verify.
/// 
/// @return This routine returns TRUE if the specified memory type should be considered as invisible, or FALSE otherwise.
/// 
/// @since XT 1.0
fun mmpVerifyMemoryTypeInvisible(memoryType LOADER_MEMORY_TYPE) {
	return (memoryType == loaderFirmwarePermanent) or (memoryType == loaderSpecialMemory) or (memoryType == loaderBBTMemory)
}
