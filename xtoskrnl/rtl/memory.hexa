/// This routine compares the first bytes of the specified memory buffers.
/// 
/// @param LeftBuffer
///        Supplies a pointer to the first block of memory to compare.
/// 
/// @param RightBuffer
///        Supplies a pointer to the second block of memory to compare.
/// 
/// @param Length
///        Specifies a number of bytes to compare.
/// 
/// @return This routine returns a number of bytes that are equal in both memory blocks.
/// 
/// @since NT 3.5
fun rtlCompareMemory(leftBuffer PCVOID, rightBuffer PCVOID, length SIZE_T) {
	var bytes SIZE_T = 0
	if length {
		while bytes < length {
			if (leftBuffer as! PBYTE)[bytes] != (rightBuffer as! PBYTE)[bytes] {
				break
			}

			bytes++
		}


	}

	return bytes
}

/// This routine copies a block of memory.
/// 
/// @param Destination
///        Supplies a pointer to the buffer where data will be copied to.
/// 
/// @param Source
///        Supplies a pointer to the source buffer that will be copied.
/// 
/// @param Length
///        Specifies the number of bytes to copy.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 3.5
fun rtlCopyMemory(destination PVOID, source PCVOID, length SIZE_T) {
	var destinationBytes PCHAR = destination as! PCHAR
	var sourceBytes PCCHAR = source as! PCHAR
	while --length {
		++destinationBytes[0] = ++sourceBytes[0]

	}

}

/// This routine copies a block of memory either forward of backward, depeding if source and destination buffers overlap or not.
/// 
/// @param Destination
///        Supplies a pointer to the buffer where data will be copied to.
/// 
/// @param Source
///        Supplies a pointer to the source buffer that will be copied.
/// 
/// @param Length
///        Specifies the number of bytes to copy.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 3.5
fun rtlMoveMemory(destination PVOID, source PCVOID, length SIZE_T) {
	var destinationBytes PCHAR = destination as! PCHAR
	var sourceBytes PCHAR = source as! PCHAR
	if (!sourceBytes) and (!destinationBytes) {
		return ??

	}

	if (destinationBytes > sourceBytes) and (sourceBytes + length > destinationBytes) {
		while length {
			destinationBytes[length - 1] = sourceBytes[length - 1]
			length--
		}


	} else {
		rtlCopyMemory(destination, source, length)

	}

}

/// This routine compares the first bytes of the specified memory buffers.
/// 
/// @param LeftBuffer
///        Supplies a pointer to the first block of memory to compare.
/// 
/// @param RightBuffer
///        Supplies a pointer to the second block of memory to compare.
/// 
/// @param Length
///        Specifies a number of bytes to compare.
/// 
/// @return Returns TRUE if both buffers are equal up to the specified length, or FALSE otherwise.
/// 
/// @since XT 1.0
fun rtlSameMemory(leftBuffer PCVOID, rightBuffer PCVOID, length SIZE_T) {
	return [unknown clang ast] resolve ConditionalOperator
}

/// This routine fills a section of memory with a specified byte.
/// 
/// @param Destination
///        Supplies a pointer to the buffer to fill.
/// 
/// @param Byte
///        Supplies a pattern to fill memory.
/// 
/// @param Length
///        Specifies a number of bytes to store in memory.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlSetMemory(destination PVOID, byte UCHAR, length SIZE_T) {
	var destinationBytes PCHAR = destination as! PCHAR
	while --length {
		++destinationBytes[0] = byte

	}

}

/// This routine fills a section of memory with zeroes.
/// 
/// @param Destination
///        Supplies a pointer to the buffer to fill.
/// 
/// @param Length
///        Specifies a number of bytes to be filled with zeroes.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 3.5
fun rtlZeroMemory(destination PVOID, length SIZE_T) {
	rtlSetMemory(destination, 0, length)
}
