/// Converts the 32-bit signed value to a large integer.
/// 
/// @param Value
///        Supplies the value to convert.
/// 
/// @return This routine returns the large integer representation of the given value.
/// 
/// @since XT 1.0
fun rtlConvertToLargeInteger32(value LONG) {
	var largeInt LARGE_INTEGER
	LargeInt.quadPart = value
	return largeInt
}

/// Converts the 32-bit unsigned value to a large integer.
/// 
/// @param Value
///        Supplies the value to convert.
/// 
/// @return This routine returns the large integer representation of the given value.
/// 
/// @since XT 1.0
fun rtlConvertToLargeIntegerUnsigned32(value ULONG) {
	var largeInt LARGE_INTEGER
	LargeInt.quadPart = value
	return largeInt
}

/// Determines the number of leading zero bits in a 32-bit unsigned value.
/// 
/// @param Value
///        Supplies the value whose leading zero bits are to be counted.
/// 
/// @return This routine returns the number of leading zero bits in the given value.
/// 
/// @since XT 1.0
fun rtlCountLeadingZeroes32(value ULONG) {
	return __builtin_clzl(value)
}

/// Determines the number of leading zero bits in a 64-bit unsigned value.
/// 
/// @param Value
///        Supplies the value whose leading zero bits are to be counted.
/// 
/// @return This routine returns the number of leading zero bits in the given value.
/// 
/// @since XT 1.0
fun rtlCountLeadingZeroes64(value ULONGLONG) {
	return __builtin_clzll(value)
}

/// Determines the number of trailing zero bits in a 32-bit unsigned value.
/// 
/// @param Value
///        Supplies the value whose trailing zero bits are to be counted.
/// 
/// @return This routine returns the number of trailing zero bits in the given value.
/// 
/// @since XT 1.0
fun rtlCountTrailingZeroes32(value ULONG) {
	return __builtin_ctzl(value)
}

/// Determines the number of trailing zero bits in a 64-bit unsigned value.
/// 
/// @param Value
///        Supplies the value whose trailing zero bits are to be counted.
/// 
/// @return This routine returns the number of trailing zero bits in the given value.
/// 
/// @since XT 1.0
fun rtlCountTrailingZeroes64(value ULONGLONG) {
	return __builtin_ctzll(value)
}

/// Performs a 32-bit divide operation on signed integer numbers.
/// 
/// @param Dividend
///        Supplies a number that is going to be divided.
/// 
/// @param Divisor
///        Supplies a number by which the dividend is divided.
/// 
/// @param Remainder
///        Supplies a pointer that receives the divide remainder.
/// 
/// @return This routine returns the quotient.
/// 
/// @since XT 1.0
fun rtlDivide32(dividend LONG, divisor LONG, remainder PLONG) {
	var quotient LONG
	quotient = dividend / divisor
	if remainder {
		remainder[0] = dividend - (quotient * divisor)

	}

	return quotient
}

/// Performs a 64-bit divide operation on signed integer numbers.
/// 
/// @param Dividend
///        Supplies a number that is going to be divided.
/// 
/// @param Divisor
///        Supplies a number by which the dividend is divided.
/// 
/// @param Remainder
///        Supplies a pointer that receives the divide remainder.
/// 
/// @return This routine returns the quotient.
/// 
/// @since XT 1.0
fun rtlDivide64(dividend LONGLONG, divisor LONGLONG, remainder PLONGLONG) {
	var dividendSign LONGLONG
	var divisorSign LONGLONG
	var quotient LONGLONG
	var uDividend LONGLONG
	var uDivisor LONGLONG
	dividendSign = dividend >> ((sizeOf<Unsigned long long>() * 8) - 1)
	divisorSign = divisor >> ((sizeOf<Unsigned long long>() * 8) - 1)
	uDividend = (dividend ^ dividendSign) - dividendSign
	uDivisor = (divisor ^ divisorSign) - divisorSign
	dividendSign ^= divisorSign
	quotient = (rtlDivideUnsigned64(uDividend, uDivisor, (0 as! PVOID)) ^ dividendSign) - dividendSign
	if remainder {
		remainder[0] = dividend - (quotient * divisor)

	}

	return quotient
}

/// Performs a 32-bit divide operation on unsigned integer numbers.
/// 
/// @param Dividend
///        Supplies an unsigned number that is going to be divided.
/// 
/// @param Divisor
///        Supplies an unsigned number by which the dividend is divided.
/// 
/// @param Remainder
///        Supplies a pointer that receives the unsigned divide remainder.
/// 
/// @return This routine returns the quotient.
/// 
/// @since XT 1.0
fun rtlDivideUnsigned32(dividend ULONG, divisor ULONG, remainder PULONG) {
	if remainder {
		remainder[0] = dividend % divisor

	}

	return dividend / divisor
}

/// Performs a 64-bit divide operation on unsigned integer numbers.
/// 
/// @param Dividend
///        Supplies an unsigned number that is going to be divided.
/// 
/// @param Divisor
///        Supplies an unsigned number by which the dividend is divided.
/// 
/// @param Remainder
///        Supplies a pointer that receives the unsigned divide remainder.
/// 
/// @return This routine returns the quotient.
/// 
/// @since XT 1.0
fun rtlDivideUnsigned64(dividend ULONGLONG, divisor ULONGLONG, remainder PULONGLONG) {
	var dividendParts ULARGE_INTEGER
	var divisorParts ULARGE_INTEGER
	var quotientParts ULARGE_INTEGER
	var remainderParts ULARGE_INTEGER
	var difference LONGLONG
	var shift ULONGLONG
	var carry ULONG
	if divisor == 0 {
		return 0

	}

	DividendParts.quadPart = dividend
	DivisorParts.quadPart = divisor
	if DividendParts.u.highPart == 0 {
		if DivisorParts.u.highPart == 0 {
			if remainder != (0 as! PVOID) {
				remainder[0] = DividendParts.u.lowPart % DivisorParts.u.lowPart

			}

			return DividendParts.u.lowPart / DivisorParts.u.lowPart

		}

		if remainder != (0 as! PVOID) {
			remainder[0] = DividendParts.u.lowPart

		}

		return 0

	}

	if DivisorParts.u.lowPart != 0 {
		if DivisorParts.u.highPart != 0 {
			shift = rtlCountLeadingZeroes32(DivisorParts.u.highPart) - rtlCountLeadingZeroes32(DividendParts.u.highPart)
			if shift > ((sizeOf<Unsigned long long>() * 8) - 1) {
				if remainder != (0 as! PVOID) {
					remainder[0] = DividendParts.quadPart

				}

				return 0

			}

			shift++			QuotientParts.u.lowPart = 0
			if shift == (sizeOf<Unsigned long long>() * 8) {
				QuotientParts.u.highPart = DividendParts.u.lowPart
				RemainderParts.u.lowPart = DividendParts.u.highPart
				RemainderParts.u.highPart = 0

			} else {
				QuotientParts.u.highPart = DividendParts.u.lowPart << ((sizeOf<Unsigned long long>() * 8) - shift)
				RemainderParts.u.lowPart = (DividendParts.u.highPart << ((sizeOf<Unsigned long long>() * 8) - shift)) | (DividendParts.u.lowPart >> shift)
				RemainderParts.u.highPart = DividendParts.u.highPart >> shift

			}


		} else {
			shift = (sizeOf<Unsigned long long>() * 8) + 1 + rtlCountLeadingZeroes32(DivisorParts.u.lowPart) - rtlCountLeadingZeroes32(DividendParts.u.highPart)
			if shift == (sizeOf<Unsigned long long>() * 8) {
				QuotientParts.u.lowPart = 0
				QuotientParts.u.highPart = DividendParts.u.lowPart
				RemainderParts.u.lowPart = DividendParts.u.highPart
				RemainderParts.u.highPart = 0

			} else {
				shift < (sizeOf<Unsigned long long>() * 8)

				{

				}


				{

				}


			}


		}


	} else {
		if DividendParts.u.lowPart == 0 {
			if remainder != (0 as! PVOID) {
				RemainderParts.u.highPart = DividendParts.u.highPart % DivisorParts.u.highPart
				RemainderParts.u.lowPart = 0
				remainder[0] = RemainderParts.quadPart

			}

			return DividendParts.u.highPart / DivisorParts.u.highPart

		}

		shift = rtlCountLeadingZeroes32(DivisorParts.u.highPart) - rtlCountLeadingZeroes32(DividendParts.u.highPart)
		if shift > ((sizeOf<Unsigned long long>() * 8) - 2) {
			if remainder != (0 as! PVOID) {
				remainder[0] = DividendParts.quadPart

			}

			return 0

		}

		shift++		QuotientParts.u.lowPart = 0
		QuotientParts.u.highPart = DividendParts.u.lowPart << ((sizeOf<Unsigned long long>() * 8) - shift)
		RemainderParts.u.highPart = DividendParts.u.highPart >> shift
		RemainderParts.u.lowPart = (DividendParts.u.highPart << ((sizeOf<Unsigned long long>() * 8) - shift)) | (DividendParts.u.lowPart >> shift)

	}

	carry = 0
	while shift > 0 {
		RemainderParts.u.highPart = (RemainderParts.u.highPart << 1) | (RemainderParts.u.lowPart >> ((sizeOf<Unsigned long long>() * 8) - 1))
		RemainderParts.u.lowPart = (RemainderParts.u.lowPart << 1) | (QuotientParts.u.highPart >> ((sizeOf<Unsigned long long>() * 8) - 1))
		QuotientParts.u.highPart = (QuotientParts.u.highPart << 1) | (QuotientParts.u.lowPart >> ((sizeOf<Unsigned long long>() * 8) - 1))
		QuotientParts.u.lowPart = (QuotientParts.u.lowPart << 1) | carry
		difference = (DivisorParts.quadPart - RemainderParts.quadPart - 1) as! LONGLONG >> ((sizeOf<Unsigned long long>() * 8) - 1)
		carry = difference & 1
		RemainderParts.quadPart -= DivisorParts.quadPart & difference
		shift -= 1

	}

	QuotientParts.quadPart = (QuotientParts.quadPart << 1) | carry
	if remainder != (0 as! PVOID) {
		remainder[0] = RemainderParts.quadPart

	}

	return QuotientParts.quadPart
}

/// Divides a signed large integer by a 32-bit divisor.
/// 
/// @param Dividend
///        Supplies a large integer to be divided.
/// 
/// @param Divisor
///        Supplies a 32-bit divisor.
/// 
/// @param Remainder
///        Supplies a pointer that receives the divide remainder.
/// 
/// @return This routine returns the quotient.
/// 
/// @since XT 1.0
fun rtlDivideLargeInteger(dividend LARGE_INTEGER, divisor ULONG, remainder PULONG) {
	var dividendSign LONGLONG
	var uDividend LONGLONG
	var largeInt LARGE_INTEGER
	dividendSign = Dividend.quadPart >> ((sizeOf<Unsigned long long>() * 8) - 1)
	uDividend = (Dividend.quadPart ^ dividendSign) - dividendSign
	LargeInt.quadPart = (rtlDivideUnsigned64(uDividend, divisor, (0 as! PVOID)) ^ dividendSign) - dividendSign
	if remainder {
		remainder[0] = Dividend.quadPart - (LargeInt.quadPart * divisor)

	}

	return largeInt
}

/// Gets the base exponent of a given floating point value.
/// 
/// @param Value
///        Supplies the floating point value to get the base exponent of.
/// 
/// @param PowerOfTen
///        Supplies a pointer that receives the power of ten associated with the base exponent.
/// 
/// @return This routine returns the base exponent value.
/// 
/// @since XT 1.0
fun rtlGetBaseExponent(value DOUBLE, powerOfTen PDOUBLE) {
	var baseExponent LONG
	var currentExponent LONG
	var exponent LONG
	var exponentShift ULONG
	var exponentMask ULONG
	var parts LARGE_DOUBLE
	var power DOUBLE
	exponentMask = 9218868437227405312 >> (sizeOf<Unsigned long long>() * 8)
	exponentShift = 52 - (sizeOf<Unsigned long long>() * 8)
	if value == 0 {
		powerOfTen[0] = 1
		return 0

	}

	Parts.doublePart = value
	baseExponent = ((Parts.u.highPart & exponentMask) >> exponentShift) - 1023
	exponent = (baseExponent as! DOUBLE * 0.30102999565999999) as! LONG + 1
	currentExponent = 0
	power = 1
	if exponent > 0 {
		while currentExponent + 10 <= exponent {
			power *= 1.0E-10
			currentExponent += 10

		}

		while currentExponent + 1 <= exponent {
			power *= 0.10000000000000001
			currentExponent += 1

		}


	} else {
		while currentExponent - 10 >= exponent {
			power *= 10000000000
			currentExponent -= 10

		}

		while currentExponent - 1 >= exponent {
			power *= 10
			currentExponent -= 1

		}


	}

	value *= power
	while (value != 0) and (value as! LONG == 0) {
		value *= 10
		exponent -= 1
		power *= 10

	}

	powerOfTen[0] = power
	return exponent
}

/// Determines whether a floating-point number is infinite.
/// 
/// @param Value
///        Supplies the floating-point value to test.
/// 
/// @return This routine returns TRUE if the argument is infinite or a NaN, or FALSE otherwise.
/// 
/// @since XT 1.0
fun rtlInfiniteDouble(value DOUBLE) {
	var var Union (unnamed union at /home/Belliash/ExectOS/xtoskrnl/rtl/math.c:618:5)
	Var.double = value
	return ((Var.doubleS.exponent & 2047) == 2047)
}

/// Multiplies a signed large integer by a signed integer.
/// 
/// @param Multiplicand
///        Supplies a large integer to be multiplied.
/// 
/// @param Multiplier
///        Supplies an integer by which the large integer is multiplied.
/// 
/// @return This routine returns the result of the multiplication.
/// 
/// @since XT 1.0
fun rtlMultiplyLargeInteger(multiplicand LARGE_INTEGER, multiplier LONG) {
	var largeInt LARGE_INTEGER
	LargeInt.quadPart = Multiplicand.quadPart as! LONGLONG * multiplier
	return largeInt
}

/// Determines whether a floating-point number is a NaN ("Not a Number").
/// 
/// @param Value
///        Supplies the floating-point value to test.
/// 
/// @return This routine returns TRUE if the argument is a NaN, or FALSE otherwise.
/// 
/// @since XT 1.0
fun rtlNanDouble(value DOUBLE) {
	var var Union (unnamed union at /home/Belliash/ExectOS/xtoskrnl/rtl/math.c:677:5)
	Var.double = value
	return (Var.doubleS.exponent == 2047 and (Var.doubleS.mantissaHigh != 0 or Var.doubleS.mantissaLow != 0))
}
