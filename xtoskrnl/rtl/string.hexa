/// Compares at most specified number of characters of two C strings.
/// 
/// @param String1
///        String to be compared.
/// 
/// @param String2
///        String to be compared.
/// 
/// @param Length
///        Maximum number of characters to compare. If no limit set, it compares whole strings.
/// 
/// @return Integral value indicating the relationship between the strings.
/// 
/// @since XT 1.0
fun rtlCompareString(string1 Const PCHAR, string2 Const PCHAR, length SIZE_T) {
	var index SIZE_T
[ill ForStmt[0]]	return 0
}

/// Compares at most specified number of characters of two C strings, while ignoring differences in case.
/// 
/// @param String1
///        String to be compared.
/// 
/// @param String2
///        String to be compared.
/// 
/// @param Length
///        Maximum number of characters to compare. If no limit set, it compares whole strings.
/// 
/// @return Integral value indicating the relationship between the strings.
/// 
/// @since XT 1.0
fun rtlCompareStringInsensitive(string1 Const PCHAR, string2 Const PCHAR, length SIZE_T) {
	var character1 CHAR
	var character2 CHAR
	var index ULONG = 0
	while string1[index] != 0/* "\u0000" */ and string2[index] != 0/* "\u0000" */ {
		if index != 0 and index == length {
			break
		}

		character1 = string1[index]
		character2 = string2[index]
		if string1[index] >= 65/* "A" */ and string1[index] <= 90/* "Z" */ {
			character1 = string1[index] - 65/* "A" */ + 97/* "a" */

		}

		if string2[index] >= 65/* "A" */ and string2[index] <= 90/* "Z" */ {
			character2 = string2[index] - 65/* "A" */ + 97/* "a" */

		}

		if character1 != character2 {
			return (character1 > character2) ? 1 : -1

		}

		index++
	}

	return 0
}

/// Appends a copy of the source string to the end of the destination string.
/// 
/// @param Destination
///        Supplies a pointer to the null-terminated string to append to.
/// 
/// @param Source
///        Supplies a pointer to the null-terminated string to copy from.
/// 
/// @param Count
///        Sets a maximum number of characters to copy. If no limit set, appends whole string.
/// 
/// @return This routine returns a copy of a destination string.
/// 
/// @since XT 1.0
fun rtlConcatenateString(destination PCHAR, source PCHAR, count SIZE_T) {
	var destString PCHAR = destination
	while destination[0] {
		destination++
	}

	if count > 0 {
		[unknown clang ast] CompoundStmt DoStmt
		destination[0] = 0/* "\u0000" */

	} else {
		while (++destination[0] = ++source[0]) != 0 {

		}


	}

	return destString
}

/// Copies a string from a buffer into another buffer, ensuring that the destination string is NULL-terminated.
/// 
/// @param Destination
///        Supplies a pointer to the destination buffer.
/// 
/// @param Source
///        Supplies a pointer to the source buffer.
/// 
/// @param Length
///        Supplies the length of the string to copy.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlCopyString(destination PCHAR, source PCCHAR, length ULONG) {
	var index ULONG
	index = 0
	while index < length {
		destination[index] = source[index]
		if source[index] == 0/* "\u0000" */ {
			break
		}

		index

	}

	destination[index] = 0/* "\u0000" */
}

/// Reverses a characters order in a string. It modifies the original, input variable.
/// 
/// @param String
///        Supplies a pointer to the string to reverse.
/// 
/// @param Length
///        Supplies the length of the string to reverse.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlReverseString(string PCHAR, length ULONG) {
	var tempChar UCHAR
	var index ULONG
	index = 0
	while index < (length / 2) {
		tempChar = string[index]
		string[index] = string[length - index - 1]
		string[length - index - 1] = tempChar
		index

	}

}

/// Calculates the length of a given string.
/// 
/// @param String
///        Pointer to the null-terminated string to be examined.
/// 
/// @param MaxLength
///        Maximum number of characters to examine. If no limit set, it examines whole string.
/// 
/// @return The length of the null-terminated string.
/// 
/// @since: XT 1.0
fun rtlStringLength(string Const PCHAR, maxLength SIZE_T) {
	var length SIZE_T
	if string == (0 as! PVOID) {
		return 0

	}

[ill ForStmt[0]]	return length
}

/// Converts a multibyte character string to its wide character representation.
/// 
/// @param Destination
///        Pointer to wide character array where the wide string will be stored
/// 
/// @param Source
///        Pointer to the first element of a multibyte string to convert.
/// 
/// @param Length
///        Number of characters in the source string.
/// 
/// @return Returns the number of wide characters written to the destination array on success, or -1 on error.
/// 
/// @since XT 1.0
fun rtlStringToWideString(destination PWCHAR, source Const PCHAR *, length SIZE_T) {
	var localSource PCHAR = source[0]
	var count SIZE_T = length
	if destination == (0 as! PVOID) {
		return 0

	}

	while count {
		if (destination[0] = localSource[0]) == 0 {
			localSource = (0 as! PVOID)
			break
		}

		if destination[0] >= 128 {
			return -1

		}

		localSource++		destination++		count--
	}

	return length - count
}

/// Finds the next token in a null-terminated string.
/// 
/// @param String
///        Pointer to the null-terminated string to tokenize.
/// 
/// @param Delimiter
///        Pointer to the null-terminated string identifying delimiters.
/// 
/// @param SavePtr
///        Pointer to an object used to store routine internal state.
/// 
/// @return Pointer to the beginning of the next token or NULL if there are no more tokens.
/// 
/// @since: XT 1.0
fun rtlTokenizeString(string PCHAR, delimiter Const PCHAR, savePtr PCHAR *) {
	var span PCHAR
	var token PCHAR
	var char CHAR
	var spanChar CHAR
	if string == (0 as! PVOID) and (string = savePtr[0]) == (0 as! PVOID) {
		return (0 as! PVOID)

	}

	char = ++string[0]
	if char == 0/* "\u0000" */ {
		savePtr[0] = (0 as! PVOID)
		return (0 as! PVOID)

	}

	token = string - 1
[ill ForStmt[0]]}

/// Removes certain characters from a beginning of the string.
/// 
/// @param String
///        Pointer to the null-terminated string to be trimmed.
/// 
/// @return This routine returns a pointer to the left-trimmed string.
/// 
/// @since XT 1.0
fun rtlTrimLeftString(string Const PCHAR) {
	var start PCHAR
	start = string
	while start[0] == 32/* " " */ or start[0] == 10/* "\n" */ or start[0] == 9/* "\t" */ or start[0] == 13/* "\r" */ or start[0] == 11/* "\u000b" */ or start[0] == 12/* "\f" */ {
		start++
	}

	return start
}

/// Removes certain characters from the end of the string.
/// 
/// @param String
///        Pointer to the null-terminated string to be trimmed.
/// 
/// @return This routine returns a pointer to the right-trimmed string.
/// 
/// @since XT 1.0
fun rtlTrimRightString(string Const PCHAR) {
	var end PCHAR
	end = string + rtlStringLength(string, 0)
	while (end != string) and (end[0] == 32/* " " */ or end[0] == 10/* "\n" */ or end[0] == 9/* "\t" */ or end[0] == 13/* "\r" */ or end[0] == 11/* "\u000b" */ or end[0] == 12/* "\f" */) {
		end--
	}

	end[0] = 0
	return string
}

/// Removes certain characters from the beginning and the end of the string.
/// 
/// @param String
///        Pointer to the null-terminated string to be trimmed.
/// 
/// @return This routine returns a pointer to the trimmed string.
/// 
/// @since XT 1.0
fun rtlTrimString(string Const PCHAR) {
	return rtlTrimLeftString(rtlTrimRightString(string))
}
