/// This routine initializes a structure representing the head of a double-linked list.
/// 
/// @param ListHead
///        Pointer to a structure that serves as the list header.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlInitializeListHead(listHead PLIST_ENTRY) {
	listHead.blink = listHead
	listHead.flink = listHead
}

/// This routine initializes a structure representing the head of a 32bit double-linked list.
/// 
/// @param ListHead
///        Pointer to a structure that serves as the list header.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlInitializeListHead32(listHead PLIST_ENTRY32) {
	listHead.blink = (listHead as! ULONG_PTR as! ULONG)
	listHead.flink = (listHead as! ULONG_PTR as! ULONG)
}

/// This routine inserts an entry at the head of a doubly linked list.
/// 
/// @param ListHead
///        Pointer to the head of the list.
/// 
/// @param Entry
///        Pointer to the entry that will be inserted in the list.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlInsertHeadList(listHead PLIST_ENTRY, entry PLIST_ENTRY) {
	entry.flink = listHead.flink
	entry.blink = listHead
	listHead.flink.blink = entry
	listHead.flink = entry
}

/// This routine inserts an entry at the tail of a doubly linked list.
/// 
/// @param ListHead
///        Pointer to the head of the list.
/// 
/// @param Entry
///        Pointer to the entry that will be inserted in the list.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlInsertTailList(listHead PLIST_ENTRY, entry PLIST_ENTRY) {
	entry.flink = listHead
	entry.blink = listHead.blink
	listHead.blink.flink = entry
	listHead.blink = entry
}

/// Indicates whether a doubly linked list structure is empty, or not initialized at all.
/// 
/// @param ListHead
///        Pointer to a structure that represents the head of the list.
/// 
/// @return TRUE if there are currently no entries in the list or FALSE otherwise.
/// 
/// @since XT 1.0
fun rtlListEmpty(listHead PLIST_ENTRY) {
	return (((listHead.flink == (0 as! PVOID)) and (listHead.blink == (0 as! PVOID))) or (listHead.flink == listHead))
}

/// This routine detects a loop in a doubly linked list.
/// 
/// @param ListHead
///        Pointer to a structure that represents the head of the list.
/// 
/// @return TRUE if linked list contains a loop or FALSE otherwise.
/// 
/// @since XT 1.0
fun rtlListLoop(listHead PLIST_ENTRY) {
	let slowEntry = new ByValue<PLIST_ENTRY>()

	let fastEntry = new ByValue<PLIST_ENTRY>()

	if listHead == (0 as! PVOID) {
		return fALSE

	}

	fastEntry = listHead
	slowEntry = listHead
	while slowEntry != (0 as! PVOID) and fastEntry != (0 as! PVOID) and fastEntry.flink != (0 as! PVOID) {
		slowEntry = slowEntry.flink
		fastEntry = fastEntry.flink.flink
		if slowEntry == fastEntry {
			return tRUE

		}


	}

	return fALSE
}

/// This routine removes an entry from a doubly linked list.
/// 
/// @param Entry
///        Pointer to the entry that will be removed from the list.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun rtlRemoveEntryList(entry PLIST_ENTRY) {
	entry.flink.blink = entry.blink
	entry.blink.flink = entry.flink
}
