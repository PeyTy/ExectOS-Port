fun hlGetFrameBufferDimensions(width PUINT, height PUINT) {
	width[0] = HlpFrameBufferData.width
	height[0] = HlpFrameBufferData.height
}

fun hlFrameBufferInitialized() {
	return HlpFrameBufferData.initialized
}

/// Clears the screen by drawing a box filled with specified color.
/// 
/// @param Color
///        Specifies the color of the box used to fill the screen in (A)RGB format.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlClearScreen(color ULONG) {
	var line SIZE_T
	var positionX SIZE_T
	var positionY SIZE_T
	var backgroundColor ULONG
	var frameBuf PULONG
	if HlpFrameBufferData.initialized == fALSE {
		return

	}

	frameBuf = HlpFrameBufferData.address
	backgroundColor = hlpRGBColor(color)
	positionY = 0
	while positionY < HlpFrameBufferData.height {
		line = positionY * HlpFrameBufferData.pixelsPerScanLine
		positionX = 0
		while positionX < HlpFrameBufferData.width {
			frameBuf[line + positionX] = backgroundColor
			positionX++
		}

		positionY++
	}

}

/// Draw a pixel on the screen at the given position and color.
/// 
/// @param PositionX
///        Supplies the X coordinate of the pixel.
/// 
/// @param PositionY
///        Supplies the Y coordinate of the pixel.
/// 
/// @param Color
///        Specifies the color of the pixel in (A)RGB format.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlDrawPixel(positionX ULONG, positionY ULONG, color ULONG) {
	var frameBufferIndex SIZE_T
	if HlpFrameBufferData.initialized == fALSE {
		return

	}

	if positionX >= HlpFrameBufferData.width or positionY >= HlpFrameBufferData.height or color > 4294967295 {
		return

	}

	frameBufferIndex = 4 * HlpFrameBufferData.pixelsPerScanLine * positionY + 4 * positionX
	((HlpFrameBufferData.address + frameBufferIndex) as! PULONG)[0] = hlpRGBColor(color)
}

/// Initializes frame buffer display.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlInitializeFrameBuffer() {
	let frameBufferResource = new ByValue<PSYSTEM_RESOURCE_FRAMEBUFFER>()

	let systemResource = new ByValue<PSYSTEM_RESOURCE_HEADER>()

	var status XTSTATUS
	if HlpFrameBufferData.initialized {
		return (0 as! XTSTATUS)

	}

	status = keGetSystemResource(systemResourceFrameBuffer, systemResource)
	if status != (0 as! XTSTATUS) {
		return (3221226021 as! XTSTATUS)

	}

	frameBufferResource = systemResource as! PSYSTEM_RESOURCE_FRAMEBUFFER
	if !frameBufferResource.header.virtualAddress {
		return (3221225635 as! XTSTATUS)

	}

	if frameBufferResource.font {
		HlpFrameBufferData.font = frameBufferResource.font

	} else {
		HlpFrameBufferData.font = xtFbDefaultFont as! PVOID

	}

	HlpFrameBufferData.address = frameBufferResource.header.virtualAddress
	HlpFrameBufferData.width = frameBufferResource.width
	HlpFrameBufferData.height = frameBufferResource.height
	HlpFrameBufferData.bitsPerPixel = frameBufferResource.bitsPerPixel
	HlpFrameBufferData.pixelsPerScanLine = frameBufferResource.pixelsPerScanLine
	HlpFrameBufferData.pitch = frameBufferResource.pitch
	HlpFrameBufferData.pixels.blueShift = frameBufferResource.pixels.blueShift
	HlpFrameBufferData.pixels.blueSize = frameBufferResource.pixels.blueSize
	HlpFrameBufferData.pixels.greenShift = frameBufferResource.pixels.greenShift
	HlpFrameBufferData.pixels.greenSize = frameBufferResource.pixels.greenSize
	HlpFrameBufferData.pixels.redShift = frameBufferResource.pixels.redShift
	HlpFrameBufferData.pixels.redSize = frameBufferResource.pixels.redSize
	HlpFrameBufferData.pixels.reservedShift = frameBufferResource.pixels.reservedShift
	HlpFrameBufferData.pixels.reservedSize = frameBufferResource.pixels.reservedSize
	HlpFrameBufferData.initialized = tRUE
	hlClearScreen(0)
	return (0 as! XTSTATUS)
}

/// Puts a wide character on the framebuffer at the given position and color using the SSFN font.
/// 
/// @param PositionX
///        Supplies the X coordinate of the character.
/// 
/// @param PositionY
///        Supplies the Y coordinate of the character.
/// 
/// @param Color
///        Supplies the font color in (A)RGB format.
/// 
/// @param WideCharacter
///        Supplies the wide character to be drawn on the framebuffer.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlPutCharacter(positionX ULONG, positionY ULONG, color ULONG, wideCharacter WCHAR) {
	var currentFragment UINT
	var glyph UINT
	var glyphLimit UINT
	var index UINT
	var line UINT
	var mapping UINT
	var character PUCHAR
	var characterMapping PUCHAR
	var fragment PUCHAR
	var glyphPixel UINT_PTR
	var pixel UINT_PTR
	let fbFont = new ByValue<PSSFN_FONT_HEADER>()

	var fontColor ULONG
	if HlpFrameBufferData.initialized == fALSE {
		return

	}

	fbFont = HlpFrameBufferData.font as! PSSFN_FONT_HEADER
	characterMapping = fbFont as! PUCHAR + fbFont.charactersOffset
	character = 0
	index = 0
	while index < 1114112 {
		if characterMapping[0] == 255 {
			index += 65535
			characterMapping++
		} else {
			if (characterMapping[0] & 192) == 192 {
				index += (((characterMapping[0] & 63) << 8) | characterMapping[1])
				characterMapping += 2

			} else {
				if (characterMapping[0] & 192) == 128 {
					index += (characterMapping[0] & 63)
					characterMapping++
				} else {
					if index == wideCharacter {
						character = characterMapping
						break
					}

					characterMapping += (6 + characterMapping[1] * ((characterMapping[0] & 64) ? 6 : 5))

				}


			}


		}

		index++
	}

	if !character {
		return

	}

	glyphPixel = HlpFrameBufferData.address as! UINT_PTR + positionY * HlpFrameBufferData.pitch + positionX * 4
	fontColor = hlpRGBColor(color)
	mapping = 0
	characterMapping = character + 6
	index = 0
	while index < character[1] {
		if characterMapping[0] == 255 and characterMapping[1] == 255 {
			continue
		}

		fragment = fbFont as! PUCHAR + (characterMapping[2] | (characterMapping[3] << 8) | (characterMapping[4] << 16) | (((character[0] & 64)) ? (characterMapping[5] << 24) : 0))
		if (fragment[0] & 224) != 128 {
			continue
		}

		glyphPixel += (characterMapping[1] - mapping) * HlpFrameBufferData.pitch
		mapping = characterMapping[1]
		glyph = ((fragment[0] & 31) + 1) << 3
		glyphLimit = fragment[1] + 1
		fragment += 2
		currentFragment = 1
		while --glyphLimit {
			pixel = glyphPixel
			line = 0
			while line < glyph {
				if currentFragment > 128 {
					fragment++					currentFragment = 1

				}

				if fragment[0] & currentFragment {
					(pixel as! PULONG)[0] = fontColor

				}

				pixel += 4
				currentFragment <<= 1
				line++
			}

			glyphPixel += HlpFrameBufferData.pitch
			mapping++
		}

		characterMapping += (character[0] & 64) ? 6 : 5
		index++
	}

}

/// Converts color format from (A)RGB one expected by current FrameBuffer.
/// 
/// @param Color
///        Specifies the color in (A)RGB format.
/// 
/// @return Returns the color in FrameBuffer format.
/// 
/// @since XT 1.0
fun hlpRGBColor(color ULONG) {
	var blue USHORT
	var green USHORT
	var red USHORT
	var reserved USHORT
	blue = (color & 255) as! USHORT
	green = ((color >> 8) & 255) as! USHORT
	red = ((color >> 16) & 255) as! USHORT
	reserved = ((color >> 24) & 255) as! USHORT
	return ((blue << HlpFrameBufferData.pixels.blueShift) | (green << HlpFrameBufferData.pixels.greenShift) | (red << HlpFrameBufferData.pixels.redShift) | (reserved << HlpFrameBufferData.pixels.reservedShift)) as! ULONG
}
