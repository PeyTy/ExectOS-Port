fun hlGetFrameBufferDimensions(width PUINT, height PUINT) {
	width[0] = HlpFrameBufferData.Width
	height[0] = HlpFrameBufferData.Height
}

fun hlFrameBufferInitialized() {
	return HlpFrameBufferData.Initialized
}

/// Clears the screen by drawing a box filled with specified color.
/// 
/// @param Color
///        Specifies the color of the box used to fill the screen in (A)RGB format.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlClearScreen(color ULONG) {
	var line SIZE_T
	var positionX SIZE_T
	var positionY SIZE_T
	var backgroundColor ULONG
	var frameBuf PULONG
	if HlpFrameBufferData.Initialized == fALSE {
		return ??

	}

	frameBuf = HlpFrameBufferData.Address
	backgroundColor = hlpRGBColor(color)
	[unknown clang ast] CompoundStmt ForStmt
}

/// Draw a pixel on the screen at the given position and color.
/// 
/// @param PositionX
///        Supplies the X coordinate of the pixel.
/// 
/// @param PositionY
///        Supplies the Y coordinate of the pixel.
/// 
/// @param Color
///        Specifies the color of the pixel in (A)RGB format.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlDrawPixel(positionX ULONG, positionY ULONG, color ULONG) {
	var frameBufferIndex SIZE_T
	if HlpFrameBufferData.Initialized == fALSE {
		return ??

	}

	if positionX >= HlpFrameBufferData.Width or positionY >= HlpFrameBufferData.Height or color > 4294967295 {
		return ??

	}

	frameBufferIndex = 4 * HlpFrameBufferData.PixelsPerScanLine * positionY + 4 * positionX
	((HlpFrameBufferData.Address + frameBufferIndex) as! PULONG)[0] = hlpRGBColor(color)
}

/// Initializes frame buffer display.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlInitializeFrameBuffer() {
	let frameBufferResource = new ByValue<PSYSTEM_RESOURCE_FRAMEBUFFER>()

	let systemResource = new ByValue<PSYSTEM_RESOURCE_HEADER>()

	var status XTSTATUS
	if HlpFrameBufferData.Initialized {
		return (0 as! XTSTATUS)

	}

	status = keGetSystemResource(systemResourceFrameBuffer, systemResource)
	if status != (0 as! XTSTATUS) {
		return (3221226021 as! XTSTATUS)

	}

	frameBufferResource = systemResource as! PSYSTEM_RESOURCE_FRAMEBUFFER
	if !frameBufferResource.header.virtualAddress {
		return (3221225635 as! XTSTATUS)

	}

	if frameBufferResource.font {
		HlpFrameBufferData.Font = frameBufferResource.font

	} else {
		HlpFrameBufferData.Font = xtFbDefaultFont as! PVOID

	}

	HlpFrameBufferData.Address = frameBufferResource.header.virtualAddress
	HlpFrameBufferData.Width = frameBufferResource.width
	HlpFrameBufferData.Height = frameBufferResource.height
	HlpFrameBufferData.BitsPerPixel = frameBufferResource.bitsPerPixel
	HlpFrameBufferData.PixelsPerScanLine = frameBufferResource.pixelsPerScanLine
	HlpFrameBufferData.Pitch = frameBufferResource.pitch
	HlpFrameBufferData.Pixels.blueShift = frameBufferResource.pixels.blueShift
	HlpFrameBufferData.Pixels.blueSize = frameBufferResource.pixels.blueSize
	HlpFrameBufferData.Pixels.greenShift = frameBufferResource.pixels.greenShift
	HlpFrameBufferData.Pixels.greenSize = frameBufferResource.pixels.greenSize
	HlpFrameBufferData.Pixels.redShift = frameBufferResource.pixels.redShift
	HlpFrameBufferData.Pixels.redSize = frameBufferResource.pixels.redSize
	HlpFrameBufferData.Pixels.reservedShift = frameBufferResource.pixels.reservedShift
	HlpFrameBufferData.Pixels.reservedSize = frameBufferResource.pixels.reservedSize
	HlpFrameBufferData.Initialized = tRUE
	hlClearScreen(0)
	return (0 as! XTSTATUS)
}

/// Puts a wide character on the framebuffer at the given position and color using the SSFN font.
/// 
/// @param PositionX
///        Supplies the X coordinate of the character.
/// 
/// @param PositionY
///        Supplies the Y coordinate of the character.
/// 
/// @param Color
///        Supplies the font color in (A)RGB format.
/// 
/// @param WideCharacter
///        Supplies the wide character to be drawn on the framebuffer.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlPutCharacter(positionX ULONG, positionY ULONG, color ULONG, wideCharacter WCHAR) {
	var currentFragment UINT
	var glyph UINT
	var glyphLimit UINT
	var index UINT
	var line UINT
	var mapping UINT
	var character PUCHAR
	var characterMapping PUCHAR
	var fragment PUCHAR
	var glyphPixel UINT_PTR
	var pixel UINT_PTR
	let fbFont = new ByValue<PSSFN_FONT_HEADER>()

	var fontColor ULONG
	if HlpFrameBufferData.Initialized == fALSE {
		return ??

	}

	fbFont = HlpFrameBufferData.Font as! PSSFN_FONT_HEADER
	characterMapping = fbFont as! PUCHAR + fbFont.charactersOffset
	character = 0
	[unknown clang ast] CompoundStmt ForStmt
	if !character {
		return ??

	}

	glyphPixel = HlpFrameBufferData.Address as! UINT_PTR + positionY * HlpFrameBufferData.Pitch + positionX * 4
	fontColor = hlpRGBColor(color)
	mapping = 0
	characterMapping = character + 6
	[unknown clang ast] CompoundStmt ForStmt
}

/// Converts color format from (A)RGB one expected by current FrameBuffer.
/// 
/// @param Color
///        Specifies the color in (A)RGB format.
/// 
/// @return Returns the color in FrameBuffer format.
/// 
/// @since XT 1.0
fun hlpRGBColor(color ULONG) {
	var blue USHORT
	var green USHORT
	var red USHORT
	var reserved USHORT
	blue = (color & 255) as! USHORT
	green = ((color >> 8) & 255) as! USHORT
	red = ((color >> 16) & 255) as! USHORT
	reserved = ((color >> 24) & 255) as! USHORT
	return ((blue << HlpFrameBufferData.Pixels.blueShift) | (green << HlpFrameBufferData.Pixels.greenShift) | (red << HlpFrameBufferData.Pixels.redShift) | (reserved << HlpFrameBufferData.Pixels.reservedShift)) as! ULONG
}
