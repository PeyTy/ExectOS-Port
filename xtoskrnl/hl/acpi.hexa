/// Gets a pointer to the ACPI system description pointer (RSDP).
/// 
/// @param Rsdp
///        Supplies a pointer to the memory area, where RSDP virtual address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlGetAcpiSystemDescriptionPointer(rsdp PACPI_RSDP *) {
	rsdp[0] = hlpAcpiRsdp
	return (0 as! XTSTATUS)
}

/// Gets an ACPI description table with given signature, available in the XSDT/RSDT.
/// 
/// @param Signature
///        Supplies the signature of the desired ACPI table.
/// 
/// @param AcpiTable
///        Supplies a pointer to memory area where ACPI table virtual address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlGetAcpiTable(signature ULONG, acpiTable PACPI_DESCRIPTION_HEADER *) {
	let table = new ByValue<PACPI_DESCRIPTION_HEADER>()

	var status XTSTATUS

	{
		status = hlpQueryAcpiTables(signature, table)
		if status != (0 as! XTSTATUS) {
			return (3221226021 as! XTSTATUS)

		}


	}

	acpiTable[0] = table
	return (0 as! XTSTATUS)
}

/// Stores given ACPI table in the kernel local cache.
/// 
/// @param AcpiTable
///        Supplies a pointer to ACPI table that will be stored in the cache.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun hlpCacheAcpiTable(acpiTable PACPI_DESCRIPTION_HEADER) {
	let acpiCache = new ByValue<PACPI_CACHE_LIST>()

	acpiCache = (((acpiTable) as! Char * - __builtin_offsetof<Unsigned long long>()) as! ACPI_CACHE_LIST *)
	rtlInsertTailList(hlpAcpiCacheList, acpiCache.listEntry)
}

/// Performs an initialization of the ACPI subsystem.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpInitializeAcpi() {
	let fadt = new ByValue<PACPI_FADT>()

	var status XTSTATUS
	status = hlpInitializeAcpiCache()
	if status != (0 as! XTSTATUS) {
		return status

	}

	status = hlGetAcpiTable(1346584902, fadt as! PACPI_DESCRIPTION_HEADER *)
	if status != (0 as! XTSTATUS) or !fadt {
		return (3221226021 as! XTSTATUS)

	}

	hlpInitializeAcpiTimer()
	return (0 as! XTSTATUS)
}

/// Initializes the kernel's local ACPI cache storage.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpInitializeAcpiCache() {
	let rsdt = new ByValue<PACPI_DESCRIPTION_HEADER>()

	var status XTSTATUS
	rtlInitializeListHead(hlpAcpiCacheList)
	status = hlpInitializeAcpiSystemDescriptionTable(rsdt)
	if status != (0 as! XTSTATUS) {
		return status

	}

	hlpCacheAcpiTable(rsdt)
	return (0 as! XTSTATUS)
}

/// Initializes ACPI System Description Table (XSDT/RSDT) by finding proper table and mapping its virtual address.
/// 
/// @param AcpiTable
///        Supplies a pointer to memory area where ACPI table virtual address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpInitializeAcpiSystemDescriptionTable(acpiTable PACPI_DESCRIPTION_HEADER *) {
	var rsdpAddress PHYSICAL_ADDRESS
	var rsdtAddress PHYSICAL_ADDRESS
	let resourceHeader = new ByValue<PSYSTEM_RESOURCE_HEADER>()

	let acpiResource = new ByValue<PSYSTEM_RESOURCE_ACPI>()

	var rsdtPages ULONG
	let rsdt = new ByValue<PACPI_RSDT>()

	var status XTSTATUS
	status = keGetSystemResource(systemResourceAcpi, resourceHeader)
	if status != (0 as! XTSTATUS) {
		return (3221226021 as! XTSTATUS)

	}

	acpiResource = resourceHeader as! PSYSTEM_RESOURCE_ACPI
	RsdpAddress.quadPart = acpiResource.header.physicalAddress as! LONGLONG
	status = mmMapHardwareMemory(rsdpAddress, 1, tRUE, hlpAcpiRsdp as! PVOID *)
	mmMarkHardwareMemoryWriteThrough(hlpAcpiRsdp, 1)
	if status != (0 as! XTSTATUS) or hlpAcpiRsdp.signature != 2329016660419433298 {
		return (3221225485 as! XTSTATUS)

	}

	if hlpAcpiRsdp.revision >= 2 {
		RsdtAddress.quadPart = hlpAcpiRsdp.xsdtAddress as! LONGLONG

	} else {
		RsdtAddress.quadPart = hlpAcpiRsdp.rsdtAddress as! LONGLONG

	}

	status = mmMapHardwareMemory(rsdtAddress, 2, tRUE, rsdt as! PVOID *)
	mmMarkHardwareMemoryWriteThrough(rsdt, 2)
	if (status != (0 as! XTSTATUS)) or (rsdt.header.signature != 1413763922 and rsdt.header.signature != 1413763928) {
		return (3221225485 as! XTSTATUS)

	}

	rsdtPages = ((RsdtAddress..lowPart & (4096 - 1)) + rsdt.header.length + (4096 - 1)) >> 12
	if rsdtPages != 2 {
		mmUnmapHardwareMemory(rsdt, 2, tRUE)
		status = mmMapHardwareMemory(rsdtAddress, rsdtPages, tRUE, rsdt as! PVOID *)
		mmMarkHardwareMemoryWriteThrough(rsdt, rsdtPages)
		if status != (0 as! XTSTATUS) {
			return (3221225626 as! XTSTATUS)

		}


	}

	acpiTable[0] = rsdt.header
	return (0 as! XTSTATUS)
}

/// Initializes System Information structure based on the ACPI provided data.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpInitializeAcpiSystemInformation() {
	var madtTable PUCHAR
	let madt = new ByValue<PACPI_MADT>()

	var status XTSTATUS
	var cpuCount ULONG
	if keDbgPrint {

		keDbgPrint("HlpInitializeAcpiSystemInformation()\n")
	}

	rtlZeroMemory(hlpAcpiSystemInfo, sizeOf<Unsigned long long>())
	if keDbgPrint {

		keDbgPrint("DUPA1\n")
	}

	status = hlGetAcpiTable(1128878145, madt as! PACPI_DESCRIPTION_HEADER *)
	if keDbgPrint {

		keDbgPrint("DUPA2\n")
	}

	if status != (0 as! XTSTATUS) {
		return (3221226021 as! XTSTATUS)

	}

	madtTable = madt.apicTables as! PUCHAR
	cpuCount = 0
	if keDbgPrint {

		keDbgPrint("Madt: %zX\n", madt)
	}

	while madtTable <= (madt as! PUCHAR + madt.header.length) {
		if keDbgPrint {

			keDbgPrint("MadtTable: %P\n", madtTable)
		}

		if ((madtTable as! PACPI_MADT_LOCAL_APIC).header.type == 0) and ((madtTable as! PACPI_MADT_LOCAL_APIC).header.length == sizeOf<Unsigned long long>()) {
			if (madtTable as! PACPI_MADT_LOCAL_APIC).lapicFlags & 1 {
				cpuCount++
			}

			madtTable += (madtTable as! PACPI_MADT_LOCAL_APIC).header.length

		} else {
			madtTable += 1

		}


	}

	if keDbgPrint {

		keDbgPrint("Number of CPUs: %u\n", cpuCount)
	}

	return (0 as! XTSTATUS)
}

/// Initializes the ACPI Timer.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpInitializeAcpiTimer() {
	let fadt = new ByValue<PACPI_FADT>()

	var status XTSTATUS
	status = hlGetAcpiTable(1346584902, fadt as! PACPI_DESCRIPTION_HEADER *)
	if status != (0 as! XTSTATUS) or !fadt {
		return (3221226021 as! XTSTATUS)

	}

	HlpAcpiTimerInfo.timerPort = fadt.pmTmrBlkIoPort
	if fadt.flags & (1 << 8) {
		HlpAcpiTimerInfo.msbMask = 2147483648

	} else {
		HlpAcpiTimerInfo.msbMask = 8388608

	}

	return (0 as! XTSTATUS)
}

/// Queries kernel local ACPI cache in attempt to find a requested ACPI table.
/// 
/// @param Signature
///        Supplies the signature of the desired ACPI table.
/// 
/// @param AcpiTable
///        Supplies a pointer to memory area where ACPI table virtual address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpQueryAcpiCache(signature ULONG, acpiTable PACPI_DESCRIPTION_HEADER *) {
	let acpiCache = new ByValue<PACPI_CACHE_LIST>()

	let listEntry = new ByValue<PLIST_ENTRY>()

	listEntry = HlpAcpiCacheList.flink
	while listEntry != hlpAcpiCacheList {
		acpiCache = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! ACPI_CACHE_LIST *)
		if acpiCache.header.signature == signature {
			acpiTable[0] = acpiCache.header
			break
		}

		listEntry = listEntry.flink

	}

	if acpiTable[0] == (0 as! PVOID) {
		return (3221226021 as! XTSTATUS)

	}

	return (0 as! XTSTATUS)
}

/// Queries XSDT/RSDT in order to find a requested ACPI table. Once the desired ACPI table is found, it is being mapped and cached.
/// 
/// @param Signature
///        Supplies the signature of the desired ACPI table.
/// 
/// @param AcpiTable
///        Supplies a pointer to memory area where ACPI table virtual address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun hlpQueryAcpiTables(signature ULONG, acpiTable PACPI_DESCRIPTION_HEADER *) {
	var tableCount ULONG
	var tableIndex ULONG
	var tablePages ULONG
	let tableHeader = new ByValue<PACPI_DESCRIPTION_HEADER>()

	var tableAddress PHYSICAL_ADDRESS
	let fadt = new ByValue<PACPI_FADT>()

	let rsdt = new ByValue<PACPI_RSDT>()

	let xsdt = new ByValue<PACPI_XSDT>()

	var status XTSTATUS
	if signature == 1413763922 or signature == 1413763928 {
		return (3221225485 as! XTSTATUS)

	}

	if signature == 1413763908 or signature == 1396916550 {
		status = hlGetAcpiTable(1346584902, fadt as! PACPI_DESCRIPTION_HEADER *)
		if status != (0 as! XTSTATUS) {
			return status

		}

		if signature == 1413763908 {
			TableAddress..lowPart = fadt.dsdt

		} else {
			TableAddress..lowPart = fadt.firmwareCtrl

		}

		TableAddress..highPart = 0
		status = mmMapHardwareMemory(tableAddress, 2, tRUE, tableHeader as! PVOID *)
		if status != (0 as! XTSTATUS) {
			return status

		}


	} else {
		status = hlpQueryAcpiCache(1413763928, xsdt as! PACPI_DESCRIPTION_HEADER *)
		if status != (0 as! XTSTATUS) {
			status = hlpQueryAcpiCache(1413763922, rsdt as! PACPI_DESCRIPTION_HEADER *)

		}

		if status != (0 as! XTSTATUS) {
			return status

		}

		if xsdt != (0 as! PVOID) {
			tableCount = (xsdt.header.length - sizeOf<Unsigned long long>()) / 8

		} else {
			tableCount = (rsdt.header.length - sizeOf<Unsigned long long>()) / 4

		}

		tableIndex = 0
		while tableIndex < tableCount {
			if xsdt != (0 as! PVOID) {
				TableAddress.quadPart = xsdt.tables[tableIndex]

			} else {
				TableAddress..lowPart = rsdt.tables[tableIndex]
				TableAddress..highPart = 0

			}

			if tableHeader != (0 as! PVOID) {
				mmUnmapHardwareMemory(tableHeader, 2, tRUE)

			}

			status = mmMapHardwareMemory(tableAddress, 2, tRUE, tableHeader as! PVOID *)
			if status != (0 as! XTSTATUS) {
				return status

			}

			if tableHeader.signature == signature {
				break
			}

			tableIndex++
		}


	}

	if keDbgPrint {

		keDbgPrint("KUPA2\n")
	}

	if tableHeader.signature != signature {
		if tableHeader != (0 as! PVOID) {
			mmUnmapHardwareMemory(tableHeader, 2, tRUE)

		}

		return (3221226021 as! XTSTATUS)

	}

	if tableHeader.signature != 1346584902 or tableHeader.revision > 2 {
		if !hlpValidateAcpiTable(tableHeader, tableHeader.length) {
			mmUnmapHardwareMemory(tableHeader, 2, tRUE)
			return (3221225535 as! XTSTATUS)

		}


	}

	tablePages = ((tableHeader as! ULONG_PTR & (4096 - 1)) + tableHeader.length + (4096 - 1)) >> 12
	if tablePages != 2 {
		mmUnmapHardwareMemory(tableHeader, 2, fALSE)
		status = mmMapHardwareMemory(tableAddress, tablePages, tRUE, tableHeader as! PVOID *)
		if status != (0 as! XTSTATUS) {
			return (3221225626 as! XTSTATUS)

		}


	}

	mmMarkHardwareMemoryWriteThrough(tableHeader, tablePages)
	hlpCacheAcpiTable(tableHeader)
	if keDbgPrint {

		keDbgPrint("Table Address: %P\n", tableHeader)
	}

	acpiTable[0] = tableHeader
	return (0 as! XTSTATUS)
}

/// Validates given ACPI table by calculating its checksum.
/// 
/// @param Buffer
///        Supplies a pointer to the table to checksum.
/// 
/// @param Size
///        Supplies the size of the table, in bytes.
/// 
/// @return This routine returns TRUE if the table is valid, or FALSE otherwise.
/// 
/// @since XT 1.0
fun hlpValidateAcpiTable(buffer PVOID, size UINT_PTR) {
	var pointer PUCHAR
	var sum UCHAR
	sum = 0
	pointer = buffer
	while size != 0 {
		sum = (sum + pointer[0]) as! UCHAR
		pointer += 1
		size -= 1

	}

	return ((sum == 0)) ? tRUE : fALSE
}
