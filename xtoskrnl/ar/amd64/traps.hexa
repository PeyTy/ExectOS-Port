/// Dispatches the trap provided by common trap handler.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpDispatchTrap(trapFrame PKTRAP_FRAME) {
	switch trapFrame.vector {
		case 0:
			arpHandleTrap00(trapFrame)
		break
		case 1:
			arpHandleTrap01(trapFrame)
		break
		case 2:
			arpHandleTrap02(trapFrame)
		break
		case 3:
			arpHandleTrap03(trapFrame)
		break
		case 4:
			arpHandleTrap04(trapFrame)
		break
		case 5:
			arpHandleTrap05(trapFrame)
		break
		case 6:
			arpHandleTrap06(trapFrame)
		break
		case 7:
			arpHandleTrap07(trapFrame)
		break
		case 8:
			arpHandleTrap08(trapFrame)
		break
		case 9:
			arpHandleTrap09(trapFrame)
		break
		case 10:
			arpHandleTrap0A(trapFrame)
		break
		case 11:
			arpHandleTrap0B(trapFrame)
		break
		case 12:
			arpHandleTrap0C(trapFrame)
		break
		case 13:
			arpHandleTrap0D(trapFrame)
		break
		case 14:
			arpHandleTrap0E(trapFrame)
		break
		case 16:
			arpHandleTrap10(trapFrame)
		break
		case 17:
			arpHandleTrap11(trapFrame)
		break
		case 18:
			arpHandleTrap12(trapFrame)
		break
		case 19:
			arpHandleTrap13(trapFrame)
		break
		case 31:
			arpHandleTrap1F(trapFrame)
		break
		case 44:
			arpHandleTrap2C(trapFrame)
		break
		case 45:
			arpHandleTrap2D(trapFrame)
		break
		case 47:
			arpHandleTrap2F(trapFrame)
		break
		case 225:
			arpHandleTrapE1(trapFrame)
		break
		case _:
			arpHandleTrapFF(trapFrame)
		break
	}

}

fun arpHandleSystemCall32() {
	if keDbgPrint {

		keDbgPrint("Handled 32-bit system call!\n")
	}

}

fun arpHandleSystemCall64() {
	if keDbgPrint {

		keDbgPrint("Handled 64-bit system call!\n")
	}

}

/// Handles the trap 0x00 when a Divide By Zero exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap00(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Division-By-Zero Error (0x00)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x01 when Debug exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap01(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Debug exception (0x01)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x02 when Non-Maskable Interrupt (NMI) occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap02(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Non-Maskable-Interrupt (0x02)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x03 when the INT3 instruction is executed.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap03(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled INT3 (0x03)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x04 when the INTO instruction is executed and overflow bit is set.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap04(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Overflow exception (0x04)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x05 when the Bound Range Exceeded exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap05(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Bound-Range-Exceeded exception (0x05)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x06 when the Invalid Opcode exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap06(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Invalid Opcode exception (0x06)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x07 when the Device Not Available exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap07(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Device Not Available exception (0x07)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x08 when Double Fault exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap08(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Double-Fault exception (0x08)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x09 when the Segment Overrun exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap09(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Segment-Overrun exception (0x09)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x0A when the Invalid TSS exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap0A(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Invalid-TSS exception (0x0A)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x0B when the Segment Not Present exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap0B(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Segment-Not-Present exception (0x0B)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x0C when the Stack Segment Fault exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap0C(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Stack-Segment-Fault exception (0x0C)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x0D when General Protection Fault (GPF) exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap0D(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled General-Protection-Fault (0x0D)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x0E when the Page Fault (PF) exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap0E(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Page-Fault exception (0x0E)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x10 when the X87 Floating-Point exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap10(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled x87 Floating-Point exception (0x10)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x11 when the Alignment Check exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap11(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Alignment-Check exception (0x11)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x12 when the Machine Check exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap12(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Machine-Check exception (0x12)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x13 when the SIMD Floating-Point exception occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap13(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled SIMD Floating-Point exception (0x13)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x1F when software interrupt gets generated at APC_LEVEL.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap1F(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Unhandled software interrupt at APC level (0x1F)!\n")
	}

}

/// Handles the trap 0x2C when an assertion is raised.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap2C(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Assertion (0x2C)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x2D when a debug service is being requested.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap2D(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Debug-Service-Request (0x2D)!\n")
	}

[ill ForStmt[0]]}

/// Handles the trap 0x2F when a software interrupt gets generated at DISPATCH_LEVEL.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrap2F(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Unhandled software interrupt at DISPATCH level (0x2F)!\n")
	}

}

/// Handles the trap 0xE1 when InterProcessor Interrupt (IPI) occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrapE1(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Unhandled IPI interrupt (0xE1)!\n")
	}

}

/// Handles the trap 0xFF when Unexpected Interrupt occurs.
/// 
/// @param TrapFrame
///        Supplies a kernel trap frame pushed by common trap handler on the stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpHandleTrapFF(trapFrame PKTRAP_FRAME) {
	if keDbgPrint {

		keDbgPrint("Handled Unexpected-Interrupt (0xFF)!\n")
	}

[ill ForStmt[0]]}
