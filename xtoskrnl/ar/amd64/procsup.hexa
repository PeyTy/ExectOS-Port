/// Initializes AMD64 processor specific structures.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arInitializeProcessor(processorStructures PVOID) {
	let gdtDescriptor = new ByValue<KDESCRIPTOR>()

	let idtDescriptor = new ByValue<KDESCRIPTOR>()

	var kernelBootStack PVOID
	var kernelFaultStack PVOID
	let processorBlock = new ByValue<PKPROCESSOR_BLOCK>()

	let gdt = new ByValue<PKGDTENTRY>()

	let idt = new ByValue<PKIDTENTRY>()

	let tss = new ByValue<PKTSS>()

	if processorStructures {
		arpInitializeProcessorStructures(processorStructures, gdt, tss, processorBlock, kernelBootStack, kernelFaultStack)
		idt = arInitialIdt

	} else {
		gdt = arInitialGdt
		idt = arInitialIdt
		tss = arInitialTss
		kernelBootStack = arKernelBootStack
		kernelFaultStack = arKernelFaultStack
		processorBlock = arInitialProcessorBlock

	}

	arpInitializeProcessorBlock(processorBlock, gdt, idt, tss, kernelFaultStack)
	arpInitializeGdt(processorBlock)
	arpInitializeIdt(processorBlock)
	arpInitializeTss(processorBlock, kernelBootStack, kernelFaultStack)
	GdtDescriptor.base = gdt
	GdtDescriptor.limit = (128 * sizeOf<Unsigned long long>()) - 1
	IdtDescriptor.base = idt
	IdtDescriptor.limit = (256 * sizeOf<Unsigned long long>()) - 1
	arLoadGlobalDescriptorTable(GdtDescriptor.limit)
	arLoadInterruptDescriptorTable(IdtDescriptor.limit)
	arLoadTaskRegister(64 as! UINT)
	hlSetRunLevel(0)
	arpInitializeSegments()
	arWriteModelSpecificRegister(3221225729, processorBlock as! ULONGLONG)
	arWriteModelSpecificRegister(3221225730, processorBlock as! ULONGLONG)
	arpInitializeProcessorRegisters()
	arpIdentifyProcessor()
}

/// Updates an existing AMD64 GDT entry with new base address.
/// 
/// @param Gdt
///        Supplies a pointer to the GDT.
/// 
/// @param Selector
///        Specifies a segment selector of the GDT entry.
/// 
/// @param Base
///        Specifies a base address value of the descriptor.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arSetGdtEntryBase(gdt PKGDTENTRY, selector USHORT, base ULONG_PTR) {
	let gdtEntry = new ByValue<PKGDTENTRY>()

	gdtEntry = (gdt as! ULONG_PTR + (selector & ~3)) as! PKGDTENTRY
	gdtEntry.baseLow = (base & 65535)
	gdtEntry.bytes.baseMiddle = ((base >> 16) & 255)
	gdtEntry.bytes.baseHigh = ((base >> 24) & 255)
	gdtEntry.baseUpper = (base >> 32)
}

/// Identifies processor type (vendor, model, stepping) as well as looks for available CPU features and stores them in Processor Control Block (PRCB).
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpIdentifyProcessor() {
	let prcb = new ByValue<PKPROCESSOR_CONTROL_BLOCK>()

	let cpuRegisters = new ByValue<CPUID_REGISTERS>()

	let cpuSignature = new ByValue<CPUID_SIGNATURE>()

	prcb = keGetCurrentProcessorControlBlock()
	rtlZeroMemory(cpuRegisters, sizeOf<Unsigned long long>())
	CpuRegisters.leaf = cPUID_GET_VENDOR_STRING
	arCpuId(cpuRegisters)
	prcb.cpuId.vendor = CpuRegisters.ebx
	prcb.cpuId.vendorName[0] as! PULONG[0] = CpuRegisters.ebx
	prcb.cpuId.vendorName[4] as! PULONG[0] = CpuRegisters.edx
	prcb.cpuId.vendorName[8] as! PULONG[0] = CpuRegisters.ecx
	prcb.cpuId.vendorName[12] = 0/* "\u0000" */
	rtlZeroMemory(cpuRegisters, sizeOf<Unsigned long long>())
	CpuRegisters.leaf = cPUID_GET_CPU_FEATURES
	arCpuId(cpuRegisters)
	cpuSignature = CpuRegisters.eax as! PCPUID_SIGNATURE[0]
	prcb.cpuId.family = CpuSignature.family
	prcb.cpuId.model = CpuSignature.model
	prcb.cpuId.stepping = CpuSignature.stepping
	if prcb.cpuId.vendor == cPU_VENDOR_AMD {
		if prcb.cpuId.family >= 15 {
			prcb.cpuId.family = prcb.cpuId.family + CpuSignature.extendedFamily
			prcb.cpuId.model = prcb.cpuId.model + (CpuSignature.extendedModel << 4)

		}


	} else {
		if prcb.cpuId.vendor == cPU_VENDOR_INTEL {
			if prcb.cpuId.family == 15 {
				prcb.cpuId.family = prcb.cpuId.family + CpuSignature.extendedFamily

			}

			if (prcb.cpuId.family == 6) or (prcb.cpuId.family == 15) {
				prcb.cpuId.model = prcb.cpuId.model + (CpuSignature.extendedModel << 4)

			}


		} else {
			prcb.cpuId.vendor = cPU_VENDOR_UNKNOWN

		}


	}

}

/// Initializes the kernel's Global Descriptor Table (GDT).
/// 
/// @param Gdt
///        Supplies a pointer to the GDT to use.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeGdt(processorBlock PKPROCESSOR_BLOCK) {
	arpSetGdtEntry(processorBlock.gdtBase, 0, 0, 0, 0, 0, 1)
	arpSetGdtEntry(processorBlock.gdtBase, 16, 0, 0, (16 | 8 | 2), 0, 1)
	arpSetGdtEntry(processorBlock.gdtBase, 24, 0, 0, (16 | 2), 0, 1)
	arpSetGdtEntry(processorBlock.gdtBase, 32, 0, 4294967295, (16 | 8 | 2), 3, 2)
	arpSetGdtEntry(processorBlock.gdtBase, 40, 0, 4294967295, (16 | 2), 3, 2)
	arpSetGdtEntry(processorBlock.gdtBase, 48, 0, 0, (16 | 8 | 2), 3, 1)
	arpSetGdtEntry(processorBlock.gdtBase, 64, processorBlock.tssBase as! ULONG_PTR, sizeOf<Unsigned long long>(), 9, 0, 0)
	arpSetGdtEntry(processorBlock.gdtBase, 80, 0, 4095, (16 | 2), 3, 2)
	arpSetGdtEntry(processorBlock.gdtBase, 96, 0, 4294967295, (16 | 8 | 2), 0, 0)
	arpSetGdtEntry(processorBlock.gdtBase, 112, processorBlock.gdtBase as! ULONG_PTR, (128 * sizeOf<Unsigned long long>()) - 1, (16 | 2), 0, 0)
}

/// Initializes the kernel's Interrupt Descriptor Table (IDT).
/// 
/// @param ProcessorBlock
///        Supplies a pointer to the processor block to use.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeIdt(processorBlock PKPROCESSOR_BLOCK) {
	var vector UINT
	vector = 0
	while vector < 256 {
		arpSetIdtGate(processorBlock.idtBase, vector, arpHandleTrapFF, 16, 0, 0)
		vector++
	}

	arpSetIdtGate(processorBlock.idtBase, 0, arpTrap0x00, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 1, arpTrap0x01, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 2, arpTrap0x02, 16, 1, 0)
	arpSetIdtGate(processorBlock.idtBase, 3, arpTrap0x03, 16, 0, 3)
	arpSetIdtGate(processorBlock.idtBase, 4, arpTrap0x04, 16, 0, 3)
	arpSetIdtGate(processorBlock.idtBase, 5, arpTrap0x05, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 6, arpTrap0x06, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 7, arpTrap0x07, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 8, arpTrap0x08, 16, 1, 0)
	arpSetIdtGate(processorBlock.idtBase, 9, arpTrap0x09, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 10, arpTrap0x0A, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 11, arpTrap0x0B, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 12, arpTrap0x0C, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 13, arpTrap0x0D, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 14, arpTrap0x0E, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 16, arpTrap0x10, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 17, arpTrap0x11, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 18, arpTrap0x12, 16, 2, 0)
	arpSetIdtGate(processorBlock.idtBase, 19, arpTrap0x13, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 31, arpTrap0x1F, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 44, arpTrap0x2C, 16, 0, 3)
	arpSetIdtGate(processorBlock.idtBase, 45, arpTrap0x2D, 16, 0, 3)
	arpSetIdtGate(processorBlock.idtBase, 47, arpTrap0x2F, 16, 0, 0)
	arpSetIdtGate(processorBlock.idtBase, 225, arpTrap0xE1, 16, 0, 0)
}

/// Initializes processor block.
/// 
/// @param ProcessorBlock
///        Supplies a pointer to the processor block to initialize.
/// 
/// @param Gdt
///        Supplies a pointer to the GDT for this processor block.
/// 
/// @param Idt
///        Supplies a pointer to the IDT for this processor block.
/// 
/// @param Tss
///        Supplies a pointer to the TSS for this processor block.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeProcessorBlock(processorBlock PKPROCESSOR_BLOCK, gdt PKGDTENTRY, idt PKIDTENTRY, tss PKTSS, dpcStack PVOID) {
	processorBlock.self = processorBlock
	processorBlock.currentPrcb = processorBlock.prcb
	processorBlock.gdtBase = gdt as! PVOID
	processorBlock.idtBase = idt
	processorBlock.tssBase = tss
	processorBlock.prcb.rspBase = tss.rsp0
	processorBlock.prcb.dpcStack = dpcStack
	processorBlock.prcb.cpuNumber = processorBlock.cpuNumber
	processorBlock.prcb.setMember = 1 << processorBlock.cpuNumber
	processorBlock.prcb.multiThreadProcessorSet = 1 << processorBlock.cpuNumber
	processorBlock.prcb.processorState.specialRegisters.kernelDr6 = 0
	processorBlock.prcb.processorState.specialRegisters.kernelDr7 = 0
	processorBlock.prcb.currentThread = KeInitialThread.threadControlBlock
	processorBlock.prcb.currentThread.apcState.process = KeInitialProcess.processControlBlock
	processorBlock.prcb.idleThread = KeInitialThread.threadControlBlock
	processorBlock.prcb.nextThread = (0 as! PVOID)
	processorBlock.prcb.mxCsr = 8064
	processorBlock.runLevel = 0
}

/// Initializes processor registers and other boot structures.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeProcessorRegisters() {
	var patAttributes ULONGLONG
	arWriteControlRegister(4, arReadControlRegister(4) | 512)
	arWriteControlRegister(4, arReadControlRegister(4) | 1024)
	arWriteControlRegister(4, arReadControlRegister(4) | 8)
	arWriteControlRegister(4, arReadControlRegister(4) | 16)
	arWriteControlRegister(0, arReadControlRegister(0) | 65536)
	arWriteControlRegister(0, arReadControlRegister(0) | 262144)
	arWriteControlRegister(0, arReadControlRegister(0) & ~2)
	arWriteControlRegister(0, arReadControlRegister(0) & ~32)
	arFlushTlb()
	arWriteModelSpecificRegister(3221225601, ((32 as! ULONG64 | 3) << 48) | (16 as! ULONG64 << 32))
	arWriteModelSpecificRegister(3221225603, arpHandleSystemCall32 as! ULONG64)
	arWriteModelSpecificRegister(3221225602, arpHandleSystemCall64 as! ULONG64)
	arWriteModelSpecificRegister(3221225604, 512 | 256)
	arWriteModelSpecificRegister(3221225600, arReadModelSpecificRegister(3221225600) | (1 << 0))
	arWriteModelSpecificRegister(3221225600, arReadModelSpecificRegister(3221225600) | (1 << 11))
	patAttributes = (6 << 0) | (1 << 8) | (7 << 16) | (0 << 24) | (6 << 32) | (1 << 40) | (7 << 48) | (0 << 56)
	arWriteModelSpecificRegister(631, patAttributes)
	arLoadMxcsrRegister(8064)
}

/// Initializes i686 processor specific structures with provided memory buffer.
/// 
/// @param ProcessorStructures
///        Supplies a pointer to the allocated buffer with processor structures.
/// 
/// @param Gdt
///        Supplies a pointer to the GDT.
/// 
/// @param Tss
///        Supplies a pointer to the TSS.
/// 
/// @param ProcessorBlock
///        Supplies a pointer to the processor block.
/// 
/// @param KernelBootStack
///        Supplies a pointer to the kernel boot stack.
/// 
/// @param KernelFaultStack
///        Supplies a pointer to the kernel fault stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeProcessorStructures(processorStructures PVOID, gdt PKGDTENTRY *, tss PKTSS *, processorBlock PKPROCESSOR_BLOCK *, kernelBootStack PVOID *, kernelFaultStack PVOID *) {
	var address UINT_PTR
	address = (((processorStructures as! UINT_PTR) + (4096 - 1)) & ~((4096) - 1)) + 32768
	kernelBootStack[0] = address as! PVOID
	address += 32768
	kernelFaultStack[0] = address as! PVOID
	gdt[0] = address as! PVOID
	address += sizeOf<Unsigned long long>()
	processorBlock[0] = address as! PVOID
	address += sizeOf<Unsigned long long>()
	tss[0] = address as! PVOID
}

/// Initializes segment registers.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeSegments() {
	arLoadSegment(46, 16)
	arLoadSegment(62, 40 | 3)
	arLoadSegment(38, 40 | 3)
	arLoadSegment(100, 80 | 3)
	arLoadSegment(101, 40 | 3)
	arLoadSegment(54, 24)
}

/// Initializes the kernel's Task State Segment (TSS).
/// 
/// @param Tss
///        Supplies a pointer to the TSS to use.
/// 
/// @param Gdt
///        Supplies a pointer to the GDT to use.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpInitializeTss(processorBlock PKPROCESSOR_BLOCK, kernelBootStack PVOID, kernelFaultStack PVOID) {
	rtlZeroMemory(processorBlock.tssBase, sizeOf<Unsigned long long>())
	processorBlock.tssBase.ioMapBase = sizeOf<Unsigned long long>()
	processorBlock.tssBase.rsp0 = kernelBootStack as! ULONG_PTR
	processorBlock.tssBase.ist[1] = kernelFaultStack as! ULONG_PTR
	processorBlock.tssBase.ist[2] = kernelFaultStack as! ULONG_PTR
}

/// Fills in an AMD64 GDT entry.
/// 
/// @param Gdt
///        Supplies a pointer to the GDT.
/// 
/// @param Selector
///        Specifies a segment selector of the GDT entry.
/// 
/// @param Base
///        Specifies a base address value of the descriptor.
/// 
/// @param Limit
///        Specifies a descriptor limit.
/// 
/// @param Type
///        Specifies a type of the descriptor.
/// 
/// @param Dpl
///        Specifies the descriptor privilege level.
/// 
/// @param SegmentMode
///        Specifies a segment mode of the descriptor.
/// 
/// @return This routine does not return any value
/// 
/// @since XT 1.0
fun arpSetGdtEntry(gdt PKGDTENTRY, selector USHORT, base ULONG_PTR, limit ULONG, type UCHAR, dpl UCHAR, segmentMode UCHAR) {
	let gdtEntry = new ByValue<PKGDTENTRY>()

	var granularity UCHAR
	if limit < 1048576 {
		granularity = 0

	} else {
		granularity = 1
		limit >>= 12

	}

	gdtEntry = (gdt as! ULONG_PTR + (selector & ~3)) as! PKGDTENTRY
	gdtEntry.baseLow = (base & 65535)
	gdtEntry.bytes.baseMiddle = ((base >> 16) & 255)
	gdtEntry.bytes.baseHigh = ((base >> 24) & 255)
	gdtEntry.baseUpper = (base >> 32)
	gdtEntry.limitLow = (limit & 65535)
	gdtEntry.bits.limitHigh = ((limit >> 16) & 15)
	gdtEntry.bits.defaultBig = not not (segmentMode & 2)
	gdtEntry.bits.dpl = (dpl & 3)
	gdtEntry.bits.granularity = granularity
	gdtEntry.bits.longMode = !!(segmentMode & 1)
	gdtEntry.bits.present = (type != 0)
	gdtEntry.bits.system = 0
	gdtEntry.bits.type = (type & 31)
	gdtEntry.mustBeZero = 0
}

/// Fills in a call, interrupt, task or trap gate entry.
/// 
/// @param Idt
///        Supplies a pointer to IDT structure, where gate is located.
/// 
/// @param Vector
///        Supplies a gate vector pointing to the interrupt gate in the IDT
/// 
/// @param Handler
///        Supplies a pointer to the interrupt handler of the specified gate.
/// 
/// @param Selector
///        Supplies the code selector the gate should run in.
/// 
/// @param Ist
///        Supplies the interrupt stack table entry the gate should run in.
/// 
/// @param Access
///        Supplies the gate access rights.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun arpSetIdtGate(idt PKIDTENTRY, vector USHORT, handler PVOID, selector USHORT, ist USHORT, access USHORT) {
	idt[vector].offsetLow = (handler as! ULONG_PTR & 65535)
	idt[vector].offsetMiddle = ((handler as! ULONG_PTR >> 16) & 65535)
	idt[vector].offsetHigh = handler as! ULONG_PTR >> 32
	idt[vector].dpl = access
	idt[vector].istIndex = ist
	idt[vector].present = 1
	idt[vector].selector = selector
	idt[vector].type = 14
}
