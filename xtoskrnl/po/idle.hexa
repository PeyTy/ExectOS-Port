/// Initializes Processor Control Block's (PRCB) power state structures.
/// 
/// @param Prcb
///        Supplies a pointer to the PRCB being initialized.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun poInitializeProcessorControlBlock(prcb PKPROCESSOR_CONTROL_BLOCK) {
	rtlZeroMemory(prcb.powerState, sizeOf<Unsigned long long>())
	prcb.powerState.idle0TimeLimit = 4294967295
	prcb.powerState.currentThrottle = 100
	prcb.powerState.currentThrottleIndex = 0
	prcb.powerState.idleFunction = popIdle0Function
	keInitializeDpc(prcb.powerState.perfDpc, popPerfIdleDpc, prcb)
	keSetTargetProcessorDpc(prcb.powerState.perfDpc, prcb.cpuNumber)
	keInitializeTimer(prcb.powerState.perfTimer, synchronizationTimer)
}

/// Processor idle loop routine.
/// 
/// @param PowerState
///        Supplies a pointer to the structere containing current processor power state.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun popIdle0Function(powerState PPROCESSOR_POWER_STATE) {
}

/// Switches CPU between different performance levels.
/// 
/// @param PowerState
///        Supplies a pointer to the structure containing IDLE processor power state.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 5.1
fun popPerfIdle(powerState PPROCESSOR_POWER_STATE) {
}

/// Checks if CPU is running at the maximum (performance) frequency.
/// 
/// @param Dpc
///        Supplies a pointer to the DPC object.
/// 
/// @param DeferredContext
///        Supplies a pointer to memory area containing current CPU's PRCB.
/// 
/// @param SystemArgument1
///        Supplies a pointer to an unused system argument.
/// 
/// @param SystemArgument2
///        Supplies a pointer to an unused system argument.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 5.1
fun popPerfIdleDpc(dpc PKDPC, deferredContext PVOID, systemArgument1 PVOID, systemArgument2 PVOID) {
}
