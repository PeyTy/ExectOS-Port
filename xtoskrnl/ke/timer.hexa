/// Cancels the timer.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @return This routine returns TRUE if the cancelled timer was set, or FALSE otherwise.
/// 
/// @since NT 3.5
fun keCancelTimer(timer PKTIMER) {
	var result BOOLEAN
	var runLevel KRUNLEVEL
	result = fALSE
	runLevel = keRaiseRunLevel(12)
	keAcquireQueuedSpinLock(dispatcherLock)
	if timer.header.inserted {
		kepRemoveTimer(timer)
		result = tRUE

	}

	keReleaseQueuedSpinLock(dispatcherLock)
	kepExitDispatcher(runLevel)
	return result
}

/// Clears the signal state of the timer.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 4.0
fun keClearTimer(timer PKTIMER) {
	timer.header.signalState = 0
}

/// Reads the current signal state of the given timer.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @return This routine returns TRUE if the timer is set, or FALSE otherwise.
/// 
/// @since XT 1.0
fun keGetTimerState(timer PKTIMER) {
	return timer.header.signalState as! BOOLEAN
}

/// Initializes an extended kernel timer.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @param Type
///        Supplies the type of the timer.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keInitializeTimer(timer PKTIMER, type KTIMER_TYPE) {
	timer.header.type = timerNotificationObject + type
	timer.header.inserted = 0
	timer.header.signalState = 0
	timer.dueTime.quadPart = 0
	timer.period = 0
	rtlInitializeListHead(timer.header.waitListHead)
	rtlInitializeListHead(timer.timerListEntry)
}

/// Queries the timer's interrupt due time.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @return This routine returns the time remaining on the timer, or 0 if the timer is not set.
/// 
/// @since XT 1.0
fun keQueryTimer(timer PKTIMER) {
	var runLevel KRUNLEVEL
	var dueTime ULONGLONG
	dueTime = 0
	runLevel = keRaiseRunLevel(12)
	keAcquireQueuedSpinLock(dispatcherLock)
	if timer.header.inserted {
		dueTime = timer.dueTime.quadPart

	}

	keReleaseQueuedSpinLock(dispatcherLock)
	kepExitDispatcher(runLevel)
	return dueTime
}

/// Sets the supplied timer to expire at the specified time.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @param DueTime
///        Supplies the time at which the timer should expire (both absolute and relative times are supported).
/// 
/// @param Period
///        Supplies the timer period.
/// 
/// @param Dpc
///        Supplies a pointer to a Deferred Procedure Call (DPC) object.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keSetTimer(timer PKTIMER, dueTime LARGE_INTEGER, period LONG, dpc PKDPC) {
}

/// Removes a specified timer from the timer list.
/// 
/// @param Timer
///        Supplies a pointer to a timer object.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepRemoveTimer(timer PKTIMER) {
	timer.header.inserted = fALSE
	rtlRemoveEntryList(timer.timerListEntry)
}
