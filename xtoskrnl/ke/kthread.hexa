/// Initializes the thread.
/// 
/// @param Process
///        Supplies a pointer to the process that owns the thread.
/// 
/// @param Thread
///        Supplies a pointer to thread that will be initialized.
/// 
/// @param SystemRoutine
///        Supplies a pointer to the routine called during first scheduling.
/// 
/// @param StartRoutine
///        Supplies a pointer to the routine called during thread startup.
/// 
/// @param StartContext
///        Supplies a pointer to a context data that will be passed to start routine.
/// 
/// @param Context
///        Supplies a pointer to the context frame containing state of the user mode thread.
/// 
/// @param EnvironmentBlock
///        Supplies a pointer to the environment block of the thread.
/// 
/// @param Stack
///        Supplies a pointer to the stack of the thread.
/// 
/// @return This routine returns a status code.
/// 
/// @since NT 3.5
fun keInitializeThread(process PKPROCESS, thread PKTHREAD, systemRoutine PKSYSTEM_ROUTINE, startRoutine PKSTART_ROUTINE, startContext PVOID, context PCONTEXT, environmentBlock PVOID, stack PVOID, startThread BOOLEAN) {
	let timerWaitBlock = new ByValue<PKWAIT_BLOCK>()

	var allocation BOOLEAN
	var status XTSTATUS
	var index ULONG
	allocation = fALSE
	thread.header.type = threadObject
	thread.header.signalState = 0
	rtlInitializeListHead(thread.header.waitListHead)
	rtlInitializeListHead(thread.mutantListHead)
	index = 0
	while index <= 3 {
		thread.waitBlock[index].thread = thread
		index++
	}

	thread.autoAlignment = process.autoAlignment
	thread.stackResident = tRUE
	thread.stackSwap = tRUE
	thread.swapBusy = fALSE
	thread.adjustReason = adjustNone
	keInitializeSpinLock(thread.threadLock)
	thread.serviceTable = keServiceDescriptorTable
	thread.apcStatePointer[0] = thread.apcState
	thread.apcStatePointer[1] = thread.savedApcState
	thread.apcQueueable = tRUE
	thread.apcState.process = process
	thread.process = process
	rtlInitializeListHead(thread.apcState.apcListHead[kernelMode])
	rtlInitializeListHead(thread.apcState.apcListHead[userMode])
	keInitializeSpinLock(thread.apcQueueLock)
	keInitializeApc(thread.suspendApc, thread, originalApcEnvironment, kepSuspendNop, kepSuspendRundown, kepSuspendThread, kernelMode, (0 as! PVOID))
	keInitializeSemaphore(thread.suspendSemaphore, 0, 2)
	keInitializeTimer(thread.timer, notificationTimer)
	timerWaitBlock = thread.waitBlock[3]
	timerWaitBlock.object = thread.timer
	timerWaitBlock.waitKey = (258 as! XTSTATUS)
	timerWaitBlock.waitType = waitAny
	timerWaitBlock.waitListEntry.flink = (thread.timer).header.waitListHead
	timerWaitBlock.waitListEntry.blink = (thread.timer).header.waitListHead
	thread.environmentBlock = environmentBlock
	if !stack {
		status = mmAllocateKernelStack(stack, fALSE, 0)
		if status != (0 as! XTSTATUS) or !stack {
			return (3221225626 as! XTSTATUS)

		}

		allocation = tRUE

	}

	thread.initialStack = stack
	thread.stackBase = stack
	thread.stackLimit = stack - 32768
	@seh try {
		kepInitializeThreadContext(thread, systemRoutine, startRoutine, startContext, context)

	} catch seh EXCEPTION_EXECUTE_HANDLER {
				mmFreeKernelStack(stack, fALSE)
				thread.initialStack = (0 as! PVOID)
				thread.stackBase = (0 as! PVOID)

	}

	thread.state = initialized
	if startThread {
		keStartThread(thread)

	}

	return (0 as! XTSTATUS)
}

/// Starts the thread.
/// 
/// @param Thread
///        Supplies a pointer to the thread.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 5.1
fun keStartThread(thread PKTHREAD) {
	let process = new ByValue<PKPROCESS>()

	var runLevel KRUNLEVEL
	let lock = new ByValue<KLOCK_QUEUE_HANDLE>()

	var processorAffinity KAFFINITY
	var testAffinity KAFFINITY
	process = thread.apcState.process
	thread.disableBoost = process.disableBoost
	thread.iopl = thread.apcState.process.iopl
	thread.quantum = process.quantum
	thread.systemAffinityActive = fALSE
	keAcquireSpinLock(thread.apcState.process.processLock)
	runLevel = keRaiseRunLevel(12)
	thread.affinity = process.affinity
	thread.userAffinity = process.affinity
	thread.priority = process.basePriority
	thread.basePriority = process.basePriority
	process.threadSeed = 0
	thread.idealProcessor = process.threadSeed
	thread.userIdealProcessor = process.threadSeed
	rtlInsertTailList(process.threadListHead, thread.threadListEntry)
	if process.stackCount != 2147483647 {
		process.stackCount++
	}

	keReleaseSpinLock(thread.apcState.process.processLock)
	keLowerRunLevel(runLevel)
}

/// Exits the dispatcher, switches context to a new thread and lowers runlevel to its original state.
/// 
/// @param OldRunLevel
///        Supplies the original runlevel state.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepExitDispatcher(oldRunLevel KRUNLEVEL) {
	keLowerRunLevel(oldRunLevel)
}

/// Suspend APC-built thread NOP routine. It takes no actions.
/// 
/// @param Apc
///        Supplies a pointer to the APC object.
/// 
/// @param NormalRoutine
///        Supplies a pointer to the normal routine set during the APC initialization. Unused by this routine.
/// 
/// @param NormalContext
///        Supplies a pointer a context data set during the APC initialization. Unused by this routine.
/// 
/// @param SystemArgument1
///        Supplies a pointer to an unused system argument.
/// 
/// @param SystemArgument2
///        Supplies a pointer to an unused system argument.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepSuspendNop(apc PKAPC, normalRoutine PKNORMAL_ROUTINE *, normalContext PVOID *, systemArgument1 PVOID *, systemArgument2 PVOID *) {
}

/// Suspend APC-built thread rundown routine. It takes no actions.
/// 
/// @param Apc
///        Supplies a pointer to the APC object.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepSuspendRundown(apc PKAPC) {
}

/// Suspends thread execution by waiting on the thread's semaphore.
/// 
/// @param NormalContext
///        Supplies a pointer a context data set during the APC initialization. Unused by this routine.
/// 
/// @param SystemArgument1
///        Supplies a pointer to an unused system argument.
/// 
/// @param SystemArgument2
///        Supplies a pointer to an unused system argument.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepSuspendThread(normalContext PVOID, systemArgument1 PVOID, systemArgument2 PVOID) {
}
