/// Acquires a specified queued spinlock.
/// 
/// @param LockLevel
///        Supplies the queued spinlock level.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keAcquireQueuedSpinLock(lockLevel KSPIN_LOCK_QUEUE_LEVEL) {
	keAcquireSpinLock(keGetCurrentProcessorControlBlock().lockQueue[lockLevel].lock)
}

/// Acquires a kernel spin lock.
/// 
/// @param SpinLock
///        Supplies a pointer to the kernel spin lock.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keAcquireSpinLock(spinLock PKSPIN_LOCK) {
	while rtlAtomicBitTestAndSet(spinLock as! PLONG, 0) {
		while spinLock as! PKSPIN_LOCK[0] & 1 {
			arYieldProcessor()

		}


	}

	arReadWriteBarrier()
}

/// Initializes a kernel spinlock object.
/// 
/// @param SpinLock
///        Supplies a pointer to a kernel spin lock.
/// 
/// @return This routine does not return any value.
/// 
/// @since NT 3.5
fun keInitializeSpinLock(spinLock PKSPIN_LOCK) {
	spinLock[0] = 0
}

/// Releases a queued spinlock.
/// 
/// @param LockLevel
///        Supplies the queued spinlock level.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keReleaseQueuedSpinLock(lockLevel KSPIN_LOCK_QUEUE_LEVEL) {
	keReleaseSpinLock(keGetCurrentProcessorControlBlock().lockQueue[lockLevel].lock)
}

/// Releases a kernel spin lock.
/// 
/// @param SpinLock
///        Supplies a pointer to the kernel spin lock.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun keReleaseSpinLock(spinLock PKSPIN_LOCK) {
	rtlAtomicAnd32(spinLock as! PLONG, 0)
	arReadWriteBarrier()
}
