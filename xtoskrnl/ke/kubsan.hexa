/// Checks whether handled UBSAN error should be reported.
/// 
/// @param Location
///        Supplies a pointer to the UBSAN location descriptor.
/// 
/// @return This routine returns TRUE if UBSAN error should be reported, or FALSE otherwise.
/// 
/// @since XT 1.0
fun kepCheckUbsanReport(location PKUBSAN_SOURCE_LOCATION) {
	return !kepUbsanActiveFrame
}

/// Enters UBSAN frame and marks it as active.
/// 
/// @param Location
///        Supplies a pointer to the UBSAN location descriptor.
/// 
/// @param Reason
///        Supplies a pointer to the reason of the UBSAN failure.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepEnterUbsanFrame(location PKUBSAN_SOURCE_LOCATION, reason PCCHAR) {
	kepUbsanActiveFrame = tRUE
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
}

/// Gets signed value from UBSAN.
/// 
/// @param Type
///        Supplies a pointer to the UBSAN type descriptor.
/// 
/// @param Value
///        Supplies a pointer to the UBSAN value.
/// 
/// @return This routine returns a 64-bit signed integer.
/// 
/// @since XT 1.0
fun kepGetSignedUbsanValue(type PKUBSAN_TYPE_DESCRIPTOR, value PVOID) {
	var bitWidth ULONG
	var extraBits ULONG
	var longValue ULONG_PTR
	bitWidth = 1 << (type.typeInfo >> 1)
	if bitWidth <= sizeOf<Unsigned long long>() * 8 {
		extraBits = sizeOf<Unsigned long long>() * 8 - bitWidth
		longValue = value as! ULONG_PTR
		return (longValue as! LONGLONG) << extraBits >> extraBits

	}

	return value as! PLONGLONG[0]
}

/// Gets a string representation of the UBSAN type kind.
/// 
/// @param TypeCheckKind
///        Supplies a UBSAN type kind as a numeric value.
/// 
/// @return This routine returns a string representation of the UBSAN type.
/// 
/// @since XT 1.0
fun kepGetUbsanTypeKind(typeCheckKind UCHAR) {
	[unknown clang ast] CompoundStmt SwitchStmt
}

/// Gets unsigned value from UBSAN.
/// 
/// @param Type
///        Supplies a pointer to the UBSAN type descriptor.
/// 
/// @param Value
///        Supplies a pointer to the UBSAN value.
/// 
/// @return This routine returns a 64-bit unsigned integer.
/// 
/// @since XT 1.0
fun kepGetUnsignedUbsanValue(type PKUBSAN_TYPE_DESCRIPTOR, value PVOID) {
	var bitWidth ULONG
	bitWidth = 1 << (type.typeInfo >> 1)
	if bitWidth <= sizeOf<Unsigned long long>() * 8 {
		return value as! ULONG_PTR

	}

	return value as! PULONGLONG[0]
}

/// Handles the division overflow error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanDivisionOverflow(data PKUBSAN_OVERFLOW_DATA, lhs PVOID, rhs PVOID) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if (data.type.typeInfo & 1) and (kepGetSignedUbsanValue(data.type, rhs) == -1) {
		if keDbgPrint {
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr

		}

		[unknown clang ast] CompoundStmt NullStmt

	} else {
		if keDbgPrint {
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr

		}

		[unknown clang ast] CompoundStmt NullStmt

	}

	kepLeaveUbsanFrame()
}

/// Handles the float cast overflow error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN float cast overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanFloatCastOverflow(data PKUBSAN_FLOAT_CAST_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the function type mismatch error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN function type mismatch data.
/// 
/// @param Pointer
///        Supplies pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanFunctionTypeMismatch(data PKUBSAN_FUNCTION_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt CStyleCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the integer overflow error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanIntegerOverflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the invalid builtin error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN invalid builtin data.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanInvalidBuiltin(data PKUBSAN_INVALID_BUILTIN_DATA) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if data.kind == 0 or data.kind == 1 {
		if keDbgPrint {
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr

		}

		[unknown clang ast] CompoundStmt NullStmt

	} else {
		if keDbgPrint {
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr

		}

		[unknown clang ast] CompoundStmt NullStmt

	}

	kepLeaveUbsanFrame()
}

/// Handles the misaligned access error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanMisalignedAccess(data PKUBSAN_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		kepGetUbsanTypeKind(data.typeCheckKind)
		[unknown clang ast] CompoundStmt CStyleCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the negate overflow error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param OldValue
///        Supplies old value.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanNegateOverflow(data PKUBSAN_OVERFLOW_DATA, oldValue ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the NULL pointer dereference error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanNullPointerDereference(data PKUBSAN_TYPE_MISMATCH_DATA) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		kepGetUbsanTypeKind(data.typeCheckKind)
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the object size mismatch error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanObjectSizeMismatch(data PKUBSAN_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		kepGetUbsanTypeKind(data.typeCheckKind)
		[unknown clang ast] CompoundStmt CStyleCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the out of bounds error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN out of bounds data.
/// 
/// @param Index
///        Supplies an index operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanOutOfBounds(data PKUBSAN_OUT_OF_BOUNDS_DATA, index ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the pointer overflow error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanPointerOverflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	if keDbgPrint {
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ImplicitCastExpr
		[unknown clang ast] CompoundStmt ConditionalOperator
		[unknown clang ast] CompoundStmt CStyleCastExpr
		[unknown clang ast] CompoundStmt CStyleCastExpr

	}

	[unknown clang ast] CompoundStmt NullStmt
	kepLeaveUbsanFrame()
}

/// Handles the shift out of bounds error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN shift out of bounds data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanShiftOutOfBounds(data PKUBSAN_SHIFT_OUT_OF_BOUNDS_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	var lhsBitWidth ULONG
	if !kepCheckUbsanReport(data.location) {
		return ??

	}

	kepEnterUbsanFrame(data.location, [unknown clang ast] resolve StringLiteral)
	lhsBitWidth = 1 << (data.lhsType.typeInfo >> 1)
	if (data.rhsType.typeInfo & 1) and (kepGetSignedUbsanValue(data.rhsType, rhs as! PVOID) < 0) {
		if keDbgPrint {
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			[unknown clang ast] CompoundStmt ImplicitCastExpr
			kepGetSignedUbsanValue(data.rhsType, rhs as! PVOID)

		}

		[unknown clang ast] CompoundStmt NullStmt

	} else {
		[unknown clang ast] CompoundStmt CompoundStmt
		if kepGetUnsignedUbsanValue(data.rhsType, rhs as! PVOID) >= lhsBitWidth {
			if keDbgPrint {
				[unknown clang ast] CompoundStmt ImplicitCastExpr
				[unknown clang ast] CompoundStmt ImplicitCastExpr
				kepGetUnsignedUbsanValue(data.rhsType, rhs as! PVOID)
				[unknown clang ast] CompoundStmt ImplicitCastExpr
				[unknown clang ast] CompoundStmt ImplicitCastExpr

			}

			[unknown clang ast] CompoundStmt NullStmt

		} else {
			if keDbgPrint {
				[unknown clang ast] CompoundStmt ImplicitCastExpr
				[unknown clang ast] CompoundStmt ImplicitCastExpr
				kepGetSignedUbsanValue(data.lhsType, lhs as! PVOID)
				kepGetSignedUbsanValue(data.rhsType, rhs as! PVOID)
				[unknown clang ast] CompoundStmt ImplicitCastExpr

			}

			[unknown clang ast] CompoundStmt NullStmt

		}


	}

	kepLeaveUbsanFrame()
}

/// Handles the type mismatch error reported by UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepHandleUbsanTypeMismatch(data PKUBSAN_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	if !pointer {
		kepHandleUbsanNullPointerDereference(data)

	} else {
		[unknown clang ast] CompoundStmt CompoundStmt
		[unknown clang ast] CompoundStmt CompoundStmt

	}

}

/// Leaves the UBSAN frame by marking it as inactive.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepLeaveUbsanFrame() {
	kepUbsanActiveFrame = fALSE
}

/// Handles the addition overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_add_overflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanIntegerOverflow(data, lhs, rhs)
}

/// Handles the division overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_divrem_overflow(data PKUBSAN_OVERFLOW_DATA, lhs PVOID, rhs PVOID) {
	kepHandleUbsanDivisionOverflow(data, lhs, rhs)
}

/// Handles the float cast overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN float cast overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_float_cast_overflow(data PKUBSAN_FLOAT_CAST_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanFloatCastOverflow(data, lhs, rhs)
}

/// Handles the function type mismatch error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN function type mismatch data.
/// 
/// @param Pointer
///        Supplies pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_function_type_mismatch(data PKUBSAN_FUNCTION_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	kepHandleUbsanFunctionTypeMismatch(data, pointer)
}

/// Handles the invalid builtin error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN invalid builtin data.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_invalid_builtin(data PKUBSAN_INVALID_BUILTIN_DATA) {
	kepHandleUbsanInvalidBuiltin(data)
}

/// Handles the multiplication overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_mul_overflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanIntegerOverflow(data, lhs, rhs)
}

/// Handles the negate overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param OldValue
///        Supplies old value.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_negate_overflow(data PKUBSAN_OVERFLOW_DATA, oldValue ULONG_PTR) {
	kepHandleUbsanNegateOverflow(data, oldValue)
}

/// Handles the out of bounds error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN out of bounds data.
/// 
/// @param Index
///        Supplies an index operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_out_of_bounds(data PKUBSAN_OUT_OF_BOUNDS_DATA, index ULONG_PTR) {
	kepHandleUbsanOutOfBounds(data, index)
}

/// Handles the pointer overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_pointer_overflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanPointerOverflow(data, lhs, rhs)
}

/// Handles the shift out of bounds error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN shift out of bounds data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_shift_out_of_bounds(data PKUBSAN_SHIFT_OUT_OF_BOUNDS_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanShiftOutOfBounds(data, lhs, rhs)
}

/// Handles the subtraction overflow error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN overflow data.
/// 
/// @param Lhs
///        Supplies LHS operand.
/// 
/// @param Rhs
///        Supplies RHS operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_sub_overflow(data PKUBSAN_OVERFLOW_DATA, lhs ULONG_PTR, rhs ULONG_PTR) {
	kepHandleUbsanIntegerOverflow(data, lhs, rhs)
}

/// Handles the type mismatch error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_type_mismatch(data PKUBSAN_TYPE_MISMATCH_DATA, pointer ULONG_PTR) {
	kepHandleUbsanTypeMismatch(data, pointer)
}

/// Handles the type mismatch error. This is internal routine implementing ABI defined by CLANG UBSAN.
/// 
/// @param Data
///        Supplies a pointer to the UBSAN type mismatch data.
/// 
/// @param Pointer
///        Supplies a pointer operand.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
/// 
/// @see https://github.com/llvm/llvm-project/blob/release/18.x/clang/lib/CodeGen/CodeGenFunction.h#L113
fun __ubsan_handle_type_mismatch_v1(data PKUBSAN_TYPE_MISMATCH_DATA_V1, pointer ULONG_PTR) {
	let mismatchData = new ByValue<KUBSAN_TYPE_MISMATCH_DATA>()

	kepHandleUbsanTypeMismatch(mismatchData, pointer)
}
