/// Initializes CPU architecture dependent context of a thread.
/// 
/// @param Thread
///        Supplies a pointer to the thread being initialized.
/// 
/// @param SystemRoutine
///        Supplies a pointer to the routine called during first scheduling.
/// 
/// @param StartRoutine
///        Supplies a pointer to the routine called during thread startup.
/// 
/// @param StartContext
///        Supplies a pointer to a context data that will be passed to start routine.
/// 
/// @param ContextRecord
///        Supplies a pointer to a context record which stores the initial state of the user mode thread.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepInitializeThreadContext(thread PKTHREAD, systemRoutine PKSYSTEM_ROUTINE, startRoutine PKSTART_ROUTINE, startContext PVOID, contextRecord PCONTEXT) {
	let threadFrame = new ByValue<PKTHREAD_INIT_FRAME>()

	threadFrame = (thread.initialStack as! PKTHREAD_INIT_FRAME) - 1
	rtlZeroMemory(threadFrame.npxFrame, sizeOf<Unsigned long long>())
	if contextRecord {
		rtlZeroMemory(threadFrame.exceptionFrame, sizeOf<Unsigned long long>())
		rtlZeroMemory(threadFrame.trapFrame, sizeOf<Unsigned long long>())
		contextRecord.contextFlags &= ~(1048576 | 16) | (1048576 | 1)
		contextRecord.rsp = (contextRecord.rsp & ~15) - 40
		contextRecord.segCs = 48 | 3
		contextRecord.segSs = 40 | 3
		thread.previousMode = userMode
		thread.npxState = 1
		threadFrame.npxFrame.controlWord = 639
		threadFrame.npxFrame.tagWord = 65535
		threadFrame.trapFrame.dr6 = 0
		threadFrame.trapFrame.dr7 = 0
		threadFrame.trapFrame.mxCsr = 8064
		threadFrame.exceptionFrame.p1Home = startContext as! ULONG64
		threadFrame.exceptionFrame.p2Home = startRoutine as! ULONG64
		threadFrame.exceptionFrame.p3Home = systemRoutine as! ULONG64
		threadFrame.exceptionFrame.p4Home = systemRoutine as! ULONG64

	} else {
		thread.previousMode = kernelMode
		thread.npxState = 0
		threadFrame.startFrame.return = (0 as! PVOID) as! ULONG64

	}

	threadFrame.startFrame.p1Home = startContext as! ULONG64
	threadFrame.startFrame.p2Home = startRoutine as! ULONG64
	threadFrame.startFrame.p3Home = systemRoutine as! ULONG64
	threadFrame.startFrame.p4Home = systemRoutine as! ULONG64
	threadFrame.switchFrame.apcBypass = 1
	threadFrame.switchFrame.mxCsr = 8064
	threadFrame.switchFrame.rbp = threadFrame.trapFrame as! ULONG64
	thread.kernelStack = threadFrame.switchFrame
}
