// Hexa 2024 from clang 15.0.3
/// Initializes CPU architecture dependent context of a thread.
/// 
/// @param Thread
///        Supplies a pointer to the thread being initialized.
/// 
/// @param SystemRoutine
///        Supplies a pointer to the routine called during first scheduling.
/// 
/// @param StartRoutine
///        Supplies a pointer to the routine called during thread startup.
/// 
/// @param StartContext
///        Supplies a pointer to a context data that will be passed to start routine.
/// 
/// @param ContextRecord
///        Supplies a pointer to a context record which stores the initial state of the user mode thread.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepInitializeThreadContext(thread PKTHREAD, systemRoutine PKSYSTEM_ROUTINE, startRoutine PKSTART_ROUTINE, startContext PVOID, contextRecord PCONTEXT) {
	let threadFrame = new ByValue<PKTHREAD_INIT_FRAME>()

	threadFrame = (thread.InitialStack as! PKTHREAD_INIT_FRAME) - 1
	rtlZeroMemory(threadFrame.NpxFrame, ???? resolve UnaryExprOrTypeTraitExpr)
	if contextRecord {
		rtlZeroMemory(threadFrame.ExceptionFrame, ???? resolve UnaryExprOrTypeTraitExpr)
		rtlZeroMemory(threadFrame.TrapFrame, ???? resolve UnaryExprOrTypeTraitExpr)
		??? CompoundStmt CompoundAssignOperator
		contextRecord.Rsp = (contextRecord.Rsp & ~15) - 40
		contextRecord.SegCs = 48 | 3
		contextRecord.SegSs = 40 | 3
		thread.PreviousMode = userMode
		thread.NpxState = 1
		threadFrame.NpxFrame.ControlWord = 639
		threadFrame.NpxFrame.TagWord = 65535
		threadFrame.TrapFrame.Dr6 = 0
		threadFrame.TrapFrame.Dr7 = 0
		threadFrame.TrapFrame.MxCsr = 8064
		threadFrame.ExceptionFrame.P1Home = startContext as! ULONG64
		threadFrame.ExceptionFrame.P2Home = startRoutine as! ULONG64
		threadFrame.ExceptionFrame.P3Home = systemRoutine as! ULONG64
		threadFrame.ExceptionFrame.P4Home = systemRoutine as! ULONG64

	} else {
		thread.PreviousMode = kernelMode
		thread.NpxState = 0
		threadFrame.StartFrame.Return = (0 as! PVOID) as! ULONG64

	}

	threadFrame.StartFrame.P1Home = startContext as! ULONG64
	threadFrame.StartFrame.P2Home = startRoutine as! ULONG64
	threadFrame.StartFrame.P3Home = systemRoutine as! ULONG64
	threadFrame.StartFrame.P4Home = systemRoutine as! ULONG64
	threadFrame.SwitchFrame.ApcBypass = 1
	threadFrame.SwitchFrame.MxCsr = 8064
	threadFrame.SwitchFrame.Rbp = threadFrame.TrapFrame as! ULONG64
	thread.KernelStack = threadFrame.SwitchFrame
}
