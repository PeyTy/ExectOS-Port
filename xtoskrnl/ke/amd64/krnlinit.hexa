type RTL_IMAGE_TYPE

type PRTL_IMAGE_TYPE

// TODO: RecordDecl:_RTL_IMAGE_FORMAT_BMP_RTL_IMAGE_FORMAT_BMP

type RTL_IMAGE_FORMAT_BMP

type PRTL_IMAGE_FORMAT_BMP

// TODO: RecordDecl:_RTL_IMAGE_CONTEXT_RTL_IMAGE_CONTEXT

type RTL_IMAGE_CONTEXT

type PRTL_IMAGE_CONTEXT

fun rtlInitializeImageContext(buffer PUCHAR, imageContext PRTL_IMAGE_CONTEXT) {
}

/// This routine initializes XT kernel.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepInitializeKernel() {
	var status XTSTATUS
	status = hlInitializeSystem()
	if status != (0 as! XTSTATUS) {
		if keDbgPrint {

			keDbgPrint("Failed to initialize hardware layer subsystem!\n")
		}

		kePanic(0)

	}

	arSetInterruptFlag()
}

/// Performs architecture-specific initialization for the kernel executive.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepInitializeMachine() {
	hlIoPortOutByte(886, 0)
	hlIoPortOutByte(1014, 0)
	hlInitializeFrameBuffer()
	if keDbgPrint {

		keDbgPrint("Starting...\n")
	}

	hlInitializeProcessor()
}

/// This routine starts up the XT kernel. It is called after switching boot stack.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun kepStartKernel() {
	let prcb = new ByValue<PKPROCESSOR_CONTROL_BLOCK>()

	var pageDirectory ULONG_PTR[2]
	let currentProcess = new ByValue<PKPROCESS>()

	let currentThread = new ByValue<PKTHREAD>()

	prcb = keGetCurrentProcessorControlBlock()
	currentThread = keGetCurrentThread()
	currentProcess = currentThread.apcState.process
	poInitializeProcessorControlBlock(prcb)
	kepSaveProcessorState(prcb.processorState)
	keLowerRunLevel(1)
	kepInitializeKernel()
	rtlInitializeListHead(kepProcessListHead)
	pageDirectory[0] = 0
	pageDirectory[1] = 0
	keInitializeProcess(currentProcess, 0, 4294967295, pageDirectory, fALSE)
	currentProcess.quantum = 127
	keInitializeThread(currentProcess, currentThread, (0 as! Void *), (0 as! Void *), (0 as! Void *), (0 as! Void *), (0 as! Void *), arKernelBootStack, tRUE)
	currentThread.nextProcessor = prcb.cpuNumber
	currentThread.priority = 31
	currentThread.state = running
	currentThread.affinity = 1 as! ULONG_PTR << prcb.cpuNumber
	currentThread.waitRunLevel = 2
	currentProcess.activeProcessors |= 1 as! ULONG_PTR << prcb.cpuNumber
	if keDbgPrint {

		keDbgPrint("KepStartKernel() finished. Entering infinite loop.\n")
	}

	[unknown clang ast] CompoundStmt ForStmt
}

/// Switches to a new kernel boot stack.
/// 
/// @return This routine does not return any value
/// 
/// @since XT 1.0
fun kepSwitchBootStack(stack ULONG_PTR) {
	[unknown clang ast] CompoundStmt GCCAsmStmt
}
