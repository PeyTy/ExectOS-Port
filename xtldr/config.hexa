/// Returns a boolean value of the specified configuration key.
/// 
/// @param ConfigName
///        Specifies the configuration key to return its boolean representation.
/// 
/// @return This routine returns a boolean representation of the configuration value.
/// 
/// @since XT 1.0
fun blGetConfigBooleanValue(configName Const PWCHAR) {
	var value PWCHAR
	value = blGetConfigValue(configName)
	if rtlCompareWideStringInsensitive(value, "ENABLED", 0) == 0 or rtlCompareWideStringInsensitive(value, "ON", 0) == 0 or rtlCompareWideStringInsensitive(value, "TRUE", 0) == 0 or rtlCompareWideStringInsensitive(value, "YES", 0) == 0 {
		return tRUE

	}

	return fALSE
}

/// Returns a value of the specified configuration key.
/// 
/// @param ConfigName
///        Specifies the configuration key to return its value.
/// 
/// @return This routine returns a pointer to the configuration value, or NULL if key was not found.
/// 
/// @since XT 1.0
fun blGetConfigValue(configName Const PWCHAR) {
	let configEntry = new ByValue<PXTBL_CONFIG_ENTRY>()

	let configListEntry = new ByValue<PLIST_ENTRY>()

	var keyLength SIZE_T
	var valueLength SIZE_T
	var status EFI_STATUS
	var value PWCHAR
	keyLength = rtlWideStringLength(configName, 0)
	configListEntry = BlpConfig.Flink
	while configListEntry != blpConfig {
		configEntry = (((configListEntry) as! Char * - [unknown clang ast] resolve OffsetOfExpr) as! XTBL_CONFIG_ENTRY *)
		if rtlCompareWideStringInsensitive(configEntry.name, configName, keyLength) == 0 {
			valueLength = rtlWideStringLength(configEntry.value, 0)
			status = blAllocateMemoryPool((valueLength + 1) * sizeOf<Unsigned long long>(), value as! PVOID *)
			if status != (9223372036854775808 & 0) {
				blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
				return (0 as! PVOID)

			}

			rtlCopyMemory(value, configEntry.value, valueLength * sizeOf<Unsigned long long>())
			value[valueLength] = 0/* "\u0000" */
			return value

		}

		configListEntry = configListEntry.flink

	}

	return (0 as! PVOID)
}

/// Updates existing configuration value.
/// 
/// @param ConfigName
///        Specifies the configuration key to update.
/// 
/// @param ConfigValue
///        Specifies the new configuration value.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blSetConfigValue(configName Const PWCHAR, configValue Const PWCHAR) {
	let configEntry = new ByValue<PXTBL_CONFIG_ENTRY>()

	let configListEntry = new ByValue<PLIST_ENTRY>()

	var status EFI_STATUS
	var length SIZE_T
	length = rtlWideStringLength(configName, 0)
	configListEntry = BlpConfig.Flink
	while configListEntry != blpConfig {
		configEntry = (((configListEntry) as! Char * - [unknown clang ast] resolve OffsetOfExpr) as! XTBL_CONFIG_ENTRY *)
		if rtlCompareWideStringInsensitive(configEntry.name, configName, length) == 0 {
			length = rtlWideStringLength(configValue, 0)
			status = blFreeMemoryPool(configEntry.value)
			if status == (9223372036854775808 & 0) {
				status = blAllocateMemoryPool((length + 1) * sizeOf<Unsigned long long>(), configEntry.value as! PVOID *)

			}

			if status != (9223372036854775808 & 0) {
				return status

			}

			rtlCopyMemory(configEntry.value, configValue, length * sizeOf<Unsigned long long>())
			configEntry.value[length] = 0/* "\u0000" */
			return (9223372036854775808 & 0)

		}

		configListEntry = configListEntry.flink

	}

	return (9223372036854775808 | 14)
}

/// Loads and parses XTLDR configuration file.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blpLoadConfiguration() {
	let sectionListEntry = new ByValue<PLIST_ENTRY>()

	var status EFI_STATUS
	var configData PCHAR
	rtlInitializeListHead(blpConfigSections)
	status = blpReadConfigFile("\\EFI\\BOOT\\XTLDR\\", "XTLDR.INI", configData)
	if status != (9223372036854775808 & 0) {
		status = blpReadConfigFile("\\EFI\\BOOT\\XTLDR64\\", "XTLDR.INI", configData)

	}

	if status != (9223372036854775808 & 0) {
		blDebugPrint("Failed to load FS0:/EFI/BOOT/XTLDR/XTLDR.INI configuration file (Status Code: 0x%zX)\n", status)
		return status

	}

	status = blpParseConfigFile(configData, blpConfigSections)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("Failed to parse FS0:/EFI/BOOT/XTLDR/XTLDR.INI configuration file (Status Code: 0x%zX)\n", status)
		return status

	}

	sectionListEntry = BlpConfigSections.Flink
	while sectionListEntry != blpConfigSections {
		let section = new ByValue<PXTBL_CONFIG_SECTION>()

		if rtlCompareWideStringInsensitive(section.sectionName, "XTLDR", 5) == 0 {
			blpUpdateConfiguration(section.options)
			rtlRemoveEntryList(sectionListEntry)
			break
		}

		sectionListEntry = sectionListEntry.flink

	}

	blpMenuList = blpConfigSections
	return (9223372036854775808 & 0)
}

/// Parses command line arguments and updates global configuration.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpParseCommandLine() {
	let lIPGuid = new ByValue<EFI_GUID>()

	let loadedImage = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	var argument PWCHAR
	var key PWCHAR
	var lastArg PWCHAR
	var value PWCHAR
	let option = new ByValue<PXTBL_CONFIG_ENTRY>()

	var status EFI_STATUS
	var keyLength SIZE_T
	var valueLength SIZE_T
	let config = new ByValue<LIST_ENTRY>()

	rtlInitializeListHead(config)
	status = efiSystemTable.bootServices.handleProtocol(efiImageHandle, lIPGuid, loadedImage as! PVOID *)
	if status == (9223372036854775808 & 0) {
		if loadedImage and loadedImage.loadOptions {
			argument = rtlTokenizeWideString(loadedImage.loadOptions, " ", lastArg)
			while argument != (0 as! PVOID) {
				key = argument
				while argument[0] != 61/* "=" */ and argument[0] != 0/* "\u0000" */ and argument[0] != 10/* "\n" */ {
					argument++
				}

				argument[0] = 0/* "\u0000" */
				argument++				value = argument
				while argument[0] != 0/* "\u0000" */ and argument[0] != 10/* "\n" */ {
					argument++
				}

				argument[0] = 0/* "\u0000" */
				argument++				keyLength = rtlWideStringLength(key, 0)
				valueLength = rtlWideStringLength(value, 0)
				if keyLength == 0 or valueLength == 0 {
					continue
				}

				status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), option as! PVOID *)
				if status == (9223372036854775808 & 0) {
					status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (keyLength + 1), option.name as! PVOID *)
					if status == (9223372036854775808 & 0) {
						status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (valueLength + 1), option.value as! PVOID *)

					}


				}

				if status != (9223372036854775808 & 0) {
					return status

				}

				rtlCopyMemory(option.name, key, (keyLength * sizeOf<Unsigned long long>()))
				rtlCopyMemory(option.value, value, (valueLength * sizeOf<Unsigned long long>()))
				option.name[keyLength] = 0/* "\u0000" */
				option.value[valueLength] = 0/* "\u0000" */
				rtlInsertTailList(config, option.flink)
				argument = rtlTokenizeWideString((0 as! PVOID), " ", lastArg)

			}

			blpUpdateConfiguration(config)

		}


	}

	return (9223372036854775808 & 0)
}

/// Parses configuration INI file.
/// 
/// @param RawConfig
///        Suplies a pointer to configuration INI file to be parsed.
/// 
/// @param Configuration
///        Supplies a pointer to memory region where parsed configuration will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpParseConfigFile(rawConfig Const PCHAR, configuration PLIST_ENTRY) {
	var sectionLength SIZE_T
	var keyLength SIZE_T
	var valueLength SIZE_T
	var inputData PCHAR
	var key PCHAR
	var sectionName PCHAR
	var value PCHAR
	let section = new ByValue<PXTBL_CONFIG_SECTION>()

	let option = new ByValue<PXTBL_CONFIG_ENTRY>()

	var status EFI_STATUS
	inputData = rawConfig
	section = (0 as! PVOID)
	option = (0 as! PVOID)
	sectionName = (0 as! PVOID)
	key = (0 as! PVOID)
	value = (0 as! PVOID)
	while inputData[0] != 0/* "\u0000" */ {
		if inputData[0] == 59/* ";" */ or inputData[0] == 35/* "#" */ {
			while inputData[0] != 0/* "\u0000" */ and inputData[0] != 10/* "\n" */ {
				inputData++
			}


		} else {
			[unknown clang ast] CompoundStmt CompoundStmt
			if inputData[0] == 91/* "[" */ {
				inputData++				sectionName = inputData
				while inputData[0] != 93/* "]" */ and inputData[0] != 0/* "\u0000" */ and inputData[0] != 10/* "\n" */ {
					inputData++
				}

				if inputData[0] != 93/* "]" */ {
					return (9223372036854775808 | 2)

				}

				inputData[0] = 0/* "\u0000" */
				inputData++				sectionName = rtlTrimString(sectionName)
				sectionLength = rtlStringLength(sectionName, 0)
				status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), section as! PVOID *)
				if status == (9223372036854775808 & 0) {
					status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (sectionLength + 1), section.sectionName as! PVOID *)

				}

				if status != (9223372036854775808 & 0) {
					return status

				}

				rtlInitializeListHead(section.options)
				rtlStringToWideString(section.sectionName, sectionName, sectionLength)
				section.sectionName[sectionLength] = 0/* "\u0000" */
				rtlInsertTailList(configuration, section.flink)

			} else {
				key = inputData
				while inputData[0] != 61/* "=" */ and inputData[0] != 0/* "\u0000" */ and inputData[0] != 10/* "\n" */ {
					inputData++
				}

				if inputData[0] != 61/* "=" */ {
					return (9223372036854775808 | 2)

				}

				inputData[0] = 0
				inputData++				while inputData[0] == 32/* " " */ {
					inputData++
				}

				value = inputData
				while inputData[0] != 0/* "\u0000" */ and inputData[0] != 10/* "\n" */ {
					inputData++
				}

				inputData[0] = 0
				inputData++				key = rtlTrimString(key)
				value = rtlTrimString(value)
				keyLength = rtlStringLength(key, 0)
				valueLength = rtlStringLength(value, 0)
				status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), option as! PVOID *)
				if status == (9223372036854775808 & 0) {
					status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (keyLength + 1), option.name as! PVOID *)
					if status == (9223372036854775808 & 0) {
						status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (valueLength + 1), option.value as! PVOID *)

					}


				}

				if status != (9223372036854775808 & 0) {
					return status

				}

				if value[0] == 34/* "\"" */ or value[0] == 39/* "'" */ {
					value++
				}

				if value[valueLength - 2] == 34/* "\"" */ or value[valueLength - 2] == 39/* "'" */ {
					value[valueLength - 2] = 0/* "\u0000" */

				}

				rtlStringToWideString(option.name, key, rtlStringLength(key, 0) + 1)
				rtlStringToWideString(option.value, value, rtlStringLength(value, 0) + 1)
				option.name[keyLength] = 0/* "\u0000" */
				option.value[valueLength] = 0/* "\u0000" */
				rtlInsertTailList(section.options, option.flink)

			}


		}


	}

	return (9223372036854775808 & 0)
}

/// Loads configuration file from the specified directory on the FS0:/ drive.
/// 
/// @param ConfigDirectory
///        Specifies a path to the directory containing the configuration file.
/// 
/// @param ConfigFile
///        Specifies the name of the configuration file.
/// 
/// @param ConfigData
///        Provides a buffer to store the data read from the configuration file.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blpReadConfigFile(configDirectory Const PWCHAR, configFile Const PWCHAR, configData PCHAR *) {
	let dirHandle = new ByValue<PEFI_FILE_HANDLE>()

	let fsHandle = new ByValue<PEFI_FILE_HANDLE>()

	var diskHandle EFI_HANDLE
	var status EFI_STATUS
	var fileSize SIZE_T
	status = blOpenVolume((0 as! PVOID), diskHandle, fsHandle)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = fsHandle.open(fsHandle, dirHandle, configDirectory, 1, 0)
	fsHandle.close(fsHandle)
	if status != (9223372036854775808 & 0) {
		blCloseVolume(diskHandle)
		return status

	}

	status = blReadFile(dirHandle, configFile, configData as! PVOID *, fileSize)
	dirHandle.close(dirHandle)
	blCloseVolume(diskHandle)
	return status
}

/// Adds new XTLDR configuration entries to the global configuration list. Existing entries are not overwritten.
/// 
/// @param NewConfig
///        Supplies a pointer to a linked list containing new configuration entries.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpUpdateConfiguration(newConfig PLIST_ENTRY) {
	let configEntry = new ByValue<PXTBL_CONFIG_ENTRY>()

	let configListEntry = new ByValue<PLIST_ENTRY>()

	let nextListEntry = new ByValue<PLIST_ENTRY>()

	configListEntry = newConfig.flink
	while configListEntry != newConfig {
		configEntry = (((configListEntry) as! Char * - [unknown clang ast] resolve OffsetOfExpr) as! XTBL_CONFIG_ENTRY *)
		nextListEntry = configListEntry.flink
		if blGetConfigValue(configEntry.name) == (0 as! PVOID) {
			rtlRemoveEntryList(configEntry.flink)
			rtlInsertTailList(blpConfig, configEntry.flink)

		}

		configListEntry = nextListEntry

	}

}
