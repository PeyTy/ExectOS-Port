// Hexa 2024 from clang 15.0.3
/// Reboots into UEFI firmware setup interface.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blEnterFirmwareSetup() {
	let guid = new ByValue<EFI_GUID>()

	var setupSupport PULONGLONG
	var indications ULONGLONG
	var status EFI_STATUS
	status = blGetEfiVariable(guid, "OsIndicationsSupported", setupSupport as! PVOID *)
	if status != (9223372036854775808 & 0) or !(*setupSupport & 1) {
		blDebugPrint("WARNING: Reboot into firmware setup interface not supported\n")
		return (9223372036854775808 | 3)

	}

	indications = 0
	status = blGetEfiVariable(guid, "OsIndications", indications as! PVOID)
	??? CompoundStmt CompoundAssignOperator
	status = blSetEfiVariable(guid, "OsIndications", indications as! PVOID, ???? resolve UnaryExprOrTypeTraitExpr)
	if status != (9223372036854775808 & 0) {
		return status

	}

	blRebootSystem()
	return (9223372036854775808 & 0)
}

/// Exits EFI boot services.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blExitBootServices() {
	let memoryMap = new ByValue<PEFI_MEMORY_MAP>()

	var status EFI_STATUS
	var counter ULONG
	BlpStatus.BootServices = fALSE
	status = blAllocateMemoryPool(???? resolve UnaryExprOrTypeTraitExpr, memoryMap as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return status

	}

	rtlZeroMemory(memoryMap, ???? resolve UnaryExprOrTypeTraitExpr)
	counter = 255
	while counter > 0 {
		status = blGetMemoryMap(memoryMap)
		if status != (9223372036854775808 & 0) {
			return status

		}

		status = efiSystemTable.BootServices.ExitBootServices(efiImageHandle, memoryMap.MapKey)
		if status == (9223372036854775808 & 0) {
			??? CompoundStmt BreakStmt

		}

		??? CompoundStmt UnaryOperator

	}

	return status
}

/// Gets the address of a reqested system configuration table.
/// 
/// @param TableGuid
///        Supplies a GUID of the configuration table.
/// 
/// @param Table
///        Supplies a pointer to the memory area where the table address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blGetConfigurationTable(tableGuid PEFI_GUID, table PVOID *) {
	var index SIZE_T
	??? CompoundStmt ForStmt
	*table = (0 as! PVOID)
	return (9223372036854775808 | 14)
}

/// Gets the value of the EFI variable.
/// 
/// @param Vendor
///        Supplies a pointer to the unique vendor GUID.
/// 
/// @param VariableName
///        Supplies a pointer to tge NULL-terminated string containing the variable name.
/// 
/// @param VariableValue
///        Supplies a pointer to the buffer, where the variable value will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blGetEfiVariable(vendor PEFI_GUID, variableName PWCHAR, variableValue PVOID *) {
	var status EFI_STATUS
	var buffer PVOID
	var size UINT_PTR
	size = 1024 * ???? resolve UnaryExprOrTypeTraitExpr
	status = blAllocateMemoryPool(size, buffer as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = efiSystemTable.RuntimeServices.GetVariable(variableName, vendor, (0 as! PVOID), size, buffer)
	if status != (9223372036854775808 & 0) {
		return status

	}

	*variableValue = buffer
	return (9223372036854775808 & 0)
}

/// Returns a random value based on the initialized RNG buffer.
/// 
/// @param RNGBuffer
///        Supplies a pointer to the RNG buffer.
/// 
/// @return This routine returns a random value.
/// 
/// @since XT 1.0
/// 
/// @see https://en.wikipedia.org/wiki/Xorshift
fun blGetRandomValue(rNGBuffer PULONGLONG) {
	??? CompoundStmt CompoundAssignOperator
	??? CompoundStmt CompoundAssignOperator
	??? CompoundStmt CompoundAssignOperator
	return *rNGBuffer * 2685821657736338717
}

/// Checks whether SecureBoot is enabled or not.
/// 
/// @return Numeric representation of SecureBoot status (0 = Disabled, >0 = Enabled, <0 SetupMode).
/// 
/// @since XT 1.0
fun blGetSecureBootStatus() {
	let varGuid = new ByValue<EFI_GUID>()

	var secureBootStatus INT_PTR = 0
	var varValue UCHAR = 0
	var size UINT_PTR
	size = ???? resolve UnaryExprOrTypeTraitExpr
	if efiSystemTable.RuntimeServices.GetVariable("SecureBoot", varGuid, (0 as! PVOID), size, varValue) == (9223372036854775808 & 0) {
		secureBootStatus = varValue as! INT_PTR
		if (efiSystemTable.RuntimeServices.GetVariable("SetupMode", varGuid, (0 as! PVOID), size, varValue) == (9223372036854775808 & 0)) and varValue != 0 {
			secureBootStatus = -1

		}


	}

	return secureBootStatus
}

/// Initializes the RNG buffer with random bytes from the default EFI RNG algorithm.
/// 
/// @param RNGBuffer
///        Supplies a pointer to the RNG buffer.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blInitializeEntropy(rNGBuffer PULONGLONG) {
	let rngGuid = new ByValue<EFI_GUID>()

	let rng = new ByValue<PEFI_RNG_PROTOCOL>()

	var status EFI_STATUS
	var seed ULONGLONG
	rng = (0 as! PVOID)
	seed = 0
	status = efiSystemTable.BootServices.LocateProtocol(rngGuid, (0 as! PVOID), rng as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = rng.GetRNG(rng, (0 as! PVOID), 8, seed as! PUCHAR)
	if status != (9223372036854775808 & 0) {
		return status

	}

	*rNGBuffer = ???? resolve ConditionalOperator
	return (9223372036854775808 & 0)
}

/// Loads an EFI image into memory.
/// 
/// @param DevicePath
///        Specifies a device path from which the image is loaded.
/// 
/// @param ImageData
///        Supplies a pointer to the memory are containing a copy of the EFI image.
/// 
/// @param ImageSize
///        Supplies the size (in bytes) of the EFI image.
/// 
/// @param ImageHandle
///        Supplies a pointer to the memory area, where an EFI_image handle will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blLoadEfiImage(devicePath PEFI_DEVICE_PATH_PROTOCOL, imageData PVOID, imageSize SIZE_T, imageHandle PEFI_HANDLE) {
	return efiSystemTable.BootServices.LoadImage(fALSE, efiImageHandle, devicePath, imageData, imageSize, imageHandle)
}

/// Reboots the machine.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blRebootSystem() {
	return efiSystemTable.RuntimeServices.ResetSystem(efiResetCold, (9223372036854775808 & 0), 0, (0 as! PVOID))
}

/// Sets a value of an EFI variable.
/// 
/// @param Vendor
///        Supplies a pointer to the unique vendor GUID.
/// 
/// @param VariableName
///        Supplies a pointer to tge NULL-terminated string containing the variable name.
/// 
/// @param VariableValue
///        Supplies the contents of the variable.
/// 
/// @param Size
///        Supplies the size of the variable data buffer.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blSetEfiVariable(vendor PEFI_GUID, variableName PWCHAR, variableValue PVOID, size UINT_PTR) {
	var attributes ULONG
	attributes = 1 | 2 | 4
	return efiSystemTable.RuntimeServices.SetVariable(variableName, vendor, attributes, size, variableValue)
}

/// Shuts down the machine.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blShutdownSystem() {
	return efiSystemTable.RuntimeServices.ResetSystem(efiResetShutdown, (9223372036854775808 & 0), 0, (0 as! PVOID))
}

/// Puts the system to sleep for the specified number of milliseconds.
/// 
/// @param Milliseconds
///        Supplies the number of milliseconds to sleep.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blSleepExecution(milliseconds ULONG_PTR) {
	efiSystemTable.BootServices.Stall(milliseconds * 1000)
}

/// Executes a loaded EFI image entry point.
/// 
/// @param ImageHandle
///        Provides a handle of loaded image, that will be started.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blStartEfiImage(imageHandle EFI_HANDLE) {
	return efiSystemTable.BootServices.StartImage(imageHandle, (0 as! PVOID), (0 as! PVOID))
}

/// Waits for one or more EFI events.
/// 
/// @param NumberOfEvents
///        Supplies the number of events to wait for.
/// 
/// @param Event
///        Supplies the array of events to wait for.
/// 
/// @param Index
///        Receives the index of the event that was signaled.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blWaitForEfiEvent(numberOfEvents UINT_PTR, event PEFI_EVENT, index PUINT_PTR) {
	return efiSystemTable.BootServices.WaitForEvent(numberOfEvents, event, index)
}
