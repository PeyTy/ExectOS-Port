/// Initializes EFI Boot Loader (XTLDR).
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blInitializeBootLoader() {
	let lipGuid = new ByValue<EFI_GUID>()

	let loadedImage = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	var handle EFI_HANDLE
	var status EFI_STATUS
	BlpStatus.bootServices = tRUE
	blInitializeConsole()
	blConsolePrint("XTLDR boot loader v%s\n", "0.1-devel")
	rtlInitializeListHead(blpBootProtocols)
	rtlInitializeListHead(blpConfig)
	rtlInitializeListHead(blpLoadedModules)
	BlpStatus.secureBoot = blGetSecureBootStatus()
	status = blOpenProtocol(handle, loadedImage as! PVOID *, lipGuid)
	if status == (9223372036854775808 & 0) {
		BlpStatus.loaderBase = loadedImage.imageBase
		BlpStatus.loaderSize = loadedImage.imageSize
		if 1 {
			blConsolePrint("\n---------- BOOTLOADER DEBUG ----------\nPointer Size      : %d\nImage Base Address: %P\nImage Base Size   : 0x%lX\nImage Revision    : 0x%lX\n--------------------------------------\n", sizeOf<Unsigned long long>(), loadedImage.imageBase, loadedImage.imageSize, loadedImage.revision)
			blSleepExecution(3000)

		}

		blCloseProtocol(handle, lipGuid)

	}

}

/// Initializes a list of operating systems for XTLDR boot menu.
/// 
/// @param MenuEntries
///        Supplies a pointer to memory area where operating systems list will be stored.
/// 
/// @param EntriesCount
///        Supplies a pointer to memory area where number of menu entries will be stored.
/// 
/// @param DefaultId
///        Supplies a pointer to memory area where ID of default menu entry will be stored.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blInitializeBootMenuList(menuEntries PXTBL_BOOTMENU_ITEM *, entriesCount PULONG, defaultId PULONG) {
	let vendorGuid = new ByValue<EFI_GUID>()

	var defaultMenuEntry PWCHAR
	var lastBooted PWCHAR
	var menuEntryName PWCHAR
	let menuEntrySectionList = new ByValue<PLIST_ENTRY>()

	let menuEntryList = new ByValue<PLIST_ENTRY>()

	let menuEntrySection = new ByValue<PXTBL_CONFIG_SECTION>()

	let menuEntryOption = new ByValue<PXTBL_CONFIG_ENTRY>()

	var defaultOS ULONG
	var numberOfEntries ULONG
	let osList = new ByValue<PXTBL_BOOTMENU_ITEM>()

	var status EFI_STATUS
	defaultOS = 0
	numberOfEntries = 0
	defaultMenuEntry = blGetConfigValue("DEFAULT")
	if blGetConfigBooleanValue("KEEPLASTBOOT") {
		status = blGetEfiVariable(vendorGuid, "XtLdrLastBootOS", lastBooted as! PVOID *)
		if status == (9223372036854775808 & 0) {
			defaultMenuEntry = lastBooted

		}


	}

	menuEntrySectionList = blpMenuList.flink
	while menuEntrySectionList != blpMenuList {
		numberOfEntries++		menuEntrySectionList = menuEntrySectionList.flink

	}

	status = blAllocateMemoryPool(numberOfEntries * sizeOf<Unsigned long long>(), osList as! PVOID *)
	if status != (9223372036854775808 & 0) or not osList {
		return (9223372036854775808 | 9)

	}

	numberOfEntries = 0
	menuEntrySectionList = blpMenuList.flink
	while menuEntrySectionList != blpMenuList {
		menuEntryName = (0 as! PVOID)
		menuEntrySection = (((menuEntrySectionList) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_CONFIG_SECTION *)
		if rtlCompareWideStringInsensitive(menuEntrySection.sectionName, defaultMenuEntry, 0) == 0 {
			defaultOS = numberOfEntries

		}

		menuEntryList = menuEntrySection.options.flink
		while menuEntryList != menuEntrySection.options {
			menuEntryOption = (((menuEntryList) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_CONFIG_ENTRY *)
			if rtlCompareWideStringInsensitive(menuEntryOption.name, "SYSTEMNAME", 0) == 0 {
				menuEntryName = menuEntryOption.value

			}

			menuEntryList = menuEntryList.flink

		}

		osList[numberOfEntries].entryName = menuEntryName
		osList[numberOfEntries].shortName = menuEntrySection.sectionName
		osList[numberOfEntries].options = menuEntrySection.options
		menuEntrySectionList = menuEntrySectionList.flink
		numberOfEntries++
	}

	defaultId[0] = defaultOS
	entriesCount[0] = numberOfEntries
	menuEntries[0] = osList
	return (9223372036854775808 & 0)
}

/// Loads all necessary modules and invokes boot protocol.
/// 
/// @param ShortName
///        Supplies a pointer to a short name of the chosen boot menu entry.
/// 
/// @param OptionsList
///        Supplies a pointer to list of options associated with chosen boot menu entry.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blInvokeBootProtocol(shortName PWCHAR, optionsList PLIST_ENTRY) {
	let vendorGuid = new ByValue<EFI_GUID>()

	let bootParameters = new ByValue<XTBL_BOOT_PARAMETERS>()

	let bootProtocol = new ByValue<PXTBL_BOOT_PROTOCOL>()

	let optionsListEntry = new ByValue<PLIST_ENTRY>()

	let option = new ByValue<PXTBL_CONFIG_ENTRY>()

	let bootProtocolGuid = new ByValue<EFI_GUID>()

	var moduleListLength SIZE_T
	var modulesList PWCHAR
	var handle EFI_HANDLE
	var status EFI_STATUS
	rtlZeroMemory(bootParameters, sizeOf<Unsigned long long>())
	modulesList = (0 as! PVOID)
	optionsListEntry = optionsList.flink
	while optionsListEntry != optionsList {
		option = (((optionsListEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_CONFIG_ENTRY *)
		if rtlCompareWideStringInsensitive(option.name, "BOOTMODULES", 0) == 0 {
			moduleListLength = rtlWideStringLength(option.value, 0)
			status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (moduleListLength + 1), modulesList as! PVOID *)
			if status != (9223372036854775808 & 0) {
				blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
				return (9223372036854775808 | 9)

			}

			rtlCopyMemory(modulesList, option.value, sizeOf<Unsigned long long>() * (moduleListLength + 1))

		} else {
			if rtlCompareWideStringInsensitive(option.name, "SYSTEMTYPE", 0) == 0 {
				BootParameters.systemType = option.value

			} else {
				if rtlCompareWideStringInsensitive(option.name, "SYSTEMPATH", 0) == 0 {
					status = blGetVolumeDevicePath(option.value, BootParameters.devicePath, BootParameters.arcName, BootParameters.systemPath)
					if status != (9223372036854775808 & 0) {
						blDebugPrint("ERROR: Failed to find volume device path (Status Code: 0x%zX)\n", status)
						return status

					}

					status = blGetEfiPath(BootParameters.systemPath, BootParameters.efiPath)
					if status != (9223372036854775808 & 0) {
						blDebugPrint("ERROR: Failed to get EFI path (Status Code: 0x%zX)\n", status)
						return status

					}


				} else {
					if rtlCompareWideStringInsensitive(option.name, "KERNELFILE", 0) == 0 {
						BootParameters.kernelFile = option.value

					} else {
						if rtlCompareWideStringInsensitive(option.name, "INITRDFILE", 0) == 0 {
							BootParameters.initrdFile = option.value

						} else {
							if rtlCompareWideStringInsensitive(option.name, "HALFILE", 0) == 0 {
								BootParameters.halFile = option.value

							} else {
								if rtlCompareWideStringInsensitive(option.name, "PARAMETERS", 0) == 0 {
									BootParameters.parameters = option.value

								}


							}


						}


					}


				}


			}


		}

		optionsListEntry = optionsListEntry.flink

	}

	status = blLoadModules(modulesList)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to load XTLDR modules (Status Code: 0x%zX)\n", status)
		return (9223372036854775808 | 6)

	}

	status = blFindBootProtocol(BootParameters.systemType, bootProtocolGuid)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Unable to find appropriate boot protocol (Status Code: 0x%zX)\n", status)
		return (9223372036854775808 | 3)

	}

	status = blOpenProtocol(handle, bootProtocol as! PVOID *, bootProtocolGuid)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to open boot protocol (Status Code: 0x%zX)\n", status)
		return status

	}

	if blGetConfigBooleanValue("KEEPLASTBOOT") {
		status = blSetEfiVariable(vendorGuid, "XtLdrLastBootOS", shortName as! PVOID, rtlWideStringLength(shortName, 0) * sizeOf<Unsigned long long>())
		if status != (9223372036854775808 & 0) {
			blDebugPrint("WARNING: Failed to save chosen Operating System in NVRAM (Status Code: 0x%zX)\n", status)

		}


	}

	return bootProtocol.bootSystem(bootParameters)
}

/// This routine is the entry point of the XT EFI boot loader.
/// 
/// @param ImageHandle
///        Firmware-allocated handle that identifies the image.
/// 
/// @param SystemTable
///        Provides the EFI system table.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blStartXtLoader(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	var status EFI_STATUS
	efiImageHandle = imageHandle
	efiSystemTable = systemTable
	blInitializeBootLoader()
	status = blpParseCommandLine()
	if status != (9223372036854775808 & 0) {
		blDisplayErrorDialog("XTLDR", "Failed to parse command line parameters.")

	}

	if 1 {
		status = blpInitializeDebugConsole()
		if status != (9223372036854775808 & 0) {
			blDisplayErrorDialog("XTLDR", "Failed to initialize debug console.")

		}


	}

	status = blpLoadConfiguration()
	if status != (9223372036854775808 & 0) {
		blDisplayErrorDialog("XTLDR", "Failed to load and parse configuration file ")

	}

	if 1 {
		status = blpInitializeDebugConsole()
		if status != (9223372036854775808 & 0) {
			blDisplayErrorDialog("XTLDR", "Failed to initialize debug console.")

		}


	}

	status = efiSystemTable.bootServices.setWatchdogTimer(0, 65536, 0, (0 as! PVOID))
	if status != (9223372036854775808 & 0) {
		blDebugPrint("WARNING: Failed to disable watchdog timer (Status Code: 0x%zX)\n", status)

	}

	status = blpInstallXtLoaderProtocol()
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to register XTLDR loader protocol (Status Code: 0x%zX)\n", status)
		return status

	}

	status = blLoadModules(blGetConfigValue("MODULES"))
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to load XTLDR modules (Status Code: 0x%zX)\n", status)
		blDisplayErrorDialog("XTLDR", "Failed to load some XTLDR modules.")

	}

	status = blEnumerateBlockDevices()
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to discover and enumerate block devices (Status Code: 0x%zX)\n", status)
		return status

	}

	while tRUE {
		if BlpStatus.bootMenu != (0 as! PVOID) {
			BlpStatus.bootMenu()

		} else {
			blDisplayBootMenu()

		}

		blStartLoaderShell()

	}

	return (9223372036854775808 | 1)
}
