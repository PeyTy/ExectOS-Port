/// This routine closes an EFI volume handle.
/// 
/// @param VolumeHandle
///        Specifies a handle of opened volume.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blCloseVolume(volumeHandle PEFI_HANDLE) {
	let lIPGuid = new ByValue<EFI_GUID>()

	if volumeHandle != (0 as! PVOID) {
		return efiSystemTable.bootServices.closeProtocol(volumeHandle, lIPGuid, efiImageHandle, (0 as! PVOID))

	}

	return (9223372036854775808 & 0)
}

/// Discovers and enumerates a block devices available to EFI system.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blEnumerateBlockDevices() {
	let lastNode = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let parentNode = new ByValue<PEFI_BLOCK_DEVICE_DATA>()

	let blockDeviceData = new ByValue<PEFI_BLOCK_DEVICE_DATA>()

	let blockDevice = new ByValue<PEFI_BLOCK_DEVICE>()

	let blockDevices = new ByValue<LIST_ENTRY>()

	let listEntry = new ByValue<PLIST_ENTRY>()

	var status EFI_STATUS
	let acpiDevice = new ByValue<PEFI_ACPI_HID_DEVICE_PATH>()

	let hDPath = new ByValue<PEFI_HARDDRIVE_DEVICE_PATH>()

	let media = new ByValue<PEFI_BLOCK_IO_MEDIA>()

	let partitionGuid = new ByValue<PEFI_GUID>()

	var driveNumber ULONG
	var partitionNumber ULONG
	var driveType USHORT
	var cDCount ULONG = 0
	var fDCount ULONG = 0
	var hDCount ULONG = 0
	var rDCount ULONG = 0
	rtlInitializeListHead(blockDevices)
	rtlInitializeListHead(efiBlockDevices)
	status = blpDiscoverEfiBlockDevices(blockDevices)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to discover EFI block devices (Status Code: 0x%zX)\n", status)
		return status

	}

	listEntry = BlockDevices.flink
	while listEntry != blockDevices {
		blockDeviceData = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! EFI_BLOCK_DEVICE_DATA *)
		status = blpFindLastBlockDeviceNode(blockDeviceData.devicePath, lastNode)
		if status != (9223372036854775808 & 0) {
			blDebugPrint("WARNING: Block device last node not found\n")
			listEntry = listEntry.flink
			continue
		}

		driveType = 0
		if lastNode.type == 2 and lastNode.subType == 1 {
			acpiDevice = lastNode as! PEFI_ACPI_HID_DEVICE_PATH
			if acpiDevice.hID == 100942288 or acpiDevice.hID == 117457360 or acpiDevice.hID == 117522897 {
				media = blockDeviceData.blockIo.media
				driveType = 2
				driveNumber = ++fDCount
				partitionNumber = 0
				blDebugPrint("Found Floppy Disk (DiskNumber: %lu, MediaPresent: %u, RO: %u)\n", driveNumber, media.mediaPresent, media.readOnly)

			}


		} else {
			lastNode.type == 4

			{
				lastNode.subType == 2

				{
					media = blockDeviceData.blockIo.media
					driveType = 1
					driveNumber = ++cDCount
					partitionNumber = 0
					blDebugPrint("Found CD-ROM drive (DriveNumber: %lu, MediaPresent: %u, RemovableMedia: %u, RO: %u)\n", driveNumber, media.mediaPresent, media.removableMedia, media.readOnly)

				}

				if lastNode.subType == 1 {
					media = blockDeviceData.blockIo.media
					hDPath = lastNode as! PEFI_HARDDRIVE_DEVICE_PATH
					driveType = 3
					driveNumber = ((hDPath.partitionNumber == 1)) ? ++hDCount : hDCount - 1
					partitionNumber = hDPath.partitionNumber
					partitionGuid = hDPath.signature as! PEFI_GUID
					blDebugPrint("Found Hard Disk partition (DiskNumber: %lu, PartNumber: %lu, MBRType: %u, GUID: {%V}, PartSize: %uB)\n", driveNumber, partitionNumber, hDPath.mBRType, partitionGuid, hDPath.partitionSize * media.blockSize)

				} else {
					lastNode.subType == 9

					{
						media = blockDeviceData.blockIo.media
						driveType = 4
						driveNumber = ++rDCount
						partitionNumber = 0
						blDebugPrint("Found RAM Disk (DiskNumber: %lu, MediaPresent: %u)\n", driveNumber, media.mediaPresent)

					}


				}

				blpFindParentBlockDevice(blockDevices, blockDeviceData, parentNode)!
				{
					blDebugPrint("WARNING: No parent device found, skipping orphaned media device path\n")

				}


			}


		}

		if driveType != 0 {
			status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), blockDevice as! PVOID *)
			if status != (9223372036854775808 & 0) {
				blDebugPrint("ERROR: Failed to allocate memory pool for block device (Status Code: 0x%zX)\n", status)
				return (9223372036854775808 | 9)

			}

			blockDevice.devicePath = blpDuplicateDevicePath(blockDeviceData.devicePath)
			blockDevice.driveType = driveType
			blockDevice.driveNumber = driveNumber
			blockDevice.partitionNumber = partitionNumber
			blockDevice.partitionGuid = partitionGuid
			rtlInsertTailList(efiBlockDevices, blockDevice.listEntry)

		}

		listEntry = listEntry.flink

	}

	return (9223372036854775808 & 0)
}

/// Finds an EFI device path for a specified path on a given file system.
/// 
/// @param FsHandle
///        The handle of the corresponding file system.
/// 
/// @param FileSystemPath
///        Specifies a path on the corresponding file system.
/// 
/// @param DevicePath
///        Specifies a pointer to the memory area, where found device path will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blFindVolumeDevicePath(fsHandle PEFI_DEVICE_PATH_PROTOCOL, fileSystemPath Const PWCHAR, devicePath PEFI_DEVICE_PATH_PROTOCOL *) {
	var status EFI_STATUS
	var fsPathLength SIZE_T
	var devicePathLength SIZE_T = 0
	let filePath = new ByValue<PEFI_FILEPATH_DEVICE_PATH>()

	let endDevicePath = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let devicePathHandle = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	devicePathHandle = fsHandle
	while tRUE {
		if devicePathHandle.length as! PUSHORT[0] == 0 {
			return (9223372036854775808 | 14)

		}

		if devicePathHandle.type == 127 {
			break
		}

		devicePathLength += devicePathHandle.length as! PUSHORT[0]
		devicePathHandle = (devicePathHandle as! PUCHAR + devicePathHandle.length as! PUSHORT[0]) as! PEFI_DEVICE_PATH_PROTOCOL

	}

	fsPathLength = rtlWideStringLength(fileSystemPath, 0) * sizeOf<Unsigned long long>()
	status = blAllocateMemoryPool(fsPathLength + devicePathLength + sizeOf<Unsigned long long>(), devicePath as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	rtlCopyMemory(devicePath[0], fsHandle, devicePathLength)
	filePath = (devicePath[0] as! PUCHAR + devicePathLength) as! PEFI_FILEPATH_DEVICE_PATH
	filePath.header.type = 4
	filePath.header.subType = 4
	filePath.header.length[0] = fsPathLength as! UCHAR + __builtin_offsetof<Unsigned long long>() + sizeOf<Unsigned long long>()
	filePath.header.length[1] = filePath.header.length[0] >> 8
	rtlCopyMemory(filePath.pathName, fileSystemPath, fsPathLength + sizeOf<Unsigned long long>())
	endDevicePath = filePath.pathName[(fsPathLength / sizeOf<Unsigned long long>()) + 1] as! PEFI_DEVICE_PATH_PROTOCOL
	endDevicePath.type = 127
	endDevicePath.subType = 255
	endDevicePath.length[0] = sizeOf<Unsigned long long>()
	endDevicePath.length[1] = 0
	return (9223372036854775808 & 0)
}

/// Creates a copy of the system path with EFI standard directory separators.
/// 
/// @param SystemPath
///        Supplies a pointer to the system path.
/// 
/// @param EfiPath
///        Supplies a pointer to the memory area, where EFI path will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blGetEfiPath(systemPath PWCHAR, efiPath PWCHAR *) {
	var index SIZE_T
	var pathLength SIZE_T
	var status EFI_STATUS
	pathLength = rtlWideStringLength(systemPath, 0)
	status = blAllocateMemoryPool(sizeOf<Unsigned long long>() * (pathLength + 1), efiPath as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return (9223372036854775808 | 9)

	}

	rtlCopyMemory(efiPath[0], systemPath, sizeOf<Unsigned long long>() * (pathLength + 1))
	index = 0
	while index < pathLength {
		if (efiPath[0])[index] == 47/* "/" */ {
			(efiPath[0])[index] = 92/* "\\" */

		}

		index

	}

	return (9223372036854775808 & 0)
}

/// Finds a volume device path based on the specified ARC name or UUID.
/// 
/// @param SystemPath
///        An input string containing ARC/UUID path.
/// 
/// @param DevicePath
///        Supplies a pointer to memory region where device path will be stored.
/// 
/// @param Path
///        Supplies a pointer to the memory area, where path on device will be saved.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blGetVolumeDevicePath(systemPath PWCHAR, devicePath PEFI_DEVICE_PATH_PROTOCOL *, arcName PWCHAR *, path PWCHAR *) {
	let device = new ByValue<PEFI_BLOCK_DEVICE>()

	var driveType USHORT
	var driveNumber ULONG
	var partNumber ULONG
	var volume PWCHAR
	var pathLength ULONG
	let listEntry = new ByValue<PLIST_ENTRY>()

	var status EFI_STATUS
	devicePath[0] = (0 as! PVOID)
	volume = systemPath
	while volume[0] != 47/* "/" */ and volume[0] != 92/* "\\" */ and volume[0] != 0/* "\u0000" */ {
		volume++
	}

	pathLength = volume - systemPath
	if pathLength == 0 {
		path[0] = systemPath
		return (9223372036854775808 | 14)

	}

	if systemPath[0] == 123/* "{" */ {
		if pathLength == 38 {
			blDebugPrint("WARNING: EFI/GPT GUID in system path is not supported\n")
			return (9223372036854775808 | 3)

		} else {
			pathLength == 13

			{
				blDebugPrint("WARNING: MBR partition UUID in system path is not supported\n")
				(9223372036854775808 | 3)

			}


			{
				(9223372036854775808 | 2)

			}


		}


	} else {
		status = blpDissectVolumeArcPath(systemPath, arcName, path, driveType, driveNumber, partNumber)

	}

	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to parse system path: '%s' (Status Code: 0x%zX)\n", systemPath, status)
		return status

	}

	listEntry = EfiBlockDevices.flink
	while listEntry != efiBlockDevices {
		device = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! EFI_BLOCK_DEVICE *)
		if (device.driveType == driveType and device.driveNumber == driveNumber and device.partitionNumber == partNumber) {
			devicePath[0] = device.devicePath
			break
		}

		listEntry = listEntry.flink

	}

	if devicePath[0] == (0 as! PVOID) {
		blDebugPrint("ERROR: Volume (DriveType: %u, DriveNumber: %lu, PartNumber: %lu) not found\n", driveType, driveNumber, partNumber)
		return (9223372036854775808 | 14)

	}

	return (9223372036854775808 & 0)
}

/// This routine opens an EFI volume and corresponding filesystem.
/// 
/// @param DevicePath
///        Specifies a device path of the volume to open. If not specifies, uses image protocol by default.
/// 
/// @param DiskHandle
///        The handle of the opened disk volume.
/// 
/// @param FsHandle
///        The handle of the opened file system.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blOpenVolume(devicePath PEFI_DEVICE_PATH_PROTOCOL, diskHandle PEFI_HANDLE, fsHandle PEFI_FILE_HANDLE *) {
	let sFSGuid = new ByValue<EFI_GUID>()

	let lIPGuid = new ByValue<EFI_GUID>()

	let fileSystemProtocol = new ByValue<PEFI_SIMPLE_FILE_SYSTEM_PROTOCOL>()

	let imageProtocol = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	var status EFI_STATUS
	if devicePath != (0 as! PVOID) {
		status = efiSystemTable.bootServices.locateDevicePath(sFSGuid, devicePath, diskHandle)
		if status != (9223372036854775808 & 0) {
			return status

		}


	} else {
		status = efiSystemTable.bootServices.openProtocol(efiImageHandle, lIPGuid, imageProtocol as! PVOID *, efiImageHandle, (0 as! PVOID), 1)
		if status != (9223372036854775808 & 0) {
			return status

		}

		diskHandle[0] = imageProtocol.deviceHandle

	}

	status = efiSystemTable.bootServices.openProtocol(diskHandle[0], sFSGuid, fileSystemProtocol as! PVOID *, efiImageHandle, (0 as! PVOID), 1)
	if status != (9223372036854775808 & 0) {
		blCloseVolume(diskHandle[0])
		return status

	}

	status = fileSystemProtocol.openVolume(fileSystemProtocol, fsHandle)
	if status != (9223372036854775808 & 0) {
		blCloseVolume(diskHandle[0])
		return status

	}

	return (9223372036854775808 & 0)
}

/// Reads data from the file.
/// 
/// @param DirHandle
///        Supplies a handle of the opened filesystem directory.
/// 
/// @param FileName
///        Supplies the name of the file to read.
/// 
/// @param FileData
///        Provides a buffer to store the data read from the file.
/// 
/// @param FileSize
///        Provides a pointer to the variable to store a size of the buffer.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blReadFile(dirHandle PEFI_FILE_HANDLE, fileName Const PWCHAR, fileData PVOID *, fileSize PSIZE_T) {
	let fileInfoGuid = new ByValue<EFI_GUID>()

	var address EFI_PHYSICAL_ADDRESS
	let fileHandle = new ByValue<PEFI_FILE_HANDLE>()

	let fileInfo = new ByValue<PEFI_FILE_INFO>()

	var status EFI_STATUS
	var readSize UINT_PTR
	var pages SIZE_T
	status = dirHandle.open(dirHandle, fileHandle, fileName, 1, 1 | 2 | 4)
	if status != (9223372036854775808 & 0) {
		return status

	}

	readSize = sizeOf<Unsigned long long>() + 32
	status = blAllocateMemoryPool(readSize, fileInfo as! PVOID *)
	if status != (9223372036854775808 & 0) {
		fileHandle.close(fileHandle)
		return status

	}

	fileHandle.getInfo(fileHandle, fileInfoGuid, readSize, fileInfo)
	if status == (9223372036854775808 | 5) {
		blFreeMemoryPool(fileInfo)
		status = blAllocateMemoryPool(readSize, fileInfo as! PVOID *)
		if status != (9223372036854775808 & 0) {
			fileHandle.close(fileHandle)
			return status

		}

		status = fileHandle.getInfo(fileHandle, fileInfoGuid, readSize, fileInfo)

	}

	if status != (9223372036854775808 & 0) {
		fileHandle.close(fileHandle)
		blFreeMemoryPool(fileInfo)
		return status

	}

	fileSize[0] = fileInfo.fileSize
	pages = (((fileInfo.fileSize) >> 12) + ((((fileInfo.fileSize) & 4095)) ? 1 : 0))
	status = blAllocateMemoryPages(pages, address)
	if status != (9223372036854775808 & 0) {
		fileHandle.close(fileHandle)
		blFreeMemoryPool(fileInfo)
		return status

	}

	readSize = pages * 4096
	fileData[0] = address as! UINT_PTR as! PCHAR
	rtlZeroMemory(fileData[0], readSize)
	status = fileHandle.read(fileHandle, readSize, fileData[0])
	if status != (9223372036854775808 & 0) {
		fileHandle.close(fileHandle)
		blFreeMemoryPool(fileInfo)
		blFreeMemoryPages(pages, fileData[0] as! UINT_PTR as! EFI_PHYSICAL_ADDRESS)
		return status

	}

	fileHandle.close(fileHandle)
	blFreeMemoryPool(fileInfo)
	return (9223372036854775808 & 0)
}

/// Gets a list of block devices from an EFI enabled BIOS.
/// 
/// @param BlockDevices
///        Supplies a pointer to a variable to receive a list of EFI block devices.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpDiscoverEfiBlockDevices(blockDevices PLIST_ENTRY) {
	let devicePathGuid = new ByValue<EFI_GUID>()

	let ioGuid = new ByValue<EFI_GUID>()

	let devicePath = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let blockDevice = new ByValue<PEFI_BLOCK_DEVICE_DATA>()

	var handlesCount UINT_PTR
	var index UINT_PTR
	var handles PEFI_HANDLE = (0 as! PVOID)
	let io = new ByValue<PEFI_BLOCK_IO_PROTOCOL>()

	var status EFI_STATUS
	status = blLocateProtocolHandles(handles, handlesCount, ioGuid)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to locate block devices handles (Status Code: 0x%zX)\n", status)
		return status

	}

	index = 0
	while index < handlesCount {
		blDebugPrint("Opening %lu block device from %lu discovered\n", index + 1, handlesCount)
		io = (0 as! PVOID)
		status = blOpenProtocolHandle(handles[index], io as! PVOID *, ioGuid)
		if status != (9223372036854775808 & 0) or io == (0 as! PVOID) {
			blDebugPrint("WARNING: Failed to open EFI Block I/O protocol (Status Code: 0x%zX)\n", status)
			continue
		}

		if io.media and io.media.blockSize == 1 and io.media.mediaId == 1766873157 {
			blDebugPrint("WARNING: Skipping iPXE stub block I/O protocol")
			continue
		}

		devicePath = (0 as! PVOID)
		status = efiSystemTable.bootServices.handleProtocol(handles[index], devicePathGuid, devicePath as! PVOID *)
		if status != (9223372036854775808 & 0) or devicePath == (0 as! PVOID) {
			blDebugPrint("WARNING: Unable to open DevicePath protocol (Status Code: 0x%zX)\n", status)
			efiSystemTable.bootServices.closeProtocol(handles[index], ioGuid, efiImageHandle, (0 as! PVOID))
			continue
		}

		status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), blockDevice as! PVOID *)
		if status != (9223372036854775808 & 0) {
			blDebugPrint("ERROR: Failed to allocate memory pool for block device (Status Code: 0x%zX)\n", status)
			efiSystemTable.bootServices.closeProtocol(handles[index], devicePathGuid, efiImageHandle, (0 as! PVOID))
			efiSystemTable.bootServices.closeProtocol(handles[index], ioGuid, efiImageHandle, (0 as! PVOID))
			return status

		}

		blockDevice.blockIo = io
		blockDevice.devicePath = devicePath
		rtlInsertTailList(blockDevices, blockDevice.listEntry)
		index

	}

	blFreeMemoryPool(handles)
	return (9223372036854775808 & 0)
}

/// Dissects a specified ARC name and provides detailed information about corresponding device and on disk path.
/// 
/// @param SystemPath
///        Supplies an input ARC path.
/// 
/// @param Path
///        Specifies a pointer to variable, where on disk path will be saved.
/// 
/// @param DriveType
///        Supplies a pointer to the variable that receives a drive type.
/// 
/// @param DriveNumber
///        Supplies a pointer to the variable that receives a drive number.
/// 
/// @param PartNumber
///        Supplies a pointer to the variable that receives a parition number if applicable, otherwise stores 0 (zero).
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpDissectVolumeArcPath(systemPath PWCHAR, arcName PWCHAR *, path PWCHAR *, driveType PUSHORT, driveNumber PULONG, partNumber PULONG) {
	var arcPath PWCHAR
	var localArcName PWCHAR
	var arcLength ULONG = 0
	driveType[0] = 0
	driveNumber[0] = 0
	partNumber[0] = 0
	if rtlCompareWideStringInsensitive(systemPath, "ramdisk(0)", 0) == 0 {
		arcLength = 10
		driveType[0] = 4

	} else {
		rtlCompareWideStringInsensitive(systemPath, "multi(0)disk(0)", 0) == 0

		{
			arcLength = 15
			arcPath = systemPath + arcLength
			rtlCompareWideStringInsensitive(arcPath, "cdrom(", 0) == 0

			{
				arcLength += 6
				systemPath[arcLength] != 41/* ")" */ && systemPath[arcLength] != 0/* "\u0000" */

				{
					systemPath[arcLength] >= 48/* "0" */ && systemPath[arcLength] <= 57/* "9" */

					{
						driveNumber[0] *= 10
						driveNumber[0] += systemPath[arcLength] - 48/* "0" */

					}

					++arcLength

				}

				driveType[0] = 1
				++arcLength

			}

			if rtlCompareWideStringInsensitive(arcPath, "fdisk(", 0) == 0 {
				arcLength += 6
				while systemPath[arcLength] != 41/* ")" */ and systemPath[arcLength] != 0/* "\u0000" */ {
					if systemPath[arcLength] >= 48/* "0" */ and systemPath[arcLength] <= 57/* "9" */ {
						driveNumber[0] *= 10
						driveNumber[0] += systemPath[arcLength] - 48/* "0" */

					}

					arcLength++
				}

				driveType[0] = 2
				arcLength++
			} else {
				rtlCompareWideStringInsensitive(arcPath, "rdisk(", 0) == 0

				{
					arcLength += 6
					systemPath[arcLength] != 41/* ")" */ && systemPath[arcLength] != 0/* "\u0000" */

					{
						systemPath[arcLength] >= 48/* "0" */ && systemPath[arcLength] <= 57/* "9" */

						{
							driveNumber[0] *= 10
							driveNumber[0] += systemPath[arcLength] - 48/* "0" */

						}

						++arcLength

					}

					driveType[0] = 3
					++arcLength
					arcPath = systemPath + arcLength
					rtlCompareWideStringInsensitive(arcPath, "partition(", 0) == 0

					{
						arcLength += 10
						systemPath[arcLength] != 41/* ")" */ && systemPath[arcLength] != 0/* "\u0000" */

						{
							systemPath[arcLength] >= 48/* "0" */ && systemPath[arcLength] <= 57/* "9" */

							{
								partNumber[0] *= 10
								partNumber[0] += systemPath[arcLength] - 48/* "0" */

							}

							++arcLength

						}

						++arcLength

					}


				}


				{
					(9223372036854775808 | 3)

				}


			}


		}


		{
			(9223372036854775808 | 3)

		}


	}

	if path {
		path[0] = systemPath + arcLength

	}

	if arcName {
		blAllocateMemoryPool(arcLength * sizeOf<Unsigned long long>(), localArcName as! PVOID *)
		rtlCopyMemory(localArcName, systemPath, arcLength * sizeOf<Unsigned long long>())
		localArcName[arcLength] = 0/* "\u0000" */
		arcName[0] = localArcName

	}

	return (9223372036854775808 & 0)
}

/// This routine duplicates a device path object.
/// 
/// @param DevicePath
///        An input device path that is going to be clonned.
/// 
/// @return Returns a duplicate of input device path.
/// 
/// @since XT 1.0
fun blpDuplicateDevicePath(devicePath PEFI_DEVICE_PATH_PROTOCOL) {
	let devicePathNode = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let devicePathClone = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	var status EFI_STATUS
	var length UINT = 0
	devicePathNode = devicePath
	while tRUE {
		length += devicePath.length as! PUSHORT[0]
		if devicePathNode.type == 127 {
			break
		}

		devicePathNode = (devicePathNode as! PUCHAR + devicePath.length as! PUSHORT[0]) as! PEFI_DEVICE_PATH_PROTOCOL

	}

	if length == 0 {
		return (0 as! PVOID)

	}

	status = blAllocateMemoryPool(length, devicePathClone as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to allocate memory pool for device path duplicate (Status Code: 0x%zX)\n", status)
		return (0 as! PVOID)

	}

	rtlCopyMemory(devicePathClone, devicePath, length)
	return devicePathClone
}

/// Attempts to find a last node of the EFI block device.
/// 
/// @param DevicePath
///        An input device path.
/// 
/// @param LastNode
///        A pointer to the buffer where last node will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpFindLastBlockDeviceNode(devicePath PEFI_DEVICE_PATH_PROTOCOL, lastNode PEFI_DEVICE_PATH_PROTOCOL *) {
	let endNode = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let nextNode = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	if devicePath.type == 127 {
		lastNode = (0 as! PVOID)
		return (9223372036854775808 | 2)

	}

	endNode = devicePath
	while endNode.type != 127 {
		nextNode = endNode
		endNode = (endNode as! PUCHAR + endNode.length as! PUSHORT[0]) as! PEFI_DEVICE_PATH_PROTOCOL

	}

	lastNode[0] = nextNode
	return (9223372036854775808 & 0)
}

/// This routine attempts to find a parent device of the provided block device.
/// 
/// @param BlockDevice
///        A linked list of discovered block devices.
/// 
/// @param ChildNode
///        Block device that is looking for a parent device.
/// 
/// @param ParentNode
///        A pointer to memory region where pointer to the parent node will be provided.
/// 
/// @return This routine returns TRUE if parent node has been found, or FALSE otherwise.
/// 
/// @since XT 1.0
fun blpFindParentBlockDevice(blockDevices PLIST_ENTRY, childNode PEFI_BLOCK_DEVICE_DATA, parentNode PEFI_BLOCK_DEVICE_DATA) {
	let childDevicePath = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let parentDevicePath = new ByValue<PEFI_DEVICE_PATH_PROTOCOL>()

	let blockDeviceData = new ByValue<PEFI_BLOCK_DEVICE_DATA>()

	var childLength UINT
	var parentLength UINT
	let listEntry = new ByValue<PLIST_ENTRY>()

	listEntry = blockDevices.flink
	while listEntry != blockDevices {
		blockDeviceData = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! EFI_BLOCK_DEVICE_DATA *)
		childDevicePath = childNode.devicePath
		parentDevicePath = blockDeviceData.devicePath
		while tRUE {
			if parentDevicePath.type == 127 {
				parentNode = blockDeviceData
				return tRUE

			}

			childLength = childDevicePath.length as! PUSHORT[0]
			parentLength = parentDevicePath.length as! PUSHORT[0]
			if childLength != parentLength {
				break
			}

			childDevicePath = (childDevicePath as! PUCHAR + childLength) as! PEFI_DEVICE_PATH_PROTOCOL
			parentDevicePath = (parentDevicePath as! PUCHAR + parentLength) as! PEFI_DEVICE_PATH_PROTOCOL

		}

		listEntry = listEntry.flink

	}

	return fALSE
}
