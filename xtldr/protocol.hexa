/// Closes a protocol on a provided handle.
/// 
/// @param Handle
///        Supplies a handle for the protocol interface that was previously opened.
/// 
/// @param ProtocolGuid
///        Supplies a unique protocol GUID.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blCloseProtocol(handle PEFI_HANDLE, protocolGuid PEFI_GUID) {
	return efiSystemTable.bootServices.closeProtocol(handle, protocolGuid, efiImageHandle, (0 as! PVOID))
}

/// Finds a boot protocol for specified system type.
/// 
/// @param SystemType
///        Specifies the system type to search for.
/// 
/// @param BootProtocolGuid
///        Receives the GUID of the registered boot protocol, that supports specified system.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blFindBootProtocol(systemType PWCHAR, bootProtocolGuid PEFI_GUID) {
	let protocolEntry = new ByValue<PXTBL_KNOWN_BOOT_PROTOCOL>()

	let protocolListEntry = new ByValue<PLIST_ENTRY>()

	protocolListEntry = BlpBootProtocols.flink
	while protocolListEntry != blpBootProtocols {
		protocolEntry = (((protocolListEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_KNOWN_BOOT_PROTOCOL *)
		if rtlCompareWideStringInsensitive(protocolEntry.systemType, systemType, 0) == 0 {
			bootProtocolGuid[0] = protocolEntry.guid
			return (9223372036854775808 & 0)

		}

		protocolListEntry = protocolListEntry.flink

	}

	return (9223372036854775808 | 14)
}

/// Returns a linked list of all loaded modules.
/// 
/// @return This routine returns a pointer to a linked list of all loaded modules.
/// 
/// @since XT 1.0
/// 
/// @todo This is a temporary solution and it should be replaced by a complex API allowing to map modules.
fun blGetModulesList() {
	return blpLoadedModules
}

/// Installs XTLDR protocol interface.
/// 
/// @param Guid
///        Specifies a unique protocol GUID.
/// 
/// @param Interface
///        Supplies a pointer to the protocol interface, or NULL if there is no structure associated.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blInstallProtocol(interface PVOID, guid PEFI_GUID) {
	var handle EFI_HANDLE = (0 as! PVOID)
	return efiSystemTable.bootServices.installProtocolInterface(handle, guid, eFI_NATIVE_INTERFACE, interface)
}

/// Loads a specified XTLDR module from disk.
/// 
/// @param ModuleName
///        Specifies the name of the module to load.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blLoadModule(moduleName PWCHAR) {
	let lIPGuid = new ByValue<EFI_GUID>()

	let depsListEntry = new ByValue<PLIST_ENTRY>()

	let moduleListEntry = new ByValue<PLIST_ENTRY>()

	var moduleDevicePath EFI_MEMMAP_DEVICE_PATH[2]
	let loadedImage = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	let dirHandle = new ByValue<PEFI_FILE_HANDLE>()

	let fsHandle = new ByValue<PEFI_FILE_HANDLE>()

	var diskHandle EFI_HANDLE
	var moduleHandle EFI_HANDLE
	let sectionHeader = new ByValue<PPECOFF_IMAGE_SECTION_HEADER>()

	let dosHeader = new ByValue<PPECOFF_IMAGE_DOS_HEADER>()

	let peHeader = new ByValue<PPECOFF_IMAGE_PE_HEADER>()

	let moduleDependency = new ByValue<PXTBL_MODULE_DEPS>()

	let moduleInfo = new ByValue<PXTBL_MODULE_INFO>()

	var moduleFileName WCHAR[24]
	var sectionIndex USHORT
	var sectionData PWCHAR
	var moduleSize SIZE_T
	var status EFI_STATUS
	var moduleData PVOID
	moduleListEntry = BlpLoadedModules.flink
	while moduleListEntry != blpLoadedModules {
		moduleInfo = (((moduleListEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_MODULE_INFO *)
		if rtlCompareWideStringInsensitive(moduleInfo.moduleName, moduleName, 0) == 0 {
			blDebugPrint("WARNING: Module '%S' already loaded!\n", moduleName)
			return (9223372036854775808 & 0)

		}

		moduleListEntry = moduleListEntry.flink

	}

	blDebugPrint("Loading module '%S' ...\n", moduleName)
	rtlCopyMemory(moduleFileName, moduleName, sizeOf<Unsigned long long>() / sizeOf<Unsigned long long>())
	rtlConcatenateWideString(moduleFileName, ".EFI", 0)
	status = blOpenVolume((0 as! PVOID), diskHandle, fsHandle)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = fsHandle.open(fsHandle, dirHandle, "\\EFI\\BOOT\\XTLDR\\MODULES\\", 1, 0)
	if status != (9223372036854775808 & 0) {
		status = fsHandle.open(fsHandle, dirHandle, "\\EFI\\BOOT\\XTLDR64\\MODULES\\", 1, 0)

	}

	fsHandle.close(fsHandle)
	if status != (9223372036854775808 & 0) {
		blCloseVolume(diskHandle)
		return status

	}

	status = blReadFile(dirHandle, moduleFileName, moduleData, moduleSize)
	dirHandle.close(dirHandle)
	blCloseVolume(diskHandle)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), moduleInfo as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	rtlZeroMemory(moduleInfo, sizeOf<Unsigned long long>())
	dosHeader = moduleData as! PPECOFF_IMAGE_DOS_HEADER
	peHeader = (moduleData + dosHeader.peHeaderOffset) as! PPECOFF_IMAGE_PE_HEADER
	if peHeader.optionalHeader32.magic == 523 {
		sectionHeader = (peHeader.optionalHeader64 as! PUCHAR + peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	} else {
		sectionHeader = (peHeader.optionalHeader32 as! PUCHAR + peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	}

	sectionIndex = 0
	while sectionIndex < peHeader.fileHeader.numberOfSections {
		if rtlCompareString(sectionHeader[sectionIndex].name as! PCHAR, ".modinfo", 8) == 0 {
			sectionData = moduleData + sectionHeader[sectionIndex].pointerToRawData
			status = blpGetModuleInformation(sectionData, sectionHeader[sectionIndex].sizeOfRawData, moduleInfo)
			if status != (9223372036854775808 & 0) {
				return status

			}


		}

		sectionIndex

	}

	depsListEntry = moduleInfo.dependencies.flink
	while depsListEntry != moduleInfo.dependencies {
		moduleDependency = (((depsListEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_MODULE_DEPS *)
		if moduleDependency.moduleName == (0 as! PVOID) or moduleDependency.moduleName[0] == 0/* "\u0000" */ {
			break
		}

		blDebugPrint("Module '%S' requires '%S' ...\n", moduleName, moduleDependency.moduleName)
		status = blLoadModule(moduleDependency.moduleName)
		if status != (9223372036854775808 & 0) {
			blDebugPrint("Failed to load dependency module '%S' (Status Code: 0x%zX)\n", moduleDependency.moduleName, status)
			return (9223372036854775808 | 3)

		}

		depsListEntry = depsListEntry.flink

	}

	moduleDevicePath[0].header.length[0] = sizeOf<Unsigned long long>()
	moduleDevicePath[0].header.length[1] = sizeOf<Unsigned long long>() >> 8
	moduleDevicePath[0].header.type = 1
	moduleDevicePath[0].header.subType = 3
	moduleDevicePath[0].memoryType = efiLoaderData
	moduleDevicePath[0].startingAddress = moduleData as! UINT_PTR
	moduleDevicePath[0].endingAddress = moduleData as! UINT_PTR + moduleSize
	moduleDevicePath[1].header.length[0] = sizeOf<Unsigned long long>()
	moduleDevicePath[1].header.length[1] = sizeOf<Unsigned long long>() >> 8
	moduleDevicePath[1].header.type = 127
	moduleDevicePath[1].header.subType = 255
	blDebugPrint("Starting module '%S' ...\n", moduleName)
	status = blLoadEfiImage(moduleDevicePath as! PEFI_DEVICE_PATH_PROTOCOL, moduleData, moduleSize, moduleHandle)
	if status != (9223372036854775808 & 0) {
		if status == (9223372036854775808 | 15) and BlpStatus.secureBoot >= 1 {
			blDebugPrint("ERROR: SecureBoot signature validation failed, module '%S' will not be loaded\n", moduleName)

		} else {
			blDebugPrint("ERROR: Unable to load module '%S' (Status Code: 0x%zX)\n", moduleName, status)

		}

		return status

	}

	status = efiSystemTable.bootServices.openProtocol(moduleHandle, lIPGuid, loadedImage as! PVOID *, efiImageHandle, (0 as! PVOID), 2)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Unable to access module interface (Status Code: 0x%zX)\n", status)
		return status

	}

	if loadedImage.imageCodeType != efiBootServicesCode {
		blDebugPrint("ERROR: Loaded module is not a boot system driver\n")
		efiSystemTable.bootServices.closeProtocol(loadedImage, lIPGuid, loadedImage, (0 as! PVOID))

	}

	moduleInfo.moduleName = moduleName
	moduleInfo.moduleBase = loadedImage.imageBase
	moduleInfo.moduleSize = loadedImage.imageSize
	moduleInfo.revision = loadedImage.revision
	moduleInfo.unloadModule = loadedImage.unload
	efiSystemTable.bootServices.closeProtocol(loadedImage, lIPGuid, loadedImage, (0 as! PVOID))
	status = blStartEfiImage(moduleHandle)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Failed to start module '%S' (Status Code: 0x%zX)\n", moduleName, status)
		return status

	}

	rtlInsertTailList(blpLoadedModules, moduleInfo.flink)
	return (9223372036854775808 & 0)
}

/// Helper routine to load all modules supplied in the configuration file.
/// 
/// @param ModulesList
///        Supplies a space separated list of XTLDR modules to load (mostly read from configuration file).
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blLoadModules(modulesList PWCHAR) {
	var lastModule PWCHAR
	var module PWCHAR
	var returnStatus EFI_STATUS
	var status EFI_STATUS
	returnStatus = (9223372036854775808 & 0)
	if modulesList != (0 as! PVOID) {
		module = rtlTokenizeWideString(modulesList, " ", lastModule)
		while module != (0 as! PVOID) {
			status = blLoadModule(module)
			if status != (9223372036854775808 & 0) {
				blDebugPrint("ERROR: Failed to load module '%S' (Status Code: 0x%zX)\n", module, status)
				returnStatus = (9223372036854775808 | 1)

			}

			module = rtlTokenizeWideString((0 as! PVOID), " ", lastModule)

		}


	}

	return returnStatus
}

/// Returns an array of handles that support the requested protocol.
/// 
/// @param Handles
///        Supplies the address where a pointer to all handles found for the protocol interface.
/// 
/// @param Count
///        Provides a number of the returned handles.
/// 
/// @param ProtocolGuid
///        Supplies a pointer to the unique protocol GUID.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blLocateProtocolHandles(handles PEFI_HANDLE *, count PUINT_PTR, protocolGuid PEFI_GUID) {
	return efiSystemTable.bootServices.locateHandleBuffer(byProtocol, protocolGuid, (0 as! PVOID), count, handles)
}

/// Locates and opens the requested XT Boot Loader or EFI protocol.
/// 
/// @param Handle
///        Supplies the address where a pointer to the handle for the protocol interface.
/// 
/// @param ProtocolHandler
///        Supplies the address where a pointer to the opened protocol is returned.
/// 
/// @param ProtocolGuid
///        Supplies a pointer to the unique protocol GUID.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blOpenProtocol(handle PEFI_HANDLE, protocolHandler PVOID *, protocolGuid PEFI_GUID) {
	var handles PEFI_HANDLE = (0 as! PVOID)
	var status EFI_STATUS
	var count UINT_PTR
	var index UINT
	status = blLocateProtocolHandles(handles, count, protocolGuid)
	if status != (9223372036854775808 & 0) {
		return status

	}

	if count > 0 {
		index = 0
		while index < count {
			status = blOpenProtocolHandle(handles[index], protocolHandler, protocolGuid)
			if status == (9223372036854775808 & 0) {
				handle[0] = handles[index]
				break
			}

			index

		}


	}

	efiSystemTable.bootServices.freePool(handles)
	if protocolHandler[0] == (0 as! PVOID) {
		return (9223372036854775808 | 14)

	}

	return (9223372036854775808 & 0)
}

/// Opens the requested XT Boot Loader or EFI protocol, if it is supported by the handle.
/// 
/// @param Handle
///        Supplies a handle for the protocol interface that is being opened.
/// 
/// @param ProtocolHandler
///        Supplies the address where a pointer to the opened protocol is returned.
/// 
/// @param ProtocolGuid
///        Supplies a pointer to the unique protocol GUID.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blOpenProtocolHandle(handle EFI_HANDLE, protocolHandler PVOID *, protocolGuid PEFI_GUID) {
	return efiSystemTable.bootServices.openProtocol(handle, protocolGuid, protocolHandler, efiImageHandle, (0 as! PVOID), 1)
}

/// Registers a boot menu callback routine, that will be used to display alternative boot menu.
/// 
/// @param BootMenuRoutine
///        Supplies a pointer to the boot menu callback routine.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blRegisterBootMenu(bootMenuRoutine PVOID) {
	BlpStatus.bootMenu = bootMenuRoutine
}

/// Registers a known boot protocol for a specified OS.
/// 
/// @param SystemType
///        Supplies the type of the OS, such as "LINUX", "XTOS", etc. that is supported by the boot protocol.
/// 
/// @param BootProtocolGuid
///        Supplies a pointer to the unique protocol GUID.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blRegisterBootProtocol(systemType PWCHAR, bootProtocolGuid PEFI_GUID) {
	let protocolEntry = new ByValue<PXTBL_KNOWN_BOOT_PROTOCOL>()

	let protocolListEntry = new ByValue<PLIST_ENTRY>()

	var status EFI_STATUS
	protocolListEntry = BlpBootProtocols.flink
	while protocolListEntry != blpBootProtocols {
		protocolEntry = (((protocolListEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_KNOWN_BOOT_PROTOCOL *)
		if rtlCompareWideStringInsensitive(protocolEntry.systemType, systemType, 0) == 0 {
			return (9223372036854775808 | 21)

		}

		protocolListEntry = protocolListEntry.flink

	}

	status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), protocolEntry as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 9)

	}

	protocolEntry.systemType = systemType
	protocolEntry.guid = bootProtocolGuid[0]
	rtlInsertTailList(blpBootProtocols, protocolEntry.flink)
	return (9223372036854775808 & 0)
}

/// Reads information from the '.modinfo' section and populates the module information structure.
/// 
/// @param SectionData
///        Supplies a pointer to the module's information section data.
/// 
/// @param SectionSize
///        Supplies an expected size of the section data.
/// 
/// @param ModuleInfo
///        Supplies a pointer to the module information structure that will be filled by data from module's info section.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpGetModuleInformation(sectionData PWCHAR, sectionSize ULONG, moduleInfo PXTBL_MODULE_INFO) {
	let moduleDependencies = new ByValue<PXTBL_MODULE_DEPS>()

	let moduleAuthors = new ByValue<PXTBL_MODULE_AUTHORS>()

	var dependency PWCHAR
	var key PWCHAR
	var lastStr PWCHAR
	var index ULONG
	var count ULONG
	var status EFI_STATUS
	var strings PWCHAR *
	rtlInitializeListHead(moduleInfo.authors)
	rtlInitializeListHead(moduleInfo.dependencies)
	status = blpGetModuleInfoStrings(sectionData, sectionSize, strings, count)
	if status != (9223372036854775808 & 0) {
		return status

	}

	index = 0
	while index < count {
		key = strings[index]
		while strings[index][0] != 61/* "=" */ and strings[index][0] != 0/* "\u0000" */ and strings[index][0] != 10/* "\n" */ {
			strings[index]++
		}

		strings[index][0] = 0/* "\u0000" */
		strings[index]++		if rtlCompareWideString(key, "author", 6) == 0 {
			status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), moduleAuthors as! PVOID *)
			if status != (9223372036854775808 & 0) {
				return status

			}

			moduleAuthors.authorName = strings[index]
			rtlInsertTailList(moduleInfo.authors, moduleAuthors.flink)

		} else {
			rtlCompareWideString(key, "description", 11) == 0

			{
				moduleInfo.moduleDescription = strings[index]

			}

			if rtlCompareWideString(key, "license", 7) == 0 {
				moduleInfo.license = strings[index]

			} else {
				rtlCompareWideString(key, "softdeps", 6) == 0

				{
					dependency = rtlTokenizeWideString(strings[index], " ", lastStr)
					dependency != (0 as! PVOID)

					{
						status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), moduleDependencies as! PVOID *)
						status != (9223372036854775808 & 0)

						{
							status

						}

						moduleDependencies.moduleName = dependency
						rtlInsertTailList(moduleInfo.dependencies, moduleDependencies.flink)
						dependency = rtlTokenizeWideString((0 as! PVOID), " ", lastStr)

					}


				}

				if rtlCompareWideString(key, "version", 7) == 0 {
					moduleInfo.version = strings[index]

				}


			}


		}

		index

	}

	return (9223372036854775808 & 0)
}

/// Reads raw data from the '.modinfo' section and populates an array of strings.
/// 
/// @param SectionData
///        Supplies a pointer to the module's information section data.
/// 
/// @param SectionSize
///        Supplies an expected size of the section data.
/// 
/// @param ModInfo
///        Supplies a pointer to memory area, where an array of strings read from the section will be stored.
/// 
/// @param InfoCount
///        Supplies a pointer to variable that will receive the number of strings found in the section.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpGetModuleInfoStrings(sectionData PWCHAR, sectionSize ULONG, modInfo PWCHAR **, infoCount PULONG) {
	var count ULONG
	var index ULONG
	var arrayIndex ULONG
	var infoStrings PCWSTR
	var status EFI_STATUS
	var array PWCHAR *
	var string PWCHAR
	infoStrings = sectionData
	if !infoStrings or !sectionSize {
		return (9223372036854775808 | 2)

	}

	while infoStrings[0] == 0/* "\u0000" */ and sectionSize > 1 {
		infoStrings++		sectionSize--
	}

	if sectionSize <= 1 {
		return (9223372036854775808 | 31)

	}

	index = 0
	count = 0
	while index < sectionSize {
		if infoStrings[index] != 0/* "\u0000" */ {
			index++			continue
		}

		while infoStrings[index] == 0/* "\u0000" */ and index < sectionSize {
			index++
		}

		count++
	}

	if infoStrings[index - 1] != 0/* "\u0000" */ {
		count++
	}

	status = blAllocateMemoryPool(sectionSize + 1 + sizeOf<Unsigned long long>() * (count + 1), array as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 9)

	}

	blAllocateMemoryPool(sectionSize, string as! PVOID *)
	rtlCopyMemory(string, infoStrings, sectionSize)
	array[count] = (0 as! PVOID)
	array[0] = string
	index = 0
	arrayIndex = 1
	while index < sectionSize and arrayIndex < count {
		if string[index] != 0/* "\u0000" */ {
			index++			continue
		}

		while infoStrings[index] == 0/* "\u0000" */ and index < sectionSize {
			index++
		}

		array[arrayIndex] = string[index]
		arrayIndex++
	}

	modInfo[0] = array
	infoCount[0] = count
	return (9223372036854775808 & 0)
}

/// This routine installs XTLDR protocol for further usage by modules.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpInstallXtLoaderProtocol() {
	let guid = new ByValue<EFI_GUID>()

	BlpLdrProtocol.boot.findProtocol = blFindBootProtocol
	BlpLdrProtocol.boot.initializeMenuList = blInitializeBootMenuList
	BlpLdrProtocol.boot.invokeProtocol = blInvokeBootProtocol
	BlpLdrProtocol.boot.registerMenu = blRegisterBootMenu
	BlpLdrProtocol.boot.registerProtocol = blRegisterBootProtocol
	BlpLdrProtocol.config.getBooleanValue = blGetConfigBooleanValue
	BlpLdrProtocol.config.getValue = blGetConfigValue
	BlpLdrProtocol.console.clearLine = blClearConsoleLine
	BlpLdrProtocol.console.clearScreen = blClearConsoleScreen
	BlpLdrProtocol.console.disableCursor = blDisableConsoleCursor
	BlpLdrProtocol.console.enableCursor = blEnableConsoleCursor
	BlpLdrProtocol.console.print = blConsolePrint
	BlpLdrProtocol.console.queryMode = blQueryConsoleMode
	BlpLdrProtocol.console.readKeyStroke = blReadKeyStroke
	BlpLdrProtocol.console.resetInputBuffer = blResetConsoleInputBuffer
	BlpLdrProtocol.console.setAttributes = blSetConsoleAttributes
	BlpLdrProtocol.console.setCursorPosition = blSetCursorPosition
	BlpLdrProtocol.console.write = blConsoleWrite
	BlpLdrProtocol.debug.print = blDebugPrint
	BlpLdrProtocol.disk.closeVolume = blCloseVolume
	BlpLdrProtocol.disk.openVolume = blOpenVolume
	BlpLdrProtocol.disk.readFile = blReadFile
	BlpLdrProtocol.memory.allocatePages = blAllocateMemoryPages
	BlpLdrProtocol.memory.allocatePool = blAllocateMemoryPool
	BlpLdrProtocol.memory.buildPageMap = blBuildPageMap
	BlpLdrProtocol.memory.copyMemory = rtlCopyMemory
	BlpLdrProtocol.memory.freePages = blFreeMemoryPages
	BlpLdrProtocol.memory.freePool = blFreeMemoryPool
	BlpLdrProtocol.memory.getMappingsCount = blGetMappingsCount
	BlpLdrProtocol.memory.getMemoryMap = blGetMemoryMap
	BlpLdrProtocol.memory.getVirtualAddress = blGetVirtualAddress
	BlpLdrProtocol.memory.initializePageMap = blInitializePageMap
	BlpLdrProtocol.memory.mapEfiMemory = blMapEfiMemory
	BlpLdrProtocol.memory.mapPage = blMapPage
	BlpLdrProtocol.memory.mapVirtualMemory = blMapVirtualMemory
	BlpLdrProtocol.memory.physicalAddressToVirtual = blPhysicalAddressToVirtual
	BlpLdrProtocol.memory.physicalListToVirtual = blPhysicalListToVirtual
	BlpLdrProtocol.memory.setMemory = rtlSetMemory
	BlpLdrProtocol.memory.zeroMemory = rtlZeroMemory
	BlpLdrProtocol.protocol.close = blCloseProtocol
	BlpLdrProtocol.protocol.getModulesList = blGetModulesList
	BlpLdrProtocol.protocol.install = blInstallProtocol
	BlpLdrProtocol.protocol.locateHandles = blLocateProtocolHandles
	BlpLdrProtocol.protocol.open = blOpenProtocol
	BlpLdrProtocol.protocol.openHandle = blOpenProtocolHandle
	BlpLdrProtocol.tui.displayErrorDialog = blDisplayErrorDialog
	BlpLdrProtocol.tui.displayInfoDialog = blDisplayInfoDialog
	BlpLdrProtocol.tui.displayInputDialog = blDisplayInputDialog
	BlpLdrProtocol.tui.displayProgressDialog = blDisplayProgressDialog
	BlpLdrProtocol.tui.updateProgressBar = blUpdateProgressBar
	BlpLdrProtocol.util.enterFirmwareSetup = blEnterFirmwareSetup
	BlpLdrProtocol.util.exitBootServices = blExitBootServices
	BlpLdrProtocol.util.getConfigurationTable = blGetConfigurationTable
	BlpLdrProtocol.util.getEfiVariable = blGetEfiVariable
	BlpLdrProtocol.util.getRandomValue = blGetRandomValue
	BlpLdrProtocol.util.getSecureBootStatus = blGetSecureBootStatus
	BlpLdrProtocol.util.initializeEntropy = blInitializeEntropy
	BlpLdrProtocol.util.loadEfiImage = blLoadEfiImage
	BlpLdrProtocol.util.rebootSystem = blRebootSystem
	BlpLdrProtocol.util.setEfiVariable = blSetEfiVariable
	BlpLdrProtocol.util.shutdownSystem = blShutdownSystem
	BlpLdrProtocol.util.sleepExecution = blSleepExecution
	BlpLdrProtocol.util.startEfiImage = blStartEfiImage
	BlpLdrProtocol.util.waitForEfiEvent = blWaitForEfiEvent
	blDebugPrint("Registering XT loader protocol\n")
	return blInstallProtocol(blpLdrProtocol, guid)
}
