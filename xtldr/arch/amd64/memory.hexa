/// Maps boot loader related code and builds page map.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param SelfMapAddress
///        Supplies a virtual address of the page tables.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blBuildPageMap(pageMap PXTBL_PAGE_MAPPING, selfMapAddress ULONG_PTR) {
	let listEntry = new ByValue<PLIST_ENTRY>()

	let modulesList = new ByValue<PLIST_ENTRY>()

	let modulesListEntry = new ByValue<PLIST_ENTRY>()

	let mapping = new ByValue<PXTBL_MEMORY_MAPPING>()

	let moduleInfo = new ByValue<PXTBL_MODULE_INFO>()

	var address EFI_PHYSICAL_ADDRESS
	var status EFI_STATUS
	status = blAllocateMemoryPages(1, address)
	if status != (9223372036854775808 & 0) {
		return status

	}

	pageMap.ptePointer = address as! UINT_PTR as! PVOID
	rtlZeroMemory(pageMap.ptePointer, 4096)
	status = blpSelfMapPml(pageMap, selfMapAddress)
	if status != (9223372036854775808 & 0) {
		return status

	}

	modulesList = blGetModulesList()
	modulesListEntry = modulesList.flink
	while modulesListEntry != modulesList {
		moduleInfo = (((modulesListEntry) as! Char * - [unknown clang ast] resolve OffsetOfExpr) as! XTBL_MODULE_INFO *)
		status = blMapVirtualMemory(pageMap, moduleInfo.moduleBase, moduleInfo.moduleBase, (((moduleInfo.moduleSize) >> 12) + ((((moduleInfo.moduleSize) & 4095)) ? 1 : 0)), loaderFirmwareTemporary)
		if status != (9223372036854775808 & 0) {
			return status

		}

		modulesListEntry = modulesListEntry.flink

	}

	if BlpStatus.loaderBase and BlpStatus.loaderSize {
		status = blMapVirtualMemory(pageMap, BlpStatus.loaderBase, BlpStatus.loaderBase, (((BlpStatus.loaderSize) >> 12) + ((((BlpStatus.loaderSize) & 4095)) ? 1 : 0)), loaderFirmwareTemporary)
		if status != (9223372036854775808 & 0) {
			return status

		}


	} else {
		return (9223372036854775808 | 24)

	}

	blDebugPrint("Mapping and dumping EFI memory:\n")
	listEntry = pageMap.memoryMap.flink
	while listEntry != pageMap.memoryMap {
		mapping = (((listEntry) as! Char * - [unknown clang ast] resolve OffsetOfExpr) as! XTBL_MEMORY_MAPPING *)
		if mapping.virtualAddress {
			blDebugPrint("   Type=%02lu, PhysicalBase=%.16P, VirtualBase=%.16P, Pages=%llu\n", mapping.memoryType, mapping.physicalAddress, mapping.virtualAddress, mapping.numberOfPages)
			status = blMapPage(pageMap, mapping.virtualAddress as! UINT_PTR, mapping.physicalAddress as! UINT_PTR, mapping.numberOfPages)
			if status != (9223372036854775808 & 0) {
				return status

			}


		}

		listEntry = listEntry.flink

	}

	return (9223372036854775808 & 0)
}

/// Does the actual virtual memory mapping.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param VirtualAddress
///        Supplies a virtual address of the mapping.
/// 
/// @param PhysicalAddress
///        Supplies a physical address of the mapping.
/// 
/// @param NumberOfPages
///        Supplies a number of the pages of the mapping.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blMapPage(pageMap PXTBL_PAGE_MAPPING, virtualAddress UINT_PTR, physicalAddress UINT_PTR, numberOfPages UINT) {
	var pml1Entry SIZE_T
	var pml2Entry SIZE_T
	var pml3Entry SIZE_T
	var pml4Entry SIZE_T
	var pml5Entry SIZE_T
	let pml1 = new ByValue<PHARDWARE_PTE>()

	let pml2 = new ByValue<PHARDWARE_PTE>()

	let pml3 = new ByValue<PHARDWARE_PTE>()

	let pml4 = new ByValue<PHARDWARE_PTE>()

	let pml5 = new ByValue<PHARDWARE_PTE>()

	var pageFrameNumber SIZE_T
	var status EFI_STATUS
	pageFrameNumber = physicalAddress >> 12
	while numberOfPages > 0 {
		pml5Entry = (virtualAddress & (511 as! ULONGLONG << 48)) >> 48
		pml4Entry = (virtualAddress & (511 as! ULONGLONG << 39)) >> 39
		pml3Entry = (virtualAddress & (511 as! ULONGLONG << 30)) >> 30
		pml2Entry = (virtualAddress & (511 as! ULONGLONG << 21)) >> 21
		pml1Entry = (virtualAddress & (511 as! ULONGLONG << 12)) >> 12
		if pageMap.pageMapLevel == 5 {
			pml5 = ((pageMap.ptePointer) as! PHARDWARE_PTE)
			status = blpGetNextPageTable(pageMap, pml5, pml5Entry, pml4)
			if status != (9223372036854775808 & 0) {
				return status

			}


		} else {
			pml4 = ((pageMap.ptePointer) as! PHARDWARE_PTE)

		}

		status = blpGetNextPageTable(pageMap, pml4, pml4Entry, pml3)
		if status != (9223372036854775808 & 0) {
			return status

		}

		status = blpGetNextPageTable(pageMap, pml3, pml3Entry, pml2)
		if status != (9223372036854775808 & 0) {
			return status

		}

		status = blpGetNextPageTable(pageMap, pml2, pml2Entry, pml1)
		if status != (9223372036854775808 & 0) {
			return status

		}

		pml1[pml1Entry].pageFrameNumber = pageFrameNumber
		pml1[pml1Entry].valid = 1
		pml1[pml1Entry].writable = 1
		virtualAddress += 4096
		pageFrameNumber++		numberOfPages--
	}

	return (9223372036854775808 & 0)
}

/// Creates a recursive self mapping for all PML levels.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param SelfMapAddress
///        Supplies a virtual address of the page tables.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpSelfMapPml(pageMap PXTBL_PAGE_MAPPING, selfMapAddress ULONG_PTR) {
	var pmlIndex ULONGLONG
	if pageMap.pageMapLevel == 5 {
		blDebugPrint("PML5 self-mapping not supported yet!\n")
		return (9223372036854775808 | 3)

	} else {
		pmlIndex = (selfMapAddress >> 39) & 511
		(pageMap.ptePointer as! PHARDWARE_PTE)[pmlIndex].pageFrameNumber = pageMap.ptePointer as! UINT_PTR / 4096
		(pageMap.ptePointer as! PHARDWARE_PTE)[pmlIndex].valid = 1
		(pageMap.ptePointer as! PHARDWARE_PTE)[pmlIndex].writable = 1

	}

	return (9223372036854775808 & 0)
}
