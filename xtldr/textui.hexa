/// Displays a simple TUI-based boot menu.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayBootMenu() {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let menuEntries = new ByValue<PXTBL_BOOTMENU_ITEM>()

	var index ULONG
	var numberOfEntries ULONG
	var highligtedEntryId ULONG
	var eventIndex UINT_PTR
	var events EFI_EVENT[2]
	let key = new ByValue<EFI_INPUT_KEY>()

	var timerEvent EFI_EVENT
	var status EFI_STATUS
	var timeOut LONG
	var timeOutString PWCHAR
	status = blInitializeBootMenuList(menuEntries, numberOfEntries, highligtedEntryId)
	if status != (9223372036854775808 & 0) {
		return

	}

	timeOutString = blGetConfigValue("TIMEOUT")
	timeOut = -1
	if timeOutString != (0 as! PVOID) {
		timeOut = 0
		while timeOutString[0] >= 48/* "0" */ and timeOutString[0] <= 57/* "9" */ {
			timeOut *= 10
			timeOut += timeOutString[0] - 48/* "0" */
			timeOutString++
		}


	}

	while tRUE {
		blpDrawBootMenu(handle)
		if numberOfEntries > 0 {
			if numberOfEntries > Handle.height - 2 {
				numberOfEntries = Handle.height - 2

			}

			index = 0
			while index < numberOfEntries {
				blpDrawBootMenuEntry(handle, menuEntries[index].entryName, index, index == highligtedEntryId)
				index

			}


		} else {
			blDisplayErrorDialog("XTLDR", "No boot menu entries found in the configuration. Falling back to shell.")
			return

		}

		status = efiSystemTable.bootServices.createEvent(2147483648, 8, (0 as! PVOID), (0 as! PVOID), timerEvent)
		if status == (9223372036854775808 & 0) {
			status = efiSystemTable.bootServices.setTimer(timerEvent, timerPeriodic, 10000000)

		}

		if status != (9223372036854775808 & 0) {
			timeOut = -1

		}

		events[0] = efiSystemTable.conIn.waitForKey
		events[1] = timerEvent
		efiSystemTable.conIn.reset(efiSystemTable.conIn, fALSE)
		while tRUE {
			blWaitForEfiEvent(2, events, eventIndex)
			if eventIndex == 0 {
				if timeOut != -1 {
					timeOut = -1
					efiSystemTable.bootServices.setTimer(timerEvent, timerCancel, 0)
					blClearConsoleLine(Handle.posY + Handle.height + 4)

				}

				blReadKeyStroke(key)
				if Key.scanCode == 3 or Key.unicodeChar == 13 {
					blSetConsoleAttributes(Handle.dialogColor | Handle.textColor)
					blClearConsoleLine(Handle.posY + Handle.height + 4)
					blSetCursorPosition(4, Handle.posY + Handle.height + 4)
					blConsolePrint("Booting '%S' now...\n", menuEntries[highligtedEntryId].entryName)
					status = blInvokeBootProtocol(menuEntries[highligtedEntryId].shortName, menuEntries[highligtedEntryId].options)
					if status != (0 as! XTSTATUS) {
						blDebugPrint("ERROR: Failed to boot '%S' (Status Code: 0x%zX)\n", menuEntries[highligtedEntryId].entryName, status)
						blDisplayErrorDialog("XTLDR", "Failed to startup the selected Operating System.")

					}

					break
				} else {
					Key.scanCode == 1

					{
						highligtedEntryId > 0

						{
							--highligtedEntryId
							blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId + 1].entryName, highligtedEntryId + 1, fALSE)
							blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId].entryName, highligtedEntryId, tRUE)

						}


					}

					if Key.scanCode == 2 {
						if highligtedEntryId < numberOfEntries - 1 {
							highligtedEntryId++							blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId - 1].entryName, highligtedEntryId - 1, fALSE)
							blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId].entryName, highligtedEntryId, tRUE)

						}


					} else {
						Key.scanCode == 9

						{
							highligtedEntryId != 0

							{
								blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId].entryName, highligtedEntryId, fALSE)
								blpDrawBootMenuEntry(handle, menuEntries[0].entryName, 0, tRUE)
								highligtedEntryId = 0

							}


						}

						if Key.scanCode == 10 {
							if highligtedEntryId != numberOfEntries - 1 {
								blpDrawBootMenuEntry(handle, menuEntries[highligtedEntryId].entryName, highligtedEntryId, fALSE)
								blpDrawBootMenuEntry(handle, menuEntries[numberOfEntries - 1].entryName, numberOfEntries - 1, tRUE)
								highligtedEntryId = numberOfEntries - 1

							}


						} else {
							Key.scanCode == 11

							{
								blDisplayInfoDialog("XTLDR", "XTLDR, the XTOS Boot Loader for UEFI and EFI-based machines.\n \nUse arrow keys (Up/Down) to change the highlighted entry and\nPgUp/PgDown keys to jump to the first/last position.\n \nPress ENTER key to boot the highlighted boot menu entry.\nPress 'e' key to edit the highlighted menu entry.\nPress 's' key to exit into XTLDR shell (enters advanced mode).\n \nF1 shows this help, F10 reboots into UEFI firmware interface,\nF11 reboots the machine and F12 turns it off.\n \n \nXTLDR is a part of the ExectOS Operating System.\nVisit https://exectos.eu.org/ for more information.")

							}

							if Key.scanCode == 20 {
								blEnterFirmwareSetup()
								blDisplayErrorDialog("XTLDR", "Reboot into firmware setup interface not supported!")
								break
							} else {
								Key.scanCode == 21

								{
									blRebootSystem()
									blDisplayErrorDialog("XTLDR", "Failed to reboot the machine!")

								}

								if Key.scanCode == 22 {
									blShutdownSystem()
									blDisplayErrorDialog("XTLDR", "Failed to shutdown the machine!")
									break
								} else {
									Key.unicodeChar == 101

									{
										blDisplayErrorDialog("XTLDR", "Editing boot menu entries is not implemented yet!")

									}

									if Key.unicodeChar == 115 {
										return

									}


								}


							}


						}


					}


				}


			} else {
				if timeOut > 0 {
					blSetConsoleAttributes(Handle.dialogColor | Handle.textColor)
					blClearConsoleLine(Handle.posY + Handle.height + 4)
					blSetCursorPosition(4, Handle.posY + Handle.height + 4)
					blConsolePrint("The highlighted position will be booted automatically in %ld seconds.", timeOut)
					timeOut--
				} else {
					timeOut == 0

					{
						blSetConsoleAttributes(Handle.dialogColor | Handle.textColor)
						blClearConsoleLine(Handle.posY + Handle.height + 4)
						blSetCursorPosition(4, Handle.posY + Handle.height + 4)
						blConsolePrint("Booting '%S' now...\n", menuEntries[highligtedEntryId].entryName)
						timeOut = -1
						status = blInvokeBootProtocol(menuEntries[highligtedEntryId].shortName, menuEntries[highligtedEntryId].options)
						status != (0 as! XTSTATUS)

						{
							blDebugPrint("ERROR: Failed to boot '%S' (Status Code: 0x%zX)\n", menuEntries[highligtedEntryId].entryName, status)
							blDisplayErrorDialog("XTLDR", "Failed to startup the selected Operating System.")

						}


					}


				}


			}


		}


	}

}

/// Displays a red error dialog box with the specified caption and message.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayErrorDialog(caption PWCHAR, message PWCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let key = new ByValue<EFI_INPUT_KEY>()

	var index UINT_PTR
	Handle.attributes = 2 | 4
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	Key.scanCode = 0
	Key.unicodeChar = 0
	while Key.scanCode != 23 and Key.unicodeChar != 13 {
		blWaitForEfiEvent(1, efiSystemTable.conIn.waitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()

	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayInfoDialog(caption PWCHAR, message PWCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let key = new ByValue<EFI_INPUT_KEY>()

	var index UINT_PTR
	Handle.attributes = 1 | 4
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	Key.scanCode = 0
	Key.unicodeChar = 0
	while Key.scanCode != 23 and Key.unicodeChar != 13 {
		blWaitForEfiEvent(1, efiSystemTable.conIn.waitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()

	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message and an input field.
/// 
/// @param Caption
///        Specifies a caption string put on the dialog box.
/// 
/// @param Message
///        Specifies a message string put on the dialog box.
/// 
/// @param InputFieldText
///        Specifies a pointer to the input field text that will be edited.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayInputDialog(caption PWCHAR, message PWCHAR, inputFieldText PWCHAR *) {
	var inputFieldLength SIZE_T
	var textCursorPosition SIZE_T
	var textIndex SIZE_T
	var textPosition SIZE_T
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	var inputFieldBuffer PWCHAR
	var bufferLength SIZE_T
	let key = new ByValue<EFI_INPUT_KEY>()

	var status EFI_STATUS
	var index UINT_PTR
	Handle.attributes = 1 | 16 | 8
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	blpDrawDialogInputField(handle, inputFieldText[0])
	Key.scanCode = 0
	Key.unicodeChar = 0
	bufferLength = rtlWideStringLength(inputFieldText[0], 0)
	status = blAllocateMemoryPool(bufferLength * sizeOf<Unsigned long long>(), inputFieldBuffer as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		blDisplayErrorDialog("XTLDR", "Failed to allocate memory for input field buffer.")
		return

	}

	rtlCopyMemory(inputFieldBuffer, inputFieldText[0], bufferLength * sizeOf<Unsigned long long>())
	inputFieldBuffer[bufferLength] = 0/* "\u0000" */
	inputFieldLength = bufferLength
	if inputFieldLength > Handle.width - 8 {
		inputFieldLength = Handle.width - 8

	}

	textPosition = 0
	blSetCursorPosition(Handle.posX + 4 + textPosition, Handle.posY + Handle.height - 4)
	while tRUE {
		blWaitForEfiEvent(1, efiSystemTable.conIn.waitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()
		if Key.scanCode == 23 {
			break
		} else {
			Key.unicodeChar == 9

			{
				Handle.attributes ^= (16 | 32)
				Handle.attributes ^= (4 | 8)

			}

			if Key.scanCode == 3 {
				if Handle.attributes & 16 and textPosition < inputFieldLength {
					textPosition++
				}


			} else {
				Key.scanCode == 4

				{
					Handle.attributes & 16 && textPosition > 0

					{
						--textPosition

					}


				}

				if Key.scanCode == 5 {
					if Handle.attributes & 16 {
						textPosition = 0

					}


				} else {
					Key.scanCode == 6

					{
						Handle.attributes & 16

						{
							textPosition = inputFieldLength

						}


					}

					if Key.scanCode == 8 {
						if Handle.attributes & 16 {
							if inputFieldLength > 0 and textPosition < inputFieldLength {
								rtlMoveMemory(inputFieldBuffer + textPosition, inputFieldBuffer + textPosition + 1, (inputFieldLength - textPosition) * sizeOf<Unsigned long long>())
								inputFieldLength--								inputFieldBuffer[inputFieldLength] = 0

							}


						}


					} else {
						Key.unicodeChar == 8

						{
							Handle.attributes & 16

							{
								inputFieldLength > 0 and textPosition > 0 && textPosition <= inputFieldLength

								{
									--textPosition
									rtlMoveMemory(inputFieldBuffer + textPosition, inputFieldBuffer + textPosition + 1, (inputFieldLength - textPosition) * sizeOf<Unsigned long long>())
									--inputFieldLength
									inputFieldBuffer[inputFieldLength] = 0

								}


							}


						}

						if Key.unicodeChar == 13 {
							inputFieldText[0] = inputFieldBuffer
							break
						} else {
							if Handle.attributes & 16 and Key.unicodeChar != 0 {
								rtlMoveMemory(inputFieldBuffer + textPosition + 1, inputFieldBuffer + textPosition, (inputFieldLength - textPosition) * sizeOf<Unsigned long long>())
								inputFieldBuffer[textPosition] = Key.unicodeChar
								textPosition++								inputFieldLength++								inputFieldBuffer[inputFieldLength] = 0

							}


						}


					}


				}


			}


		}

		if textPosition > (Handle.width - 9) {
			textIndex = textPosition - (Handle.width - 9)
			textCursorPosition = Handle.width - 9

		} else {
			textIndex = 0
			textCursorPosition = textPosition

		}

		blpDrawDialogButton(handle)
		blpDrawDialogInputField(handle, inputFieldBuffer[textIndex])
		if Handle.attributes & 16 {
			blSetCursorPosition(Handle.posX + 4 + textCursorPosition, Handle.posY + Handle.height - 4)

		}


	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message and a progress bar.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @param Percentage
///        Specifies the percentage progress of the progress bar.
/// 
/// @return This routine returns a dialog box handle needed to update the progress bar.
/// 
/// @since XT 1.0
fun blDisplayProgressDialog(caption PWCHAR, message PWCHAR, percentage UCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	Handle.attributes = 1 | 64
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogProgressBar(handle, percentage)
	return handle
}

/// Updates the progress bar on the dialog box.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a new message that will be put on the dialog box, while updating the progress bar.
/// 
/// @param Percentage
///        Specifies the new percentage progress of the progress bar.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blUpdateProgressBar(handle PXTBL_DIALOG_HANDLE, message PWCHAR, percentage UCHAR) {
	if message != (0 as! PVOID) {
		blpDrawDialogMessage(handle, message)

	}

	blpDrawDialogProgressBar(handle, percentage)
}

/// Determines dialog box size based on enabled components and message length.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a pointer to the message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDetermineDialogBoxSize(handle PXTBL_DIALOG_HANDLE, message PWCHAR) {
	var width UINT_PTR
	var height UINT_PTR
	var lineLength UINT_PTR
	var index SIZE_T
	var messageLength SIZE_T
	var attributes UCHAR
	var mask ULONG
	height = 4
	width = 36
	lineLength = 0
	mask = 1
	attributes = handle.attributes
	while mask {
		switch attributes & mask {
			case 4:
				8
				height += 1
			break
			case 16:
				32

				case 64:
					height += 2
			break
		}

		attributes &= ~mask
		mask <<= 1

	}

	if handle.attributes & (16 | 32) {
		width = 100

	}

	messageLength = rtlWideStringLength(message, 0)
	index = 0
	while index < messageLength {
		if message[index] == 10/* "\n" */ or index == messageLength - 1 {
			if lineLength > width {
				width = lineLength

			}

			height++			lineLength = 0

		} else {
			lineLength++
		}

		index

	}

	width += 4
	blQueryConsoleMode(handle.resX, handle.resY)
	if width > 100 {
		width = 100

	}

	if width > (handle.resX - 2) {
		width = handle.resX - 2

	}

	if height > (handle.resY - 2) {
		height = handle.resY - 2

	}

	handle.posX = (handle.resX - width) / 2
	handle.posY = (handle.resY - height) / 2
	handle.width = width
	handle.height = height
}

/// Draws a text UI-based boot menu.
/// 
/// @param Handle
///        Supplies a pointer to the boot menu handle.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawBootMenu(handle PXTBL_DIALOG_HANDLE) {
	blQueryConsoleMode(handle.resX, handle.resY)
	handle.attributes = 0
	handle.dialogColor = 0
	handle.textColor = 7
	handle.posX = 3
	handle.posY = 3
	handle.width = handle.resX - 6
	handle.height = handle.resY - 10
	blSetConsoleAttributes(handle.dialogColor | handle.textColor)
	blClearConsoleScreen()
	blDisableConsoleCursor()
	if 1 {
		blSetCursorPosition((handle.resX - 44) / 2, 1)
		blConsolePrint("XTLDR Boot Loader v%d.%d (%s-%s)\n", 0, 1, "20240622", "c2db94125d")

	} else {
		blSetCursorPosition((handle.resX - 22) / 2, 1)
		blConsolePrint("XTLDR Boot Loader v%d.%d\n", 0, 1)

	}

	blpDrawDialogBox(handle, (0 as! PVOID), (0 as! PVOID))
	blSetCursorPosition(0, handle.posY + handle.height)
	blSetConsoleAttributes(0 | 7)
	blConsolePrint("    Use cursors to change the selection. Press ENTER key to boot the chosen\n    Operating System, 'e' to edit it before booting or 's' for XTLDR shell.\n    Additional help available after pressing F1 key.")
}

/// Draws boot menu entry at the specified position.
/// 
/// @param Handle
///        Supplies a pointer to the boot menu handle.
/// 
/// @param MenuEntry
///        Supplies a pointer to the buffer containing a menu entry name.
/// 
/// @param Position
///        Specifies entry position on the list in the boot menu.
/// 
/// @param Highlighted
///        Specifies whether this entry should be highlighted or not.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawBootMenuEntry(handle PXTBL_DIALOG_HANDLE, menuEntry PWCHAR, position UINT, highlighted BOOLEAN) {
	var index UINT
	blSetCursorPosition(5, 4 + position)
	if highlighted {
		blSetConsoleAttributes(112 | 0)

	} else {
		blSetConsoleAttributes(0 | 7)

	}

	index = 0
	while index < handle.width - 4 {
		blConsolePrint(" ")
		index

	}

	blSetCursorPosition(5, 4 + position)
	blConsolePrint("%S\n", menuEntry)
}

/// Draws dialog box with caption and message.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Caption
///        Specifies a caption string put on the dialog box.
/// 
/// @param Message
///        Specifies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogBox(handle PXTBL_DIALOG_HANDLE, caption PWCHAR, message PWCHAR) {
	var boxLine WCHAR[100]
	var captionLength SIZE_T
	var posX UINT_PTR
	var posY UINT_PTR
	if handle.attributes & 2 {
		handle.dialogColor = 64
		handle.textColor = 15

	} else {
		handle.attributes & 1

		{
			handle.dialogColor = 16
			handle.textColor = 15

		}


	}

	blSetConsoleAttributes(handle.dialogColor | 15)
	posY = handle.posY
	while posY < handle.posY + handle.height {
		blSetCursorPosition(handle.posX, posY)
		if posY == handle.posY {
			boxLine[0] = 9484
			if caption != (0 as! PVOID) {
				captionLength = rtlWideStringLength(caption, 0)
				boxLine[1] = 9508
				posX = 2
				while posX < captionLength + 4 {
					boxLine[posX] = 32/* " " */
					posX

				}

				boxLine[captionLength + 4] = 9500

			} else {
				captionLength = -4

			}

			posX = captionLength + 5
			while posX < handle.width - 1 {
				boxLine[posX] = 9472
				posX

			}

			boxLine[handle.width - 1] = 9488

		} else {
			posY == handle.posY + handle.height - 1

			{
				boxLine[0] = 9492
				posX = 1
				[unknown clang ast] CompoundStmt 
				posX < handle.width - 1
				posX++
				{
					boxLine[posX] = 9472

				}

				boxLine[handle.width - 1] = 9496

			}


			{
				boxLine[0] = 9474
				posX = 1
				[unknown clang ast] CompoundStmt 
				posX < handle.width - 1
				posX++
				{
					boxLine[posX] = 32/* " " */

				}

				boxLine[handle.width - 1] = 9474

			}


		}

		boxLine[handle.width] = 0
		blConsoleWrite(boxLine)
		posY

	}

	if caption != (0 as! PVOID) {
		blSetCursorPosition(handle.posX + 3, handle.posY)
		blConsolePrint("%S", caption)

	}

	if message != (0 as! PVOID) {
		blpDrawDialogMessage(handle, message)

	}

}

/// Draws an active or inactive button in the dialog box, depending on the attributes.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogButton(handle PXTBL_DIALOG_HANDLE) {
	var buttonColor ULONG
	var textColor ULONG
	if handle.attributes & 4 {
		if handle.attributes & 2 {
			buttonColor = 96
			textColor = 15

		} else {
			buttonColor = 48
			textColor = 15

		}


	} else {
		buttonColor = 112
		textColor = 0

	}

	blDisableConsoleCursor()
	blSetConsoleAttributes(buttonColor | textColor)
	blSetCursorPosition(handle.resX / 2 - 4, handle.posY + handle.height - 2)
	blConsolePrint("[  OK  ]")
}

/// Draws an active or inactive input field in the dialog box, depending on the attributes.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param InputFieldText
///        Supplies a pointer to the wide char string that will be displayed in the input field.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogInputField(handle PXTBL_DIALOG_HANDLE, inputFieldText PWCHAR) {
	var inputField WCHAR[100]
	var inputColor ULONG
	var textColor ULONG
	var index UINT_PTR
	var position UINT_PTR
	var length SIZE_T
	if handle.attributes & 16 {
		if handle.attributes & 2 {
			inputColor = 96
			textColor = 15

		} else {
			inputColor = 48
			textColor = 15

		}


	} else {
		inputColor = 112
		textColor = 0

	}

	blSetConsoleAttributes(inputColor | textColor)
	position = ((handle.attributes & (4 | 8))) ? 4 : 3
	blSetCursorPosition(handle.posX + 4, handle.posY + handle.height - position)
	index = 0
	while index < handle.width - 8 {
		inputField[index] = 32/* " " */
		index

	}

	blDisableConsoleCursor()
	blConsoleWrite(inputField)
	length = rtlWideStringLength(inputFieldText, 0)
	if length > (handle.width - 9) {
		length = handle.width - 9

	}

	index = 0
	while index < length {
		inputField[index] = inputFieldText[index]
		index

	}

	inputField[handle.width] = 0
	blSetCursorPosition(handle.posX + 4, handle.posY + handle.height - position)
	blConsoleWrite(inputField)
	if handle.attributes & 16 {
		blEnableConsoleCursor()

	}

}

/// Draws a message on the dialog box specified by the handle.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a message that will be displayed on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogMessage(handle PXTBL_DIALOG_HANDLE, message PWCHAR) {
	var msg PWCHAR
	var msgLine PWCHAR
	var lastMsgLine PWCHAR
	var index SIZE_T
	var length SIZE_T
	var lineLength SIZE_T
	var status EFI_STATUS
	var line ULONG
	length = rtlWideStringLength(message, 0)
	status = blAllocateMemoryPool(length * sizeOf<Unsigned long long>(), msg as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return

	}

	rtlCopyMemory(msg, message, length * sizeOf<Unsigned long long>())
	msg[length] = 0
	msgLine = rtlTokenizeWideString(msg, "\n", lastMsgLine)
	line = 0
	while msgLine {
		lineLength = rtlWideStringLength(msgLine, 0)
		blSetCursorPosition(handle.posX + 2, handle.posY + 2 + line)
		blSetConsoleAttributes(handle.dialogColor | handle.textColor)
		blConsolePrint("%S", msgLine)
		if lineLength < handle.width - 4 {
			index = lineLength
			while index < handle.width - 4 {
				blConsolePrint(" ")
				index

			}


		}

		msgLine = rtlTokenizeWideString((0 as! PVOID), "\n", lastMsgLine)
		line++
	}

}

/// Draws a progress bar component in the dialog box.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Percentage
///        Specifies the percentage progress of the progress bar.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogProgressBar(handle PXTBL_DIALOG_HANDLE, percentage UCHAR) {
	var index UINT_PTR
	var progressLength UINT_PTR
	var progressBarLength UINT_PTR
	var progressBar WCHAR[100]
	var position UINT_PTR
	progressBarLength = handle.width - 8
	progressLength = (progressBarLength * percentage) / 100
	blSetConsoleAttributes(14)
	position = ((handle.attributes & (4 | 8))) ? 4 : 3
	blSetCursorPosition(handle.posX + 4, handle.posY + handle.height - position)
	index = 0
	while index < progressBarLength {
		if index < progressLength {
			progressBar[index] = 9608

		} else {
			progressBar[index] = 9617

		}

		index

	}

	progressBar[index] = 0
	blDisableConsoleCursor()
	blConsoleWrite(progressBar)
}
