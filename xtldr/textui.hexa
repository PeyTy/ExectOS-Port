// Hexa 2024 from clang 15.0.3
/// Displays a simple TUI-based boot menu.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayBootMenu() {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let menuEntries = new ByValue<PXTBL_BOOTMENU_ITEM>()

	var index ULONG
	var numberOfEntries ULONG
	var highligtedEntryId ULONG
	var eventIndex UINT_PTR
	var events EFI_EVENT[2]
	let key = new ByValue<EFI_INPUT_KEY>()

	var timerEvent EFI_EVENT
	var status EFI_STATUS
	var timeOut LONG
	var timeOutString PWCHAR
	status = blInitializeBootMenuList(menuEntries, numberOfEntries, highligtedEntryId)
	if status != (9223372036854775808 & 0) {
		return ??

	}

	timeOutString = blGetConfigValue("TIMEOUT")
	timeOut = -1
	if timeOutString != (0 as! PVOID) {
		timeOut = 0
		while *timeOutString >= ???? resolve CharacterLiteral and *timeOutString <= ???? resolve CharacterLiteral {
			??? CompoundStmt CompoundAssignOperator
			??? CompoundStmt CompoundAssignOperator
			??? CompoundStmt UnaryOperator

		}


	}

	while tRUE {
		blpDrawBootMenu(handle)
		if numberOfEntries > 0 {
			if numberOfEntries > Handle.Height - 2 {
				numberOfEntries = Handle.Height - 2

			}

			??? CompoundStmt ForStmt

		} else {
			blDisplayErrorDialog("XTLDR", "No boot menu entries found in the configuration. Falling back to shell.")
			return ??

		}

		status = efiSystemTable.BootServices.CreateEvent(2147483648, 8, (0 as! PVOID), (0 as! PVOID), timerEvent)
		if status == (9223372036854775808 & 0) {
			status = efiSystemTable.BootServices.SetTimer(timerEvent, timerPeriodic, 10000000)

		}

		if status != (9223372036854775808 & 0) {
			timeOut = -1

		}

		???? resolve ArraySubscriptExpr = efiSystemTable.ConIn.WaitForKey
		???? resolve ArraySubscriptExpr = timerEvent
		efiSystemTable.ConIn.Reset(efiSystemTable.ConIn, fALSE)
		while tRUE {
			blWaitForEfiEvent(2, events, eventIndex)
			if eventIndex == 0 {
				if timeOut != -1 {
					timeOut = -1
					efiSystemTable.BootServices.SetTimer(timerEvent, timerCancel, 0)
					blClearConsoleLine(Handle.PosY + Handle.Height + 4)

				}

				blReadKeyStroke(key)
				if Key.ScanCode == 3 or Key.UnicodeChar == 13 {
					blSetConsoleAttributes(Handle.DialogColor | Handle.TextColor)
					blClearConsoleLine(Handle.PosY + Handle.Height + 4)
					blSetCursorPosition(4, Handle.PosY + Handle.Height + 4)
					blConsolePrint("Booting '%S' now...\n", ???? resolve ArraySubscriptExpr.EntryName)
					status = blInvokeBootProtocol(???? resolve ArraySubscriptExpr.ShortName, ???? resolve ArraySubscriptExpr.Options)
					if status != (0 as! XTSTATUS) {
						blDebugPrint("ERROR: Failed to boot '%S' (Status Code: 0x%zX)\n", ???? resolve ArraySubscriptExpr.EntryName, status)
						blDisplayErrorDialog("XTLDR", "Failed to startup the selected Operating System.")

					}

					??? CompoundStmt BreakStmt

				} else {
					??? CompoundStmt CompoundStmt
					if Key.ScanCode == 2 {
						if highligtedEntryId < numberOfEntries - 1 {
							??? CompoundStmt UnaryOperator
							blpDrawBootMenuEntry(handle, ???? resolve ArraySubscriptExpr.EntryName, highligtedEntryId - 1, fALSE)
							blpDrawBootMenuEntry(handle, ???? resolve ArraySubscriptExpr.EntryName, highligtedEntryId, tRUE)

						}


					} else {
						??? CompoundStmt CompoundStmt
						if Key.ScanCode == 10 {
							if highligtedEntryId != numberOfEntries - 1 {
								blpDrawBootMenuEntry(handle, ???? resolve ArraySubscriptExpr.EntryName, highligtedEntryId, fALSE)
								blpDrawBootMenuEntry(handle, ???? resolve ArraySubscriptExpr.EntryName, numberOfEntries - 1, tRUE)
								highligtedEntryId = numberOfEntries - 1

							}


						} else {
							??? CompoundStmt CompoundStmt
							if Key.ScanCode == 20 {
								blEnterFirmwareSetup()
								blDisplayErrorDialog("XTLDR", "Reboot into firmware setup interface not supported!")
								??? CompoundStmt BreakStmt

							} else {
								??? CompoundStmt CompoundStmt
								if Key.ScanCode == 22 {
									blShutdownSystem()
									blDisplayErrorDialog("XTLDR", "Failed to shutdown the machine!")
									??? CompoundStmt BreakStmt

								} else {
									??? CompoundStmt CompoundStmt
									if Key.UnicodeChar == 115 {
										return ??

									}


								}


							}


						}


					}


				}


			} else {
				if timeOut > 0 {
					blSetConsoleAttributes(Handle.DialogColor | Handle.TextColor)
					blClearConsoleLine(Handle.PosY + Handle.Height + 4)
					blSetCursorPosition(4, Handle.PosY + Handle.Height + 4)
					blConsolePrint("The highlighted position will be booted automatically in %ld seconds.", timeOut)
					??? CompoundStmt UnaryOperator

				} else {
					??? CompoundStmt CompoundStmt

				}


			}


		}


	}

}

/// Displays a red error dialog box with the specified caption and message.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayErrorDialog(caption PWCHAR, message PWCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let key = new ByValue<EFI_INPUT_KEY>()

	var index UINT_PTR
	Handle.Attributes = 2 | 4
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	Key.ScanCode = 0
	Key.UnicodeChar = 0
	while Key.ScanCode != 23 and Key.UnicodeChar != 13 {
		blWaitForEfiEvent(1, efiSystemTable.ConIn.WaitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()

	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayInfoDialog(caption PWCHAR, message PWCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	let key = new ByValue<EFI_INPUT_KEY>()

	var index UINT_PTR
	Handle.Attributes = 1 | 4
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	Key.ScanCode = 0
	Key.UnicodeChar = 0
	while Key.ScanCode != 23 and Key.UnicodeChar != 13 {
		blWaitForEfiEvent(1, efiSystemTable.ConIn.WaitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()

	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message and an input field.
/// 
/// @param Caption
///        Specifies a caption string put on the dialog box.
/// 
/// @param Message
///        Specifies a message string put on the dialog box.
/// 
/// @param InputFieldText
///        Specifies a pointer to the input field text that will be edited.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisplayInputDialog(caption PWCHAR, message PWCHAR, inputFieldText PWCHAR *) {
	var inputFieldLength SIZE_T
	var textCursorPosition SIZE_T
	var textIndex SIZE_T
	var textPosition SIZE_T
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	var inputFieldBuffer PWCHAR
	var bufferLength SIZE_T
	let key = new ByValue<EFI_INPUT_KEY>()

	var status EFI_STATUS
	var index UINT_PTR
	Handle.Attributes = 1 | 16 | 8
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogButton(handle)
	blpDrawDialogInputField(handle, *inputFieldText)
	Key.ScanCode = 0
	Key.UnicodeChar = 0
	bufferLength = rtlWideStringLength(*inputFieldText, 0)
	status = blAllocateMemoryPool(bufferLength * ???? resolve UnaryExprOrTypeTraitExpr, inputFieldBuffer as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		blDisplayErrorDialog("XTLDR", "Failed to allocate memory for input field buffer.")
		return ??

	}

	rtlCopyMemory(inputFieldBuffer, *inputFieldText, bufferLength * ???? resolve UnaryExprOrTypeTraitExpr)
	???? resolve ArraySubscriptExpr = ???? resolve CharacterLiteral
	inputFieldLength = bufferLength
	if inputFieldLength > Handle.Width - 8 {
		inputFieldLength = Handle.Width - 8

	}

	textPosition = 0
	blSetCursorPosition(Handle.PosX + 4 + textPosition, Handle.PosY + Handle.Height - 4)
	while tRUE {
		blWaitForEfiEvent(1, efiSystemTable.ConIn.WaitForKey, index)
		blReadKeyStroke(key)
		blResetConsoleInputBuffer()
		if Key.ScanCode == 23 {
			??? CompoundStmt BreakStmt

		} else {
			??? CompoundStmt CompoundStmt
			if Key.ScanCode == 3 {
				if Handle.Attributes & 16 and textPosition < inputFieldLength {
					??? CompoundStmt UnaryOperator

				}


			} else {
				??? CompoundStmt CompoundStmt
				if Key.ScanCode == 5 {
					if Handle.Attributes & 16 {
						textPosition = 0

					}


				} else {
					??? CompoundStmt CompoundStmt
					if Key.ScanCode == 8 {
						if Handle.Attributes & 16 {
							if inputFieldLength > 0 and textPosition < inputFieldLength {
								rtlMoveMemory(inputFieldBuffer + textPosition, inputFieldBuffer + textPosition + 1, (inputFieldLength - textPosition) * ???? resolve UnaryExprOrTypeTraitExpr)
								??? CompoundStmt UnaryOperator
								???? resolve ArraySubscriptExpr = 0

							}


						}


					} else {
						??? CompoundStmt CompoundStmt
						if Key.UnicodeChar == 13 {
							*inputFieldText = inputFieldBuffer
							??? CompoundStmt BreakStmt

						} else {
							if Handle.Attributes & 16 and Key.UnicodeChar != 0 {
								rtlMoveMemory(inputFieldBuffer + textPosition + 1, inputFieldBuffer + textPosition, (inputFieldLength - textPosition) * ???? resolve UnaryExprOrTypeTraitExpr)
								???? resolve ArraySubscriptExpr = Key.UnicodeChar
								??? CompoundStmt UnaryOperator
								??? CompoundStmt UnaryOperator
								???? resolve ArraySubscriptExpr = 0

							}


						}


					}


				}


			}


		}

		if textPosition > (Handle.Width - 9) {
			textIndex = textPosition - (Handle.Width - 9)
			textCursorPosition = Handle.Width - 9

		} else {
			textIndex = 0
			textCursorPosition = textPosition

		}

		blpDrawDialogButton(handle)
		blpDrawDialogInputField(handle, ???? resolve ArraySubscriptExpr)
		if Handle.Attributes & 16 {
			blSetCursorPosition(Handle.PosX + 4 + textCursorPosition, Handle.PosY + Handle.Height - 4)

		}


	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
}

/// Displays a blue informational dialog box with the specified caption and message and a progress bar.
/// 
/// @param Caption
///        Supplies a caption string put on the dialog box.
/// 
/// @param Message
///        Supplies a message string put on the dialog box.
/// 
/// @param Percentage
///        Specifies the percentage progress of the progress bar.
/// 
/// @return This routine returns a dialog box handle needed to update the progress bar.
/// 
/// @since XT 1.0
fun blDisplayProgressDialog(caption PWCHAR, message PWCHAR, percentage UCHAR) {
	let handle = new ByValue<XTBL_DIALOG_HANDLE>()

	Handle.Attributes = 1 | 64
	blpDetermineDialogBoxSize(handle, message)
	blDisableConsoleCursor()
	blpDrawDialogBox(handle, caption, message)
	blpDrawDialogProgressBar(handle, percentage)
	return handle
}

/// Updates the progress bar on the dialog box.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a new message that will be put on the dialog box, while updating the progress bar.
/// 
/// @param Percentage
///        Specifies the new percentage progress of the progress bar.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blUpdateProgressBar(handle PXTBL_DIALOG_HANDLE, message PWCHAR, percentage UCHAR) {
	if message != (0 as! PVOID) {
		blpDrawDialogMessage(handle, message)

	}

	blpDrawDialogProgressBar(handle, percentage)
}

/// Determines dialog box size based on enabled components and message length.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a pointer to the message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDetermineDialogBoxSize(handle PXTBL_DIALOG_HANDLE, message PWCHAR) {
	var width UINT_PTR
	var height UINT_PTR
	var lineLength UINT_PTR
	var index SIZE_T
	var messageLength SIZE_T
	var attributes UCHAR
	var mask ULONG
	height = 4
	width = 36
	lineLength = 0
	mask = 1
	attributes = handle.Attributes
	while mask {
		??? CompoundStmt SwitchStmt
		??? CompoundStmt CompoundAssignOperator
		??? CompoundStmt CompoundAssignOperator

	}

	if handle.Attributes & (16 | 32) {
		width = 100

	}

	messageLength = rtlWideStringLength(message, 0)
	??? CompoundStmt ForStmt
	??? CompoundStmt CompoundAssignOperator
	blQueryConsoleMode(handle.ResX, handle.ResY)
	if width > 100 {
		width = 100

	}

	if width > (handle.ResX - 2) {
		width = handle.ResX - 2

	}

	if height > (handle.ResY - 2) {
		height = handle.ResY - 2

	}

	handle.PosX = (handle.ResX - width) / 2
	handle.PosY = (handle.ResY - height) / 2
	handle.Width = width
	handle.Height = height
}

/// Draws a text UI-based boot menu.
/// 
/// @param Handle
///        Supplies a pointer to the boot menu handle.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawBootMenu(handle PXTBL_DIALOG_HANDLE) {
	blQueryConsoleMode(handle.ResX, handle.ResY)
	handle.Attributes = 0
	handle.DialogColor = 0
	handle.TextColor = 7
	handle.PosX = 3
	handle.PosY = 3
	handle.Width = handle.ResX - 6
	handle.Height = handle.ResY - 10
	blSetConsoleAttributes(handle.DialogColor | handle.TextColor)
	blClearConsoleScreen()
	blDisableConsoleCursor()
	if 1 {
		blSetCursorPosition((handle.ResX - 44) / 2, 1)
		blConsolePrint("XTLDR Boot Loader v%d.%d (%s-%s)\n", 0, 1, ???? resolve StringLiteral, ???? resolve StringLiteral)

	} else {
		blSetCursorPosition((handle.ResX - 22) / 2, 1)
		blConsolePrint("XTLDR Boot Loader v%d.%d\n", 0, 1)

	}

	blpDrawDialogBox(handle, (0 as! PVOID), (0 as! PVOID))
	blSetCursorPosition(0, handle.PosY + handle.Height)
	blSetConsoleAttributes(0 | 7)
	blConsolePrint("    Use cursors to change the selection. Press ENTER key to boot the chosen\n    Operating System, 'e' to edit it before booting or 's' for XTLDR shell.\n    Additional help available after pressing F1 key.")
}

/// Draws boot menu entry at the specified position.
/// 
/// @param Handle
///        Supplies a pointer to the boot menu handle.
/// 
/// @param MenuEntry
///        Supplies a pointer to the buffer containing a menu entry name.
/// 
/// @param Position
///        Specifies entry position on the list in the boot menu.
/// 
/// @param Highlighted
///        Specifies whether this entry should be highlighted or not.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawBootMenuEntry(handle PXTBL_DIALOG_HANDLE, menuEntry PWCHAR, position UINT, highlighted BOOLEAN) {
	var index UINT
	blSetCursorPosition(5, 4 + position)
	if highlighted {
		blSetConsoleAttributes(112 | 0)

	} else {
		blSetConsoleAttributes(0 | 7)

	}

	??? CompoundStmt ForStmt
	blSetCursorPosition(5, 4 + position)
	blConsolePrint("%S\n", menuEntry)
}

/// Draws dialog box with caption and message.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Caption
///        Specifies a caption string put on the dialog box.
/// 
/// @param Message
///        Specifies a message string put on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogBox(handle PXTBL_DIALOG_HANDLE, caption PWCHAR, message PWCHAR) {
	var boxLine WCHAR[100]
	var captionLength SIZE_T
	var posX UINT_PTR
	var posY UINT_PTR
	if handle.Attributes & 2 {
		handle.DialogColor = 64
		handle.TextColor = 15

	} else {
		??? CompoundStmt CompoundStmt

	}

	blSetConsoleAttributes(handle.DialogColor | 15)
	??? CompoundStmt ForStmt
	if caption != (0 as! PVOID) {
		blSetCursorPosition(handle.PosX + 3, handle.PosY)
		blConsolePrint("%S", caption)

	}

	if message != (0 as! PVOID) {
		blpDrawDialogMessage(handle, message)

	}

}

/// Draws an active or inactive button in the dialog box, depending on the attributes.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogButton(handle PXTBL_DIALOG_HANDLE) {
	var buttonColor ULONG
	var textColor ULONG
	if handle.Attributes & 4 {
		if handle.Attributes & 2 {
			buttonColor = 96
			textColor = 15

		} else {
			buttonColor = 48
			textColor = 15

		}


	} else {
		buttonColor = 112
		textColor = 0

	}

	blDisableConsoleCursor()
	blSetConsoleAttributes(buttonColor | textColor)
	blSetCursorPosition(handle.ResX / 2 - 4, handle.PosY + handle.Height - 2)
	blConsolePrint("[  OK  ]")
}

/// Draws an active or inactive input field in the dialog box, depending on the attributes.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param InputFieldText
///        Supplies a pointer to the wide char string that will be displayed in the input field.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogInputField(handle PXTBL_DIALOG_HANDLE, inputFieldText PWCHAR) {
	var inputField WCHAR[100]
	var inputColor ULONG
	var textColor ULONG
	var index UINT_PTR
	var position UINT_PTR
	var length SIZE_T
	if handle.Attributes & 16 {
		if handle.Attributes & 2 {
			inputColor = 96
			textColor = 15

		} else {
			inputColor = 48
			textColor = 15

		}


	} else {
		inputColor = 112
		textColor = 0

	}

	blSetConsoleAttributes(inputColor | textColor)
	position = ???? resolve ConditionalOperator
	blSetCursorPosition(handle.PosX + 4, handle.PosY + handle.Height - position)
	??? CompoundStmt ForStmt
	blDisableConsoleCursor()
	blConsoleWrite(inputField)
	length = rtlWideStringLength(inputFieldText, 0)
	if length > (handle.Width - 9) {
		length = handle.Width - 9

	}

	??? CompoundStmt ForStmt
	???? resolve ArraySubscriptExpr = 0
	blSetCursorPosition(handle.PosX + 4, handle.PosY + handle.Height - position)
	blConsoleWrite(inputField)
	if handle.Attributes & 16 {
		blEnableConsoleCursor()

	}

}

/// Draws a message on the dialog box specified by the handle.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Message
///        Supplies a message that will be displayed on the dialog box.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogMessage(handle PXTBL_DIALOG_HANDLE, message PWCHAR) {
	var msg PWCHAR
	var msgLine PWCHAR
	var lastMsgLine PWCHAR
	var index SIZE_T
	var length SIZE_T
	var lineLength SIZE_T
	var status EFI_STATUS
	var line ULONG
	length = rtlWideStringLength(message, 0)
	status = blAllocateMemoryPool(length * ???? resolve UnaryExprOrTypeTraitExpr, msg as! PVOID *)
	if status != (9223372036854775808 & 0) {
		blDebugPrint("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return ??

	}

	rtlCopyMemory(msg, message, length * ???? resolve UnaryExprOrTypeTraitExpr)
	???? resolve ArraySubscriptExpr = 0
	msgLine = rtlTokenizeWideString(msg, "\n", lastMsgLine)
	line = 0
	while msgLine {
		lineLength = rtlWideStringLength(msgLine, 0)
		blSetCursorPosition(handle.PosX + 2, handle.PosY + 2 + line)
		blSetConsoleAttributes(handle.DialogColor | handle.TextColor)
		blConsolePrint("%S", msgLine)
		if lineLength < handle.Width - 4 {
			??? CompoundStmt ForStmt

		}

		msgLine = rtlTokenizeWideString((0 as! PVOID), "\n", lastMsgLine)
		??? CompoundStmt UnaryOperator

	}

}

/// Draws a progress bar component in the dialog box.
/// 
/// @param Handle
///        Supplies a pointer to the dialog box handle.
/// 
/// @param Percentage
///        Specifies the percentage progress of the progress bar.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blpDrawDialogProgressBar(handle PXTBL_DIALOG_HANDLE, percentage UCHAR) {
	var index UINT_PTR
	var progressLength UINT_PTR
	var progressBarLength UINT_PTR
	var progressBar WCHAR[100]
	var position UINT_PTR
	progressBarLength = handle.Width - 8
	progressLength = (progressBarLength * percentage) / 100
	blSetConsoleAttributes(14)
	position = ???? resolve ConditionalOperator
	blSetCursorPosition(handle.PosX + 4, handle.PosY + handle.Height - position)
	??? CompoundStmt ForStmt
	???? resolve ArraySubscriptExpr = 0
	blDisableConsoleCursor()
	blConsoleWrite(progressBar)
}
