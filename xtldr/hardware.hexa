/// Enables I/O space access to all serial controllers found on the PCI(E) root bridge.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpActivateSerialIOController() {
	let pciGuid = new ByValue<EFI_GUID>()

	let pciDev = new ByValue<PEFI_PCI_ROOT_BRIDGE_IO_PROTOCOL>()

	var bus USHORT
	var device USHORT
	var function USHORT
	var command USHORT
	var index UINT_PTR
	var pciHandleSize UINT_PTR
	var pciHandle PEFI_HANDLE = (0 as! PVOID)
	let pciHeader = new ByValue<PCI_COMMON_HEADER>()

	var status EFI_STATUS
	var address ULONGLONG
	pciHandleSize = sizeOf<Unsigned long long>()
	status = blAllocateMemoryPool(pciHandleSize, pciHandle as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = efiSystemTable.bootServices.locateHandle(byProtocol, pciGuid, (0 as! PVOID), pciHandleSize, pciHandle)
	if status == (9223372036854775808 | 5) {
		blFreeMemoryPool(pciHandle)
		status = blAllocateMemoryPool(pciHandleSize, pciHandle as! PVOID *)
		if status != (9223372036854775808 & 0) {
			return status

		}

		status = efiSystemTable.bootServices.locateHandle(byProtocol, pciGuid, (0 as! PVOID), pciHandleSize, pciHandle)

	}

	if status != (9223372036854775808 & 0) {
		return status

	}

	index = 0
	while index < (pciHandleSize / sizeOf<Unsigned long long>()) {
		status = efiSystemTable.bootServices.handleProtocol(pciHandle[index], pciGuid, pciDev as! PVOID *)
		if status != (9223372036854775808 & 0) {
			return status

		}

		bus = 0
		while bus <= 255 {
			device = 0
			while device < 32 {
				function = 0
				while function < 8 {
					address = ((((bus as! UINT_PTR) << 24) + ((device as! UINT_PTR) << 16) + ((function as! UINT_PTR) << 8) + (0 as! UINT_PTR)) as! ULONGLONG)
					pciDev.pci.read(pciDev, 2, address, sizeOf<Unsigned long long>() / sizeOf<Unsigned long long>(), pciHeader)
					if PciHeader.vendorId == 65535 {
						continue
					}

					if PciHeader.baseClass == 7 and (PciHeader.subClass == 0 or PciHeader.subClass == 2) {
						address |= 4
						command = 1
						status = pciDev.pci.write(pciDev, 1, address, 1, command)

					}

					function++
				}

				device++
			}

			bus++
		}

		index++
	}

	return (9223372036854775808 & 0)
}
