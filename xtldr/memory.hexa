/// This routine allocates one or more 4KB pages.
/// 
/// @param Pages
///        The number of contiguous 4KB pages to allocate.
/// 
/// @param Memory
///        The pointer to a physical address.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blAllocateMemoryPages(pages ULONGLONG, memory PEFI_PHYSICAL_ADDRESS) {
	return efiSystemTable.bootServices.allocatePages(allocateAnyPages, efiLoaderData, pages, memory)
}

/// This routine allocates a pool memory.
/// 
/// @param Size
///        The number of bytes to allocate from the pool.
/// 
/// @param Memory
///        The pointer to a physical address.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blAllocateMemoryPool(size UINT_PTR, memory PVOID *) {
	return efiSystemTable.bootServices.allocatePool(efiLoaderData, size, memory)
}

/// This routine frees memory pages.
/// 
/// @param Pages
///        The number of contiguous 4 KB pages to free.
/// 
/// @param Memory
///        The base physical address of the pages to be freed.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blFreeMemoryPages(pages ULONGLONG, memory EFI_PHYSICAL_ADDRESS) {
	return efiSystemTable.bootServices.freePages(memory, pages)
}

/// Returns pool memory to the system.
/// 
/// @param Memory
///        The pointer to the buffer to free.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blFreeMemoryPool(memory PVOID) {
	return efiSystemTable.bootServices.freePool(memory)
}

/// Returns the number of mappings in the page mapping structure.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param NumberOfMappings
///        Supplies a pointer to memory area where the number of mappings is returned.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blGetMappingsCount(pageMap PXTBL_PAGE_MAPPING, numberOfMappings PULONG) {
	numberOfMappings[0] = pageMap.mapSize
}

/// Returns the memory descriptors which define a memory map of all the physical memory ranges reserved by the UEFI.
/// 
/// @param MemoryMap
///        Supplies a pointer to the buffer where memory map will be written.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blGetMemoryMap(memoryMap PEFI_MEMORY_MAP) {
	var status EFI_STATUS
	if memoryMap == (0 as! PVOID) {
		return (9223372036854775808 | 2)

	}

	memoryMap.map = (0 as! PVOID)
	memoryMap.mapSize = 0
	do {
		status = efiSystemTable.bootServices.getMemoryMap(memoryMap.mapSize, memoryMap.map, memoryMap.mapKey, memoryMap.descriptorSize, memoryMap.descriptorVersion)
		if status == (9223372036854775808 & 0) {
			break
		} else {
			status != (9223372036854775808 | 5)

			{
				memoryMap.map

				{
					blFreeMemoryPool(memoryMap.map)

				}

				status

			}


		}

		memoryMap.mapSize += 2 * memoryMap.descriptorSize
		blAllocateMemoryPool(memoryMap.mapSize, memoryMap.map as! PVOID *)

	} while status == (9223372036854775808 | 5)

	if memoryMap.map == (0 as! PVOID) {
		return (9223372036854775808 | 17)

	}

	return (9223372036854775808 & 0)
}

/// Attempts to find a virtual address of the specified physical address in memory mappings.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param PhysicalAddress
///        Supplies a physical address to search for in the mappings.
/// 
/// @return This routine returns a corresponding virtual address found in the mappings.
/// 
/// @since XT 1.0
fun blGetVirtualAddress(pageMap PXTBL_PAGE_MAPPING, physicalAddress PVOID) {
	let mapping = new ByValue<PXTBL_MEMORY_MAPPING>()

	let listEntry = new ByValue<PLIST_ENTRY>()

	listEntry = pageMap.memoryMap.flink
	while listEntry != pageMap.memoryMap {
		mapping = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_MEMORY_MAPPING *)
		if mapping.virtualAddress {
			if (physicalAddress >= mapping.physicalAddress) and (physicalAddress < mapping.physicalAddress + (mapping.numberOfPages * 4096)) {
				return physicalAddress - mapping.physicalAddress + mapping.virtualAddress

			}


		}

		listEntry = listEntry.flink

	}

	return 0
}

/// Initializes the page mapping structures.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param PageMapLevel
///        Specifies a number of of paging structures levels.
/// 
/// @param PageSize
///        Specifies a page size (currently it has no effect).
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blInitializePageMap(pageMap PXTBL_PAGE_MAPPING, pageMapLevel SHORT, pageSize PAGE_SIZE) {
	rtlInitializeListHead(pageMap.memoryMap)
	pageMap.mapSize = 0
	pageMap.pageMapLevel = pageMapLevel
	pageMap.pageSize = pageSize
}

/// Adds EFI memory mapping to the page mapping structure.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param MemoryMapAddress
///        Supplies a virtual address, where EFI memory will be mapped.
/// 
/// @param GetMemoryTypeRoutine
///        Supplies a pointer to the routine which will be used to match EFI memory type to the OS memory type.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blMapEfiMemory(pageMap PXTBL_PAGE_MAPPING, memoryMapAddress PVOID *, getMemoryTypeRoutine PBL_GET_MEMTYPE_ROUTINE) {
	let descriptor = new ByValue<PEFI_MEMORY_DESCRIPTOR>()

	var memoryType LOADER_MEMORY_TYPE
	let memoryMap = new ByValue<PEFI_MEMORY_MAP>()

	var descriptorCount SIZE_T
	var virtualAddress PUCHAR
	var status EFI_STATUS
	var index SIZE_T
	virtualAddress = memoryMapAddress[0]
	if getMemoryTypeRoutine == (0 as! PVOID) {
		getMemoryTypeRoutine = blpGetLoaderMemoryType

	}

	blAllocateMemoryPool(sizeOf<Unsigned long long>(), memoryMap as! PVOID *)
	rtlZeroMemory(memoryMap, sizeOf<Unsigned long long>())
	status = blGetMemoryMap(memoryMap)
	if status != (9223372036854775808 & 0) {
		return status

	}

	descriptor = memoryMap.map
	descriptorCount = memoryMap.mapSize / memoryMap.descriptorSize
	index = 0
	while index < descriptorCount {
		if descriptor.physicalStart <= (~(0 as! UINT_PTR)) {
			if descriptor.type == efiReservedMemoryType {
				descriptor = (descriptor as! PUCHAR + memoryMap.descriptorSize) as! PEFI_MEMORY_DESCRIPTOR
				continue
			}

			if pageMap.pageMapLevel == 2 {
				if descriptor.physicalStart > 4294967295 {
					descriptor = (descriptor as! PUCHAR + memoryMap.descriptorSize) as! PEFI_MEMORY_DESCRIPTOR
					continue
				}

				if descriptor.physicalStart + (descriptor.numberOfPages << 12) > 4294967295 {
					descriptor.numberOfPages = ((4294967295 as! ULONGLONG + 1) - descriptor.physicalStart) >> 12

				}


			}

			memoryType = getMemoryTypeRoutine(descriptor.type)
			if memoryType == loaderFirmwareTemporary {
				status = blMapVirtualMemory(pageMap, descriptor.physicalStart as! PVOID, descriptor.physicalStart as! PVOID, descriptor.numberOfPages, memoryType)

			} else {
				memoryType != loaderFree

				{
					status = blMapVirtualMemory(pageMap, virtualAddress, descriptor.physicalStart as! PVOID, descriptor.numberOfPages, memoryType)
					virtualAddress += descriptor.numberOfPages * 4096

				}


				{
					status = blMapVirtualMemory(pageMap, (0 as! PVOID), descriptor.physicalStart as! PVOID, descriptor.numberOfPages, loaderFree)

				}


			}

			if status != (9223372036854775808 & 0) {
				return status

			}


		}

		descriptor = (descriptor as! PUCHAR + memoryMap.descriptorSize) as! PEFI_MEMORY_DESCRIPTOR
		index

	}

	status = blMapVirtualMemory(pageMap, (0 as! PVOID), 0 as! PVOID, 1, loaderFirmwarePermanent)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = blMapVirtualMemory(pageMap, (0 as! PVOID), 655360 as! PVOID, 96, loaderFirmwarePermanent)
	if status != (9223372036854775808 & 0) {
		return status

	}

	memoryMapAddress[0] = virtualAddress
	return (9223372036854775808 & 0)
}

/// Adds a physical to virtual address mappings.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param VirtualAddress
///        Supplies a virtual address where the physical address should be mapped.
/// 
/// @param PhysicalAddress
///        Supplies a physical address which will be mapped.
/// 
/// @param NumberOfPages
///        Supplies a number of pages that will be mapped.
/// 
/// @param MemoryType
///        Supplies the type of mapped memory that will be assigned to the memory descriptor.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blMapVirtualMemory(pageMap PXTBL_PAGE_MAPPING, virtualAddress PVOID, physicalAddress PVOID, numberOfPages ULONGLONG, memoryType LOADER_MEMORY_TYPE) {
	let mapping1 = new ByValue<PXTBL_MEMORY_MAPPING>()

	let mapping2 = new ByValue<PXTBL_MEMORY_MAPPING>()

	let mapping3 = new ByValue<PXTBL_MEMORY_MAPPING>()

	var physicalAddressEnd PVOID
	var physicalAddress2End PVOID
	let listEntry = new ByValue<PLIST_ENTRY>()

	let mappingListEntry = new ByValue<PLIST_ENTRY>()

	var numberOfMappedPages SIZE_T
	var status EFI_STATUS
	status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), mapping1 as! PVOID *)
	if status != (9223372036854775808 & 0) {
		return status

	}

	mapping1.physicalAddress = physicalAddress
	mapping1.virtualAddress = virtualAddress
	mapping1.numberOfPages = numberOfPages
	mapping1.memoryType = memoryType
	physicalAddressEnd = (physicalAddress as! ULONG_PTR + (numberOfPages * 4096) - 1) as! PVOID
	listEntry = pageMap.memoryMap.flink
	while listEntry != pageMap.memoryMap {
		mapping2 = (((listEntry) as! Char * - __builtin_offsetof<Unsigned long long>()) as! XTBL_MEMORY_MAPPING *)
		physicalAddress2End = (mapping2.physicalAddress as! ULONG_PTR + (mapping2.numberOfPages * 4096) - 1) as! PVOID
		if mapping1.physicalAddress >= mapping2.physicalAddress and physicalAddressEnd <= physicalAddress2End {
			if mapping1.memoryType == mapping2.memoryType {
				return (9223372036854775808 & 0)

			}


		}

		if physicalAddressEnd > mapping2.physicalAddress and physicalAddressEnd <= physicalAddress2End {
			if mapping2.memoryType != loaderFree {
				return (9223372036854775808 | 2)

			}

			numberOfMappedPages = (physicalAddress2End as! PUCHAR - physicalAddressEnd as! PUCHAR) / 4096
			if numberOfMappedPages > 0 {
				status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), mapping3 as! PVOID *)
				if status != (9223372036854775808 & 0) {
					return status

				}

				mapping3.physicalAddress = physicalAddressEnd as! PUCHAR + 1
				mapping3.virtualAddress = (0 as! PVOID)
				mapping3.numberOfPages = numberOfMappedPages
				mapping3.memoryType = mapping2.memoryType
				rtlInsertHeadList(mapping2.listEntry, mapping3.listEntry)

			}

			mapping2.numberOfPages = (physicalAddressEnd as! PUCHAR + 1 - mapping2.physicalAddress as! PUCHAR) / 4096
			physicalAddress2End = (mapping2.physicalAddress as! ULONG_PTR + (mapping2.numberOfPages * 4096) - 1) as! PVOID

		}

		if mapping1.physicalAddress > mapping2.physicalAddress and mapping1.physicalAddress < physicalAddress2End {
			if mapping2.memoryType != loaderFree {
				return (9223372036854775808 | 2)

			}

			numberOfMappedPages = (physicalAddress2End as! PUCHAR + 1 - mapping1.physicalAddress as! PUCHAR) / 4096
			if numberOfMappedPages > 0 {
				status = blAllocateMemoryPool(sizeOf<Unsigned long long>(), mapping3 as! PVOID *)
				if status != (9223372036854775808 & 0) {
					return status

				}

				mapping3.physicalAddress = mapping1.physicalAddress
				mapping3.virtualAddress = (0 as! PVOID)
				mapping3.numberOfPages = numberOfMappedPages
				mapping3.memoryType = mapping2.memoryType
				rtlInsertHeadList(mapping2.listEntry, mapping3.listEntry)

			}

			mapping2.numberOfPages = (mapping1.physicalAddress as! PUCHAR - mapping2.physicalAddress as! PUCHAR) / 4096
			physicalAddress2End = (mapping2.physicalAddress as! ULONG_PTR + (mapping2.numberOfPages * 4096) - 1) as! PVOID

		}

		if (mapping2.physicalAddress >= mapping1.physicalAddress and physicalAddress2End <= physicalAddressEnd) or (mapping2.numberOfPages == 0) {
			if mapping2.memoryType != loaderFree {
				return (9223372036854775808 | 2)

			}

			mappingListEntry = listEntry.flink
			rtlRemoveEntryList(mapping2.listEntry)
			status = blFreeMemoryPool(mapping2)
			listEntry = mappingListEntry
			continue
		}

		if mapping2.physicalAddress > mapping1.physicalAddress {
			rtlInsertHeadList(mapping2.listEntry.blink, mapping1.listEntry)
			return (9223372036854775808 & 0)

		}

		listEntry = listEntry.flink

	}

	rtlInsertTailList(pageMap.memoryMap, mapping1.listEntry)
	pageMap.mapSize++	return (9223372036854775808 & 0)
}

/// Converts physical address to virtual address based on physical base and virtual base.
/// 
/// @param PhysicalAddress
///        Specifies physical address that will be converted to virtual address.
/// 
/// @param PhysicalBase
///        Supplies a physical base address.
/// 
/// @param VirtualBase
///        Supplies a virtual base address.
/// 
/// @return This routine returns a mapped virtual address.
/// 
/// @since XT 1.0
fun blPhysicalAddressToVirtual(physicalAddress PVOID, physicalBase PVOID, virtualBase PVOID) {
	return virtualBase as! PUCHAR + (physicalAddress as! PUCHAR - physicalBase as! PUCHAR)
}

/// Converts whole linked list addressing from physical to virtual for future use after enabling paging.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param ListHead
///        Supplies a pointer to a structure that serves as the list header.
/// 
/// @param PhysicalBase
///        Supplies a physical base address.
/// 
/// @param VirtualBase
///        Supplies a virtual base address.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blPhysicalListToVirtual(pageMap PXTBL_PAGE_MAPPING, listHead PLIST_ENTRY, physicalBase PVOID, virtualBase PVOID) {
	let listEntry = new ByValue<PLIST_ENTRY>()

	let nextEntry = new ByValue<PLIST_ENTRY>()

	if listHead.flink == 0 or listHead.blink == 0 {
		return (9223372036854775808 | 2)

	}

	listEntry = listHead.flink
	while listEntry != listHead {
		nextEntry = listEntry.flink
		if listEntry.blink == listHead {
			listEntry.blink = blGetVirtualAddress(pageMap, listEntry.blink)

		} else {
			listEntry.blink = blPhysicalAddressToVirtual(listEntry.blink, physicalBase as! PVOID, virtualBase)

		}

		if listEntry.flink == listHead {
			listEntry.flink = listHead.flink.blink

		} else {
			listEntry.flink = blPhysicalAddressToVirtual(listEntry.flink, physicalBase as! PVOID, virtualBase)

		}

		listEntry = nextEntry

	}

	listHead.blink = blPhysicalAddressToVirtual(listHead.blink, physicalBase as! PVOID, virtualBase)
	listHead.flink = blPhysicalAddressToVirtual(listHead.flink, physicalBase as! PVOID, virtualBase)
	return (9223372036854775808 & 0)
}

/// Converts EFI memory type to XTLDR memory type.
/// 
/// @param EfiMemoryType
///        Specifies EFI memory type.
/// 
/// @return This routine returns a mapped XTLDR memory type.
/// 
/// @since XT 1.0
fun blpGetLoaderMemoryType(efiMemoryType EFI_MEMORY_TYPE) {
	var memoryType LOADER_MEMORY_TYPE
	switch efiMemoryType {
		case efiACPIMemoryNVS:
			efiACPIReclaimMemory

			case efiPalCode:
				efiReservedMemoryType
				memoryType = loaderSpecialMemory
		break
		case efiRuntimeServicesCode:
			efiRuntimeServicesData

			case efiMemoryMappedIO:
				efiMemoryMappedIOPortSpace
				memoryType = loaderFirmwarePermanent
		break
		case efiBootServicesData:
			efiLoaderCode

			case efiLoaderData:
				memoryType = loaderFirmwareTemporary
		break
		case efiUnusableMemory:
			memoryType = loaderBad
		break
		case _:
			memoryType = loaderFree
		break
	}

	return memoryType
}

/// Returns next level of the Page Table.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @param PageTable
///        Supplies a pointer to the current Page Table.
/// 
/// @param Entry
///        Supplies an index of the current Page Table entry.
/// 
/// @param NextPageTable
///        Supplies a pointer to the memory area where the next Page Table level is returned.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpGetNextPageTable(pageMap PXTBL_PAGE_MAPPING, pageTable PHARDWARE_PTE, entry SIZE_T, nextPageTable PHARDWARE_PTE *) {
	var address EFI_PHYSICAL_ADDRESS
	var pmlPointer ULONGLONG
	var status EFI_STATUS
	if pageTable[entry].valid {
		pmlPointer = pageTable[entry].pageFrameNumber
		pmlPointer <<= 12

	} else {
		status = blAllocateMemoryPages(1, address)
		if status != (9223372036854775808 & 0) {
			return status

		}

		status = blMapVirtualMemory(pageMap, (0 as! PVOID), address as! UINT_PTR as! PVOID, 1, loaderMemoryData)
		if status != (9223372036854775808 & 0) {
			return status

		}

		rtlZeroMemory(address as! ULONGLONG as! PVOID, 4096)
		pageTable[entry].pageFrameNumber = address / 4096
		pageTable[entry].valid = 1
		pageTable[entry].writable = 1
		pmlPointer = address as! ULONGLONG

	}

	nextPageTable[0] = pmlPointer as! ULONGLONG as! PHARDWARE_PTE
	return (9223372036854775808 & 0)
}
