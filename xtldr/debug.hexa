/// This routine formats the input string and prints it out to the debug ports.
/// 
/// @param Format
///        The formatted string that is to be written to the output.
/// 
/// @param ...
///        Depending on the format string, this routine might expect a sequence of additional arguments.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDebugPrint(format PUSHORT) {
	let consolePrintContext = new ByValue<RTL_PRINT_CONTEXT>()

	let serialPrintContext = new ByValue<RTL_PRINT_CONTEXT>()

	var arguments VA_LIST
	if 1 {
		ConsolePrintContext.WriteWideCharacter = blpConsolePutChar
		SerialPrintContext.WriteWideCharacter = blpDebugPutChar
		__builtin_va_start(arguments, format)
		if (BlpStatus.DebugPort & 2) and (BlpStatus.SerialPort.flags & 1) {
			rtlFormatWideString(serialPrintContext, format as! PWCHAR, arguments)

		}

		if (BlpStatus.DebugPort & 1) and (BlpStatus.BootServices == tRUE) {
			rtlFormatWideString(consolePrintContext, format as! PWCHAR, arguments)

		}

		__builtin_va_end(arguments)

	}

}

/// Writes a character to the serial console.
/// 
/// @param Character
///        The integer promotion of the character to be written.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpDebugPutChar(character USHORT) {
	var buffer USHORT[2]
	buffer[0] = character
	buffer[1] = 0
	hlComPortPutByte(BlpStatus.SerialPort, buffer[0])
	return (9223372036854775808 & 0)
}

/// This routine initializes the XTLDR debug console.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpInitializeDebugConsole() {
	var portAddress ULONG
	var portNumber ULONG
	var baudRate ULONG
	var debugConfiguration PWCHAR
	var debugPort PWCHAR
	var lastPort PWCHAR
	var status EFI_STATUS
	portAddress = 0
	portNumber = 0
	baudRate = 0
	debugConfiguration = blGetConfigValue("DEBUG")
	if debugConfiguration and BlpStatus.DebugPort == 0 {
		debugPort = rtlTokenizeWideString(debugConfiguration, ";", lastPort)
		while debugPort != (0 as! PVOID) {
			if rtlCompareWideStringInsensitive(debugPort, "COM", 3) == 0 {
				debugPort += 3
				while debugPort[0] >= 48/* "0" */ and debugPort[0] <= 57/* "9" */ {
					portNumber *= 10
					portNumber += debugPort[0] - 48/* "0" */
					debugPort++
				}

				if portNumber == 0 and rtlCompareWideStringInsensitive(debugPort, ":0x", 3) == 0 {
					debugPort += 3
					while (debugPort[0] >= 48/* "0" */ and debugPort[0] <= 57/* "9" */) or (debugPort[0] >= 65/* "A" */ and debugPort[0] <= 70/* "F" */) or (debugPort[0] >= 97/* "a" */ and debugPort[0] <= 102/* "f" */) {
						portAddress *= 16
						if debugPort[0] >= 48/* "0" */ and debugPort[0] <= 57/* "9" */ {
							portAddress += debugPort[0] - 48/* "0" */

						} else {
							[unknown clang ast] CompoundStmt CompoundStmt
							if debugPort[0] >= 97/* "a" */ and debugPort[0] <= 102/* "f" */ {
								portAddress += debugPort[0] - 97/* "a" */ + 10

							}


						}

						debugPort++
					}


				}

				if debugPort[0] == 44/* "," */ {
					debugPort++					while debugPort[0] >= 48/* "0" */ and debugPort[0] <= 57/* "9" */ {
						baudRate *= 10
						baudRate += debugPort[0] - 48/* "0" */
						debugPort++
					}


				}

				BlpStatus.DebugPort |= 2

			} else {
				[unknown clang ast] CompoundStmt CompoundStmt
				[unknown clang ast] CompoundStmt CompoundStmt

			}

			debugPort = rtlTokenizeWideString((0 as! PVOID), ";", lastPort)

		}

		if BlpStatus.DebugPort & 2 {
			status = blpInitializeSerialPort(portNumber, portAddress, baudRate)
			if status != (9223372036854775808 & 0) {
				BlpStatus.DebugPort &= ~2
				return status

			}


		}


	}

	return (9223372036854775808 & 0)
}

/// This routine initializes the serial debug console.
/// 
/// @param PortNumber
///        Supplies a port number.
/// 
/// @param PortAddress
///        Supplies an address of the COM port.
/// 
/// @param BaudRate
///        Supplies an optional port baud rate.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpInitializeSerialPort(portNumber ULONG, portAddress ULONG, baudRate ULONG) {
	var efiStatus EFI_STATUS
	var status XTSTATUS
	if !portAddress {
		if portNumber > 8 {
			return (3221225485 as! XTSTATUS)

		}

		if portNumber == 0 {
			portNumber = 1

		}

		portAddress = blComPortList[portNumber - 1]
		blConsolePrint("Initializing serial console at port COM%d\n", portNumber)

	} else {
		blConsolePrint("Initializing serial console at COM port address: 0x%lX\n", portAddress)

	}

	status = hlInitializeComPort(BlpStatus.SerialPort, (portAddress as! ULONG_PTR as! PVOID), baudRate)
	if status == (3221226021 as! XTSTATUS) and portAddress {
		efiStatus = blpActivateSerialIOController()
		if efiStatus == (9223372036854775808 & 0) {
			blConsolePrint("Enabled I/O space access for all PCI(E) serial controllers found\n")
			status = hlInitializeComPort(BlpStatus.SerialPort, (portAddress as! ULONG_PTR as! PVOID), baudRate)

		}


	}

	if status != (0 as! XTSTATUS) {
		return (9223372036854775808 | 6)

	}

	return (9223372036854775808 & 0)
}
