/// Clears a specified line on the UEFI text console.
/// 
/// @param LineNo
///        Supplies a line number to clear.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blClearConsoleLine(lineNo ULONGLONG) {
	var index UINT_PTR
	var resX UINT_PTR
	var resY UINT_PTR
	blQueryConsoleMode(resX, resY)
	blSetCursorPosition(0, lineNo)
	[unknown clang ast] CompoundStmt ForStmt
}

/// This routine clears the UEFI console screen.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blClearConsoleScreen() {
	efiSystemTable.conOut.clearScreen(efiSystemTable.conOut)
}

/// Disables the cursor on the UEFI console.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blDisableConsoleCursor() {
	efiSystemTable.conOut.enableCursor(efiSystemTable.conOut, fALSE)
}

/// Enables the cursor on the UEFI console.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blEnableConsoleCursor() {
	efiSystemTable.conOut.enableCursor(efiSystemTable.conOut, tRUE)
}

/// This routine formats the input string and prints it out to the stdout and serial console.
/// 
/// @param Format
///        The formatted string that is to be written to the output.
/// 
/// @param ...
///        Depending on the format string, this routine might expect a sequence of additional arguments.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blConsolePrint(format PUSHORT) {
	let consolePrintContext = new ByValue<RTL_PRINT_CONTEXT>()

	let serialPrintContext = new ByValue<RTL_PRINT_CONTEXT>()

	var arguments VA_LIST
	ConsolePrintContext.WriteWideCharacter = blpConsolePutChar
	SerialPrintContext.WriteWideCharacter = blpDebugPutChar
	__builtin_va_start(arguments, format)
	rtlFormatWideString(consolePrintContext, format as! PWCHAR, arguments)
	if rtlCompareWideString(efiSystemTable.firmwareVendor, "EDK II", 6) != 0 {
		if 1 and (BlpStatus.SerialPort.flags & 1) {
			rtlFormatWideString(serialPrintContext, format as! PWCHAR, arguments)

		}


	}

	__builtin_va_end(arguments)
}

/// Displays the string on the device at the current cursor location.
/// 
/// @param String
///        The string to be displayed.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blConsoleWrite(string PUSHORT) {
	efiSystemTable.conOut.outputString(efiSystemTable.conOut, string)
}

/// This routine initializes the EFI console.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun blInitializeConsole() {
	efiSystemTable.conIn.reset(efiSystemTable.conIn, tRUE)
	efiSystemTable.conOut.reset(efiSystemTable.conOut, tRUE)
	efiSystemTable.stdErr.reset(efiSystemTable.stdErr, tRUE)
	if efiSystemTable.conOut.mode.mode != 0 {
		blSetConsoleMode(0)

	}

	blSetConsoleAttributes(0 | 7)
	blClearConsoleScreen()
	blEnableConsoleCursor()
}

/// Queries information concerning the output deviceâ€™s supported text mode.
/// 
/// @param ResX
///        Supplies a buffer to receive the horizontal resolution.
/// 
/// @param ResY
///        Supplies a buffer to receive the vertical resolution.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blQueryConsoleMode(resX PUINT_PTR, resY PUINT_PTR) {
	efiSystemTable.conOut.queryMode(efiSystemTable.conOut, efiSystemTable.conOut.mode.mode, resX, resY)
}

/// Reads a keystroke from the input device.
/// 
/// @param Key
///        Supplies a pointer to the EFI_INPUT_KEY structure that will receive the keystroke.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blReadKeyStroke(key PEFI_INPUT_KEY) {
	efiSystemTable.conIn.readKeyStroke(efiSystemTable.conIn, key)
}

/// Resets the console input device and clears its input buffer.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blResetConsoleInputBuffer() {
	efiSystemTable.conIn.reset(efiSystemTable.conIn, fALSE)
}

/// Sets the foreground and background colors.
/// 
/// @param Attribute
///        Specifies the foreground and background colors (bits 0..3 are fg, and bits 4..6 are bg color).
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blSetConsoleAttributes(attributes ULONGLONG) {
	efiSystemTable.conOut.setAttribute(efiSystemTable.conOut, attributes)
}

/// Sets the output console device to the requested mode.
/// 
/// @param Mode
///        Supplies a text mode number to set.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blSetConsoleMode(mode ULONGLONG) {
	return efiSystemTable.conOut.setMode(efiSystemTable.conOut, mode)
}

/// Sets new coordinates of the console cursor position.
/// 
/// @param PosX
///        Specifies the new X coordinate of the cursor.
/// 
/// @param PosY
///        Specifies the new Y coordinate of the cursor.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun blSetCursorPosition(posX ULONGLONG, posY ULONGLONG) {
	efiSystemTable.conOut.setCursorPosition(efiSystemTable.conOut, posX, posY)
}

/// Writes a character to the default EFI console.
/// 
/// @param Character
///        The integer promotion of the character to be written.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun blpConsolePutChar(character USHORT) {
	var buffer USHORT[2]
	if character == 10/* "\n" */ {
		blpConsolePutChar(13/* "\r" */)

	}

	buffer[0] = character
	buffer[1] = 0
	efiSystemTable.conOut.outputString(efiSystemTable.conOut, buffer)
	return (0 as! XTSTATUS)
}
