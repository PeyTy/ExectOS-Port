var __UNIQUE_ID_author0

var __UNIQUE_ID_description1

var __UNIQUE_ID_license2

var __UNIQUE_ID_version3


/// Provides an EFI Frame Buffer protocol driver name used for initialization.
/// 
/// @param Protocol
///        Supplies a pointer to the memory area where framebuffer driver information will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbGetDisplayDriver(protocol PEFI_GRAPHICS_PROTOCOL) {
	if !FbpDisplayInfo.initialized {
		return (9223372036854775808 | 6)

	}

	protocol[0] = FbpDisplayInfo.protocol
	return (9223372036854775808 & 0)
}

/// Returns information about EFI Frame Buffer.
/// 
/// @param FbInfo
///        Supplies a pointer to the memory area where framebuffer information will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbGetDisplayInformation(frameBufferBase PEFI_PHYSICAL_ADDRESS, frameBufferSize PULONG_PTR, modeInfo PXTBL_FRAMEBUFFER_MODE_INFORMATION) {
	if !FbpDisplayInfo.initialized {
		return (9223372036854775808 | 6)

	}

	frameBufferBase[0] = FbpDisplayInfo.frameBufferBase
	frameBufferSize[0] = FbpDisplayInfo.frameBufferSize
	modeInfo.width = FbpDisplayInfo.modeInfo.width
	modeInfo.height = FbpDisplayInfo.modeInfo.height
	modeInfo.depth = FbpDisplayInfo.modeInfo.depth
	modeInfo.refreshRate = FbpDisplayInfo.modeInfo.refreshRate
	modeInfo.bitsPerPixel = FbpDisplayInfo.modeInfo.bitsPerPixel
	modeInfo.bytesPerPixel = FbpDisplayInfo.modeInfo.bytesPerPixel
	modeInfo.pixelsPerScanLine = FbpDisplayInfo.modeInfo.pixelsPerScanLine
	modeInfo.pitch = FbpDisplayInfo.modeInfo.pitch
	modeInfo.pixelFormat = FbpDisplayInfo.modeInfo.pixelFormat
	modeInfo.pixelInformation = FbpDisplayInfo.modeInfo.pixelInformation
	return (9223372036854775808 & 0)
}

/// Determines the preferred (native) screen resolution from EDID. This works only with GOP.
/// 
/// @param PreferredWidth
///        Supplies a pointer to the memory area where preferred screen width will be stored.
/// 
/// @param PreferredHeight
///        Supplies a pointer to the memory area where preferred screen height will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbGetPreferredScreenResolution(preferredWidth PUINT, preferredHeight PUINT) {
	let gopGuid = new ByValue<EFI_GUID>()

	let edidGuid = new ByValue<EFI_GUID>()

	let activeEdid = new ByValue<PEFI_EDID_ACTIVE_PROTOCOL>()

	var status EFI_STATUS
	if !FbpDisplayInfo.initialized {
		return (9223372036854775808 | 6)

	}

	if FbpDisplayInfo.protocol != gOP {
		return (9223372036854775808 | 3)

	}

	status = xtLdrProtocol.protocol.openHandle(FbpDisplayInfo.handle, activeEdid as! PVOID *, edidGuid)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, gopGuid)
		return status

	}

	preferredWidth[0] = activeEdid.edid[56] | ((activeEdid.edid[58] & 240) << 4)
	preferredHeight[0] = activeEdid.edid[59] | ((activeEdid.edid[61] & 240) << 4)
	xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, edidGuid)
	return (9223372036854775808 & 0)
}

/// Initializes FrameBuffer device on GOP and UGA compatible adapters.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbInitializeDisplay() {
	let gopGuid = new ByValue<EFI_GUID>()

	let ugaGuid = new ByValue<EFI_GUID>()

	let gopModeInfo = new ByValue<PEFI_GRAPHICS_OUTPUT_MODE_INFORMATION>()

	var depth UINT
	var queryMode UINT
	var refresh UINT
	var infoSize UINT_PTR
	var status EFI_STATUS
	if !FbpDisplayInfo.initialized {
		xtLdrProtocol.debug.print("Initializing framebuffer device\n")
		status = xtLdrProtocol.protocol.open(FbpDisplayInfo.handle, FbpDisplayInfo.driver.gop as! PVOID *, gopGuid)
		if status == (9223372036854775808 & 0) {
			if FbpDisplayInfo.driver.gop.mode.maxMode == 0 {
				xtLdrProtocol.debug.print("ERROR: No GOP video mode available\n")
				xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, gopGuid)
				return (9223372036854775808 | 3)

			}

			queryMode = (FbpDisplayInfo.driver.gop.mode == (0 as! PVOID)) ? 0 : FbpDisplayInfo.driver.gop.mode.mode
			status = FbpDisplayInfo.driver.gop.queryMode(FbpDisplayInfo.driver.gop, queryMode, infoSize, gopModeInfo)
			if status == (9223372036854775808 | 19) {
				status = FbpDisplayInfo.driver.gop.setMode(FbpDisplayInfo.driver.gop, 0)

			}

			if status != (9223372036854775808 & 0) {
				xtLdrProtocol.debug.print("ERROR: Failed to get GOP native mode (Status Code: 0x%zX)\n")
				xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, gopGuid)
				return (9223372036854775808 | 3)

			}

			FbpDisplayInfo.frameBufferBase = FbpDisplayInfo.driver.gop.mode.frameBufferBase
			FbpDisplayInfo.defaultMode = FbpDisplayInfo.driver.gop.mode.mode
			FbpDisplayInfo.protocol = gOP
			status = fbpGetModeInfo()
			if status != (9223372036854775808 & 0) {
				xtLdrProtocol.debug.print("ERROR: Failed to get GOP mode information (Status Code: 0x%zX)\n")
				xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, gopGuid)
				return (9223372036854775808 | 3)

			}

			xtLdrProtocol.debug.print("Found EFI-GOP compatible display adapter @ %P (%zu bytes)\n", FbpDisplayInfo.frameBufferBase, FbpDisplayInfo.frameBufferSize)
			status = xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, gopGuid)

		} else {
			status = xtLdrProtocol.protocol.open(FbpDisplayInfo.handle, FbpDisplayInfo.driver.uga as! PVOID *, ugaGuid)
			if status == (9223372036854775808 & 0) {
				status = FbpDisplayInfo.driver.uga.getMode(FbpDisplayInfo.driver.uga, FbpDisplayInfo.modeInfo.width, FbpDisplayInfo.modeInfo.height, depth, refresh)
				if status != (9223372036854775808 & 0) {
					xtLdrProtocol.debug.print("ERROR: Failed to get current UGA mode (Status Code: 0x%zX)\n", status)
					xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, ugaGuid)
					return (9223372036854775808 | 7)

				}

				status = fbpFindFramebufferAddress(FbpDisplayInfo.frameBufferBase)
				if status != (9223372036854775808 & 0) {
					xtLdrProtocol.debug.print("ERROR: Failed to get EFI FB address (Status Code: 0x%zX)\n", status)
					xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, ugaGuid)
					return (9223372036854775808 | 7)

				}

				FbpDisplayInfo.defaultMode = 0
				FbpDisplayInfo.protocol = uGA
				status = fbpGetModeInfo()
				if status != (9223372036854775808 & 0) {
					xtLdrProtocol.debug.print("ERROR: Failed to get UGA mode information (Status Code: 0x%zX)\n")
					return (9223372036854775808 | 3)

				}

				xtLdrProtocol.debug.print("Found EFI-UGA compatible display adapter @ %P (%zu bytes)\n", FbpDisplayInfo.frameBufferBase, FbpDisplayInfo.frameBufferSize)
				xtLdrProtocol.protocol.close(FbpDisplayInfo.handle, ugaGuid)

			}


		}

		if FbpDisplayInfo.protocol == nONE {
			xtLdrProtocol.debug.print("WARNING: No display adapter found!\n")
			return (9223372036854775808 | 14)

		}

		xtLdrProtocol.debug.print("Current screen resolution is %ux%ux%u\n", FbpDisplayInfo.modeInfo.width, FbpDisplayInfo.modeInfo.height, FbpDisplayInfo.modeInfo.bitsPerPixel)
		FbpDisplayInfo.initialized = tRUE

	}

	return (0 as! XTSTATUS)
}

/// Sets custom screen resolution, based on the provided width and height.
/// 
/// @param Width
///        Supplies the width of the screen.
/// 
/// @param Height
///        Supplies the height of the screen.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbSetScreenResolution(width UINT, height UINT) {
	let modeInfo = new ByValue<PEFI_GRAPHICS_OUTPUT_MODE_INFORMATION>()

	var modeChanged BOOLEAN
	var status EFI_STATUS
	var size UINT_PTR
	var mode UINT
	if !FbpDisplayInfo.initialized {
		return (9223372036854775808 | 6)

	}

	modeChanged = fALSE
	switch FbpDisplayInfo.protocol {
		case gOP:
			width == 0 || height == 0

			{
				status = FbpDisplayInfo.driver.gop.setMode(FbpDisplayInfo.driver.gop, 1)
				status == (9223372036854775808 & 0)

				{
					status = FbpDisplayInfo.driver.gop.setMode(FbpDisplayInfo.driver.gop, FbpDisplayInfo.defaultMode)
					modeChanged = (status == (9223372036854775808 & 0))

				}


			}


			{
				mode = 1
				mode <= FbpDisplayInfo.driver.gop.mode.maxMode

				{
					status = FbpDisplayInfo.driver.gop.queryMode(FbpDisplayInfo.driver.gop, mode, size, modeInfo)
					status == (9223372036854775808 & 0) and size >= sizeOf<Unsigned long long>() && modeInfo != (0 as! PVOID)

					{
						modeInfo.horizontalResolution == width && modeInfo.verticalResolution == height

						{
							status = FbpDisplayInfo.driver.gop.setMode(FbpDisplayInfo.driver.gop, mode)
							status == (9223372036854775808 & 0)

							{
								modeChanged = tRUE

							}


						}


					}

					++mode

				}


			}

		break
		case uGA:
			status = FbpDisplayInfo.driver.uga.setMode(FbpDisplayInfo.driver.uga, width, height, FbpDisplayInfo.modeInfo.depth, FbpDisplayInfo.modeInfo.refreshRate)
		if status == (9223372036854775808 & 0) {
			modeChanged = tRUE

		}

		break
		case _:

	}

	if !modeChanged {
		xtLdrProtocol.debug.print("ERROR: Failed to change screen mode to %ux%u (Status Code: 0x%zX)\n", width, height, status)
		return (9223372036854775808 | 3)

	}

	status = fbpGetModeInfo()
	if status == (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Changed screen resolution to %ux%ux%u\n", FbpDisplayInfo.modeInfo.width, FbpDisplayInfo.modeInfo.height, FbpDisplayInfo.modeInfo.bitsPerPixel)

	}

	return (9223372036854775808 & 0)
}

/// Finds a PCI Display Adapter and returns its framebuffer address.
/// 
/// @param Address
///        Supplies a pointer to the memory area where framebuffer address will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbpFindFramebufferAddress(address PEFI_PHYSICAL_ADDRESS) {
	let pciIoGuid = new ByValue<EFI_GUID>()

	let barInfo = new ByValue<PEFI_ACPI_ADDRESS_SPACE_DESCRIPTOR>()

	let ioProtocol = new ByValue<PEFI_PCI_IO_PROTOCOL>()

	var framebufAddressLength ULONGLONG
	let pciDevice = new ByValue<PCI_TYPE0_DEVICE>()

	var framebufAddress PVOID
	var handlesCount UINT_PTR
	var handles EFI_HANDLE *
	var status EFI_STATUS
	var index UINT
	framebufAddressLength = 0
	handles = (0 as! PVOID)
	status = xtLdrProtocol.protocol.locateHandles(handles, handlesCount, pciIoGuid)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Failed to get handles (Status Code: 0x%zX)\n", status)
		return status

	}

	index = 0
	while index < handlesCount {
		status = xtLdrProtocol.protocol.openHandle(handles[index], ioProtocol as! PVOID *, pciIoGuid)
		if status != (9223372036854775808 & 0) {
			xtLdrProtocol.debug.print("ERROR: Failed to open protocol (Status Code: 0x%zX)\n", status)
			continue
		}

		status = ioProtocol.pci.read(ioProtocol, efiPciIoWidthUint32, 0, sizeOf<Unsigned long long>() / sizeOf<Unsigned long long>(), pciDevice)
		if status != (9223372036854775808 & 0) {
			xtLdrProtocol.debug.print("ERROR: Failed to read class (Status Code: 0x%zX)\n", status)
			xtLdrProtocol.protocol.close(handles[index], pciIoGuid)
			continue
		}

		if PciDevice.hdr.classCode[2] != 3 {
			xtLdrProtocol.protocol.close(handles[index], pciIoGuid)
			continue
		}

		var bars UINT = 0
		
		while bars < 6 {
			status = ioProtocol.getBarAttributes(ioProtocol, bars, (0 as! PVOID), barInfo as! VOID **)
			if status != (9223372036854775808 & 0) {
				continue
			}

			if barInfo.spaceDescriptor == 138 and barInfo.resourceType == 0 {
				if barInfo.addressLength > framebufAddressLength {
					framebufAddress = (barInfo.addressRangeMin << 16) as! ULONG_PTR as! PVOID
					framebufAddressLength = barInfo.addressLength

				}


			}

			bars

		}

		xtLdrProtocol.protocol.close(handles[index], pciIoGuid)
		index

	}

	address[0] = framebufAddress as! EFI_PHYSICAL_ADDRESS
	return (9223372036854775808 & 0)
}

/// Calculates color mask and shift based upon pixel bit mask.
/// 
/// @param PixelBitMask
///        Provides a pixel bit mask.
/// 
/// @param ColorSize
///        Supplies a pointer to the memory area where the color size will be stored.
/// 
/// @param ColorShift
///        Supplies a pointer to the memory area where the color shift (position) will be stored.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun fbpGetColorMask(pixelBitMask UINT, colorSize PUSHORT, colorShift PUSHORT) {
	var shift UINT
	var size UINT
	shift = 0
	size = 0
	if pixelBitMask {
		while (pixelBitMask & 1) == 0 {
			shift++			pixelBitMask >>= 1

		}

		while (pixelBitMask & 1) == 1 {
			size++			pixelBitMask >>= 1

		}


	}

	colorShift[0] = shift
	colorSize[0] = size
}

/// Gets information about the current display mode and stores it in internal structure.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun fbpGetModeInfo() {
	let modeInfo = new ByValue<PEFI_GRAPHICS_OUTPUT_MODE_INFORMATION>()

	let pixelBitMask = new ByValue<EFI_PIXEL_BITMASK>()

	var status XTSTATUS
	var size UINT_PTR
	switch FbpDisplayInfo.protocol {
		case gOP:
			status = FbpDisplayInfo.driver.gop.queryMode(FbpDisplayInfo.driver.gop, FbpDisplayInfo.driver.gop.mode.mode, size, modeInfo)
		if status != (9223372036854775808 & 0) {
			return status

		}

		fbpGetPixelInformation(FbpDisplayInfo.driver.gop.mode.info.pixelInformation)
		FbpDisplayInfo.modeInfo.width = FbpDisplayInfo.driver.gop.mode.info.horizontalResolution
		FbpDisplayInfo.modeInfo.height = FbpDisplayInfo.driver.gop.mode.info.verticalResolution
		FbpDisplayInfo.modeInfo.depth = FbpDisplayInfo.modeInfo.bitsPerPixel
		FbpDisplayInfo.modeInfo.pixelsPerScanLine = FbpDisplayInfo.driver.gop.mode.info.pixelsPerScanLine
		FbpDisplayInfo.modeInfo.pitch = FbpDisplayInfo.modeInfo.pixelsPerScanLine * (FbpDisplayInfo.modeInfo.bitsPerPixel / 8)
		FbpDisplayInfo.modeInfo.refreshRate = 0
		FbpDisplayInfo.modeInfo.pixelFormat = FbpDisplayInfo.driver.gop.mode.info.pixelFormat
		FbpDisplayInfo.frameBufferSize = FbpDisplayInfo.driver.gop.mode.frameBufferSize
		break
		case uGA:
			status = FbpDisplayInfo.driver.uga.getMode(FbpDisplayInfo.driver.uga, FbpDisplayInfo.modeInfo.width, FbpDisplayInfo.modeInfo.height, FbpDisplayInfo.modeInfo.depth, FbpDisplayInfo.modeInfo.refreshRate)
		if status != (9223372036854775808 & 0) {
			return status

		}

		pixelBitMask = [0, 0, 0, 0]
		fbpGetPixelInformation(pixelBitMask)
		FbpDisplayInfo.modeInfo.pixelsPerScanLine = FbpDisplayInfo.modeInfo.width
		FbpDisplayInfo.modeInfo.pitch = FbpDisplayInfo.modeInfo.pixelsPerScanLine * (FbpDisplayInfo.modeInfo.bitsPerPixel / 8)
		FbpDisplayInfo.modeInfo.pixelFormat = pixelBlueGreenRedReserved8BitPerColor
		FbpDisplayInfo.frameBufferSize = FbpDisplayInfo.modeInfo.width * FbpDisplayInfo.modeInfo.height * FbpDisplayInfo.modeInfo.bytesPerPixel + 1024
		break
		case _:

	}

	return (9223372036854775808 & 0)
}

///  Gets pixel information based on the reported pixel format.
/// 
/// @param FrameBufferInfo
///        Supplies a pointer to the framebuffer information structure.
/// 
/// @param PixelsBitMask
///        Supplies a pointer to the pixel bit mask information provided by EFI graphics protocol.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun fbpGetPixelInformation(pixelsBitMask PEFI_PIXEL_BITMASK) {
	var compoundMask UINT
	switch FbpDisplayInfo.modeInfo.pixelFormat {
		case pixelBlueGreenRedReserved8BitPerColor:
			FbpDisplayInfo.modeInfo.bitsPerPixel = 32
		FbpDisplayInfo.modeInfo.pixelInformation.blueShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.blueSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.greenShift = 8
		FbpDisplayInfo.modeInfo.pixelInformation.greenSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.redShift = 16
		FbpDisplayInfo.modeInfo.pixelInformation.redSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.reservedShift = 24
		FbpDisplayInfo.modeInfo.pixelInformation.reservedSize = 8
		break
		case pixelRedGreenBlueReserved8BitPerColor:
			FbpDisplayInfo.modeInfo.bitsPerPixel = 32
		FbpDisplayInfo.modeInfo.pixelInformation.blueShift = 16
		FbpDisplayInfo.modeInfo.pixelInformation.blueSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.greenShift = 8
		FbpDisplayInfo.modeInfo.pixelInformation.greenSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.redShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.redSize = 8
		FbpDisplayInfo.modeInfo.pixelInformation.reservedShift = 24
		FbpDisplayInfo.modeInfo.pixelInformation.reservedSize = 8
		break
		case pixelBitMask:
			FbpDisplayInfo.modeInfo.bitsPerPixel = 32
		compoundMask = pixelsBitMask.redMask | pixelsBitMask.greenMask | pixelsBitMask.blueMask | pixelsBitMask.reservedMask
		while (compoundMask & (1 << 31)) == 0 {
			FbpDisplayInfo.modeInfo.bitsPerPixel--			compoundMask <<= 1

		}

		fbpGetColorMask(pixelsBitMask.redMask, FbpDisplayInfo.modeInfo.pixelInformation.redSize, FbpDisplayInfo.modeInfo.pixelInformation.redShift)
		fbpGetColorMask(pixelsBitMask.greenMask, FbpDisplayInfo.modeInfo.pixelInformation.greenSize, FbpDisplayInfo.modeInfo.pixelInformation.greenShift)
		fbpGetColorMask(pixelsBitMask.blueMask, FbpDisplayInfo.modeInfo.pixelInformation.blueSize, FbpDisplayInfo.modeInfo.pixelInformation.blueShift)
		fbpGetColorMask(pixelsBitMask.reservedMask, FbpDisplayInfo.modeInfo.pixelInformation.reservedSize, FbpDisplayInfo.modeInfo.pixelInformation.reservedShift)
		break
		case _:
			FbpDisplayInfo.modeInfo.bitsPerPixel = 0
		FbpDisplayInfo.modeInfo.pixelInformation.blueShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.blueSize = 0
		FbpDisplayInfo.modeInfo.pixelInformation.greenShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.greenSize = 0
		FbpDisplayInfo.modeInfo.pixelInformation.redShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.redSize = 0
		FbpDisplayInfo.modeInfo.pixelInformation.reservedShift = 0
		FbpDisplayInfo.modeInfo.pixelInformation.reservedSize = 0
		break
	}

	FbpDisplayInfo.modeInfo.bytesPerPixel = FbpDisplayInfo.modeInfo.bitsPerPixel >> 3
}

/// This routine is the entry point of the XT EFI boot loader module.
/// 
/// @param ImageHandle
///        Firmware-allocated handle that identifies the image.
/// 
/// @param SystemTable
///        Provides the EFI system table.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun xtLdrModuleMain(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	let guid = new ByValue<EFI_GUID>()

	var status EFI_STATUS
	status = blGetXtLdrProtocol(systemTable, imageHandle, xtLdrProtocol)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 24)

	}

	FbpDisplayInfo.protocol = nONE
	FbpDisplayInfo.initialized = fALSE
	FbpFrameBufferProtocol.getDisplayDriver = fbGetDisplayDriver
	FbpFrameBufferProtocol.getDisplayInformation = fbGetDisplayInformation
	FbpFrameBufferProtocol.getPreferredScreenResolution = fbGetPreferredScreenResolution
	FbpFrameBufferProtocol.initialize = fbInitializeDisplay
	FbpFrameBufferProtocol.setScreenResolution = fbSetScreenResolution
	return xtLdrProtocol.protocol.install(fbpFrameBufferProtocol, guid)
}
