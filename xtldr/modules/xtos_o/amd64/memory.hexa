/// Maps the page table for hardware layer addess space.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtpMapHardwareMemoryPool(pageMap PXTBL_PAGE_MAPPING) {
	let pdeBase = new ByValue<PHARDWARE_PTE>()

	let ppeBase = new ByValue<PHARDWARE_PTE>()

	let pxeBase = new ByValue<PHARDWARE_PTE>()

	var address EFI_PHYSICAL_ADDRESS
	var status XTSTATUS
	if pageMap.pageMapLevel > 4 {
		return (9223372036854775808 | 3)

	}

	pxeBase = ((pageMap.ptePointer) as! PHARDWARE_PTE)
	if !pxeBase[(18446744073705357312 >> 39) & 511].valid {
		status = xtLdrProtocol.memory.allocatePages(1, address)
		if status != (9223372036854775808 & 0) {
			return status

		}

		rtlZeroMemory(address as! PVOID, 4096)
		pxeBase[(18446744073705357312 >> 39) & 511].valid = 1
		pxeBase[(18446744073705357312 >> 39) & 511].pageFrameNumber = address / 4096
		pxeBase[(18446744073705357312 >> 39) & 511].writable = 1
		ppeBase = address as! UINT_PTR as! PHARDWARE_PTE

	} else {
		ppeBase = ((pxeBase[(18446744073705357312 >> 39) & 511].pageFrameNumber) << 12) as! PHARDWARE_PTE

	}

	if !ppeBase[(18446744073705357312 >> 30) & 511].valid {
		status = xtLdrProtocol.memory.allocatePages(1, address)
		if status != (9223372036854775808 & 0) {
			return status

		}

		rtlZeroMemory(address as! PVOID, 4096)
		ppeBase[(18446744073705357312 >> 30) & 511].valid = 1
		ppeBase[(18446744073705357312 >> 30) & 511].pageFrameNumber = address / 4096
		ppeBase[(18446744073705357312 >> 30) & 511].writable = 1
		pdeBase = address as! PHARDWARE_PTE

	} else {
		pdeBase = ((ppeBase[(18446744073705357312 >> 30) & 511].pageFrameNumber) << 12) as! PHARDWARE_PTE

	}

	var index UINT = 0
	
	while index < 2 {
		if !pdeBase[((18446744073705357312 >> 21) & 511) + index].valid {
			status = xtLdrProtocol.memory.allocatePages(1, address)
			if status != (9223372036854775808 & 0) {
				return status

			}

			rtlZeroMemory(address as! PVOID, 4096)
			pdeBase[((18446744073705357312 >> 21) & 511) + index].valid = 1
			pdeBase[((18446744073705357312 >> 21) & 511) + index].pageFrameNumber = address / 4096
			pdeBase[((18446744073705357312 >> 21) & 511) + index].writable = 1

		}

		index

	}

	return (9223372036854775808 & 0)
}

/// Builds the actual memory mapping page table and enables paging. This routine exits EFI boot services as well.
/// 
/// @param PageMap
///        Supplies a pointer to the page mapping structure.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtEnablePaging(pageMap PXTBL_PAGE_MAPPING) {
	var status EFI_STATUS
	status = xtLdrProtocol.memory.buildPageMap(pageMap, 18446734158739722240)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to build page map (Status code: %zX)\n", status)
		return status

	}

	status = xtpMapHardwareMemoryPool(pageMap)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to map memory for hardware leyer (Status code: %zX)\n", status)
		return status

	}

	xtLdrProtocol.debug.print("Exiting EFI boot services\n")
	status = xtLdrProtocol.util.exitBootServices()
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to exit boot services (Status code: %zX)\n", status)
		return (9223372036854775808 | 21)

	}

	arWriteControlRegister(3, pageMap.ptePointer as! UINT_PTR)
	return (9223372036854775808 & 0)
}
