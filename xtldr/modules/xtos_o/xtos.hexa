var __UNIQUE_ID_author0

var __UNIQUE_ID_description1

var __UNIQUE_ID_softdeps2

var __UNIQUE_ID_license3

var __UNIQUE_ID_version4

var xtLdrProtocol

var xtPeCoffProtocol

var xtBootProtocol


/// Returns information about frame buffer in XTOS compatible format.
/// 
/// @param InformationBlock
///        A pointer to memory area containing XT structure where all the information will be stored.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun xtGetDisplayInformation(frameBufferResource PSYSTEM_RESOURCE_FRAMEBUFFER, frameBufferBase PEFI_PHYSICAL_ADDRESS, frameBufferSize PULONG_PTR, frameBufferModeInfo PXTBL_FRAMEBUFFER_MODE_INFORMATION) {
	frameBufferResource.header.physicalAddress = frameBufferBase[0] as! PVOID
	frameBufferResource.header.resourceType = systemResourceFrameBuffer
	frameBufferResource.header.resourceSize = sizeOf<Unsigned long long>()
	frameBufferResource.bufferSize = frameBufferSize[0]
	frameBufferResource.width = frameBufferModeInfo.width
	frameBufferResource.height = frameBufferModeInfo.height
	frameBufferResource.depth = frameBufferModeInfo.depth
	frameBufferResource.bitsPerPixel = frameBufferModeInfo.bitsPerPixel
	frameBufferResource.pixelsPerScanLine = frameBufferModeInfo.pixelsPerScanLine
	frameBufferResource.pitch = frameBufferModeInfo.pitch
	frameBufferResource.pixels.blueShift = frameBufferModeInfo.pixelInformation.blueShift
	frameBufferResource.pixels.blueSize = frameBufferModeInfo.pixelInformation.blueSize
	frameBufferResource.pixels.greenShift = frameBufferModeInfo.pixelInformation.greenShift
	frameBufferResource.pixels.greenSize = frameBufferModeInfo.pixelInformation.greenSize
	frameBufferResource.pixels.redShift = frameBufferModeInfo.pixelInformation.redShift
	frameBufferResource.pixels.redSize = frameBufferModeInfo.pixelInformation.redSize
	frameBufferResource.pixels.reservedShift = frameBufferModeInfo.pixelInformation.reservedShift
	frameBufferResource.pixels.reservedSize = frameBufferModeInfo.pixelInformation.reservedSize
}

fun xtGetMemoryDescriptorList(pageMap PXTBL_PAGE_MAPPING, virtualAddress PVOID *, memoryDescriptorList PLIST_ENTRY) {
	var address EFI_PHYSICAL_ADDRESS
	var status EFI_STATUS
	var pages ULONGLONG
	pages = ((((pageMap.mapSize + 1) * sizeOf<Unsigned long long>()) >> 12) + (((((pageMap.mapSize + 1) * sizeOf<Unsigned long long>()) & 4095)) ? 1 : 0)) as! ULONGLONG
	status = xtLdrProtocol.memory.allocatePages(pages, address)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = xtLdrProtocol.memory.mapVirtualMemory(pageMap, virtualAddress[0], address as! PVOID, pages, loaderMemoryData)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.memory.freePages(address, pages)
		return status

	}

	var physicalBase PVOID = address as! PVOID
	let listEntry = new ByValue<PLIST_ENTRY>()

	listEntry = pageMap.memoryMap.flink
	while listEntry != pageMap.memoryMap {
		let memoryMapping = new ByValue<PXTBL_MEMORY_MAPPING>()

		let memoryDescriptor = new ByValue<PLOADER_MEMORY_DESCRIPTOR>()

		memoryDescriptor.memoryType = memoryMapping.memoryType
		memoryDescriptor.basePage = memoryMapping.physicalAddress as! UINT_PTR / 4096
		memoryDescriptor.pageCount = memoryMapping.numberOfPages
		rtlInsertTailList(memoryDescriptorList, memoryDescriptor.listEntry)
		address = address + sizeOf<Unsigned long long>()
		listEntry = listEntry.flink

	}

	xtLdrProtocol.memory.physicalListToVirtual(pageMap, memoryDescriptorList, physicalBase, virtualAddress[0])
	return (9223372036854775808 & 0)
}

fun xtGetSystemResourcesList(pageMap PXTBL_PAGE_MAPPING, virtualAddress PVOID *, systemResourcesList PLIST_ENTRY) {
	var status XTSTATUS
	var protocolHandle EFI_HANDLE
	let acpiGuid = new ByValue<EFI_GUID>()

	let frameBufGuid = new ByValue<EFI_GUID>()

	let acpiProtocol = new ByValue<PXTBL_ACPI_PROTOCOL>()

	let frameBufProtocol = new ByValue<PXTBL_FRAMEBUFFER_PROTOCOL>()

	let fbModeInfo = new ByValue<XTBL_FRAMEBUFFER_MODE_INFORMATION>()

	var fbAddress EFI_PHYSICAL_ADDRESS
	var fbSize ULONG_PTR
	var frameBufferPages UINT
	let frameBufferResource = new ByValue<PSYSTEM_RESOURCE_FRAMEBUFFER>()

	let acpiResource = new ByValue<PSYSTEM_RESOURCE_ACPI>()

	var pages ULONGLONG
	var address EFI_PHYSICAL_ADDRESS
	var physicalBase PVOID
	var virtualBase PVOID
	pages = (((sizeOf<Unsigned long long>() + sizeOf<Unsigned long long>()) >> 12) + ((((sizeOf<Unsigned long long>() + sizeOf<Unsigned long long>()) & 4095)) ? 1 : 0)) as! ULONGLONG
	status = xtLdrProtocol.memory.allocatePages(pages, address)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = xtLdrProtocol.memory.mapVirtualMemory(pageMap, virtualAddress[0], address as! PVOID, pages, loaderFirmwarePermanent)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.memory.freePages(address, pages)
		return status

	}

	physicalBase = address as! PVOID
	virtualBase = virtualAddress[0]
	virtualAddress[0] += (pages * 4096) as! UINT_PTR
	acpiResource = address as! PSYSTEM_RESOURCE_ACPI
	rtlZeroMemory(acpiResource, sizeOf<Unsigned long long>())
	status = xtLdrProtocol.protocol.open(protocolHandle, acpiProtocol as! PVOID *, acpiGuid)
	if status != (9223372036854775808 & 0) {
		return status

	}

	acpiResource.header.resourceType = systemResourceAcpi
	acpiResource.header.resourceSize = sizeOf<Unsigned long long>()
	acpiProtocol.getApicBase(acpiResource.apicBase)
	acpiProtocol.getAcpiDescriptionPointer(acpiResource.header.physicalAddress)
	acpiResource.header.virtualAddress = 0
	rtlInsertTailList(systemResourcesList, acpiResource.header.listEntry)
	xtLdrProtocol.protocol.close(protocolHandle, frameBufGuid)
	address = address + sizeOf<Unsigned long long>()
	frameBufferResource = address as! PSYSTEM_RESOURCE_FRAMEBUFFER
	rtlZeroMemory(frameBufferResource, sizeOf<Unsigned long long>())
	status = xtLdrProtocol.protocol.open(protocolHandle, frameBufProtocol as! PVOID *, frameBufGuid)
	if status == (9223372036854775808 & 0) {
		status = frameBufProtocol.getDisplayInformation(fbAddress, fbSize, fbModeInfo)
		if status == (9223372036854775808 & 0) {
			xtGetDisplayInformation(frameBufferResource, fbAddress, fbSize, fbModeInfo)

		}


	}

	if status != (9223372036854775808 & 0) {
		return status

	}

	frameBufferPages = (((fbSize) >> 12) + ((((fbSize) & 4095)) ? 1 : 0))
	frameBufferResource.header.virtualAddress = virtualAddress[0]
	xtLdrProtocol.memory.mapVirtualMemory(pageMap, frameBufferResource.header.virtualAddress, frameBufferResource.header.physicalAddress, frameBufferPages, loaderFirmwarePermanent)
	xtLdrProtocol.protocol.close(protocolHandle, frameBufGuid)
	virtualAddress[0] += (frameBufferPages * 4096) as! UINT_PTR
	rtlInsertTailList(systemResourcesList, frameBufferResource.header.listEntry)
	xtLdrProtocol.memory.physicalListToVirtual(pageMap, systemResourcesList, physicalBase, virtualBase)
	return (9223372036854775808 & 0)
}

/// Starts the operating system according to the provided parameters using XTOS boot protocol.
/// 
/// @param Parameters
///        Input parameters with detailed system configuration like boot device or kernel path.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtBootSystem(parameters PXTBL_BOOT_PARAMETERS) {
	let peCoffProtocolGuid = new ByValue<EFI_GUID>()

	var diskHandle EFI_HANDLE
	var protocolHandle EFI_HANDLE
	let fsHandle = new ByValue<PEFI_FILE_HANDLE>()

	let bootDir = new ByValue<PEFI_FILE_HANDLE>()

	var systemPath PWCHAR
	var status EFI_STATUS
	xtLdrProtocol.debug.print("XTOS boot protocol activated\n")
	status = xtLdrProtocol.protocol.open(protocolHandle, xtPeCoffProtocol as! PVOID *, peCoffProtocolGuid)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Unable to load PE/COFF image protocol\n")
		return (9223372036854775808 | 24)

	}

	if parameters.devicePath == (0 as! PVOID) {
		xtLdrProtocol.debug.print("ERROR: No device path provided, unable to boot system\n")
		return (9223372036854775808 | 2)

	}

	if parameters.systemPath != (0 as! PVOID) {
		if parameters.systemPath[0] == 47/* "/" */ {
			parameters.systemPath[0] = 92/* "\\" */

		}

		systemPath = parameters.systemPath[1]
		while systemPath[0] {
			if ((systemPath[0] | 32) - 97/* "a" */ >= 26) and ((systemPath[0] - 48/* "0" */) >= 10) {
				xtLdrProtocol.debug.print("ERROR: System path does not point to the valid XTOS installation\n")
				return (9223372036854775808 | 2)

			}

			systemPath++
		}


	} else {
		xtLdrProtocol.debug.print("WARNING: No system path set, falling back to defaults\n")
		parameters.systemPath = "\\ExectOS"

	}

	if parameters.kernelFile == (0 as! PVOID) {
		xtLdrProtocol.debug.print("WARNING: No kernel file specified, falling back to defaults\n")
		parameters.kernelFile = "xtoskrnl.exe"

	}

	if parameters.parameters == (0 as! PVOID) {
		parameters.parameters = ""

	}

	xtLdrProtocol.debug.print("[XTOS] ARC Path: %S\n[XTOS] System Path: %S\n[XTOS] Kernel File: %S\n[XTOS] Boot Arguments: %S\n", parameters.arcName, parameters.systemPath, parameters.kernelFile, parameters.parameters)
	status = xtLdrProtocol.disk.openVolume((0 as! PVOID), diskHandle, fsHandle)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Unable to open boot volume\n")
		return status

	}

	rtlConcatenateWideString(parameters.systemPath, "\\Boot", 0)
	status = fsHandle.open(fsHandle, bootDir, parameters.systemPath, 1, 0)
	fsHandle.close(fsHandle)
	if status == (9223372036854775808 | 14) {
		xtLdrProtocol.debug.print("ERROR: System boot directory not found\n")
		xtLdrProtocol.disk.closeVolume(diskHandle)
		return status

	} else {
		status != (9223372036854775808 & 0)

		{
			xtLdrProtocol.debug.print("ERROR: Unable to open system boot directory\n")
			xtLdrProtocol.disk.closeVolume(diskHandle)
			status

		}


	}

	return xtpBootSequence(bootDir, parameters)
}

/// This routine initiates an XTOS boot sequence.
/// 
/// @param BootDir
///        An EFI handle to the XTOS boot directory.
/// 
/// @param Parameters
///        Input parameters with detailed system configuration like boot device or kernel path.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtpBootSequence(bootDir PEFI_FILE_HANDLE, parameters PXTBL_BOOT_PARAMETERS) {
	let loadedImageGuid = new ByValue<EFI_GUID>()

	let frameBufGuid = new ByValue<EFI_GUID>()

	let kernelParameters = new ByValue<PKERNEL_INITIALIZATION_BLOCK>()

	let frameBufProtocol = new ByValue<PXTBL_FRAMEBUFFER_PROTOCOL>()

	let imageContext = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	let imageProtocol = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	var virtualAddress PVOID
	var virtualMemoryArea PVOID
	var kernelEntryPoint PXT_ENTRY_POINT
	var protocolHandle EFI_HANDLE
	var status EFI_STATUS
	let pageMap = new ByValue<XTBL_PAGE_MAPPING>()

	xtLdrProtocol.debug.print("Initializing XTOS startup sequence\n")
	status = xtLdrProtocol.protocol.open(protocolHandle, frameBufProtocol as! PVOID *, frameBufGuid)
	if status == (9223372036854775808 & 0) {
		frameBufProtocol.initialize()
		frameBufProtocol.setScreenResolution(0, 0)

	}

	xtLdrProtocol.protocol.close(protocolHandle, frameBufGuid)
	virtualMemoryArea = 18446735277616529408 as! PVOID
	virtualAddress = (18446735277616529408 + 34359738368) as! PVOID
	xtLdrProtocol.memory.initializePageMap(pageMap, 3, size4K)
	status = xtLdrProtocol.memory.mapEfiMemory(pageMap, virtualMemoryArea, (0 as! PVOID))
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = xtpLoadModule(bootDir, parameters.kernelFile, virtualAddress, loaderSystemCode, imageContext)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = xtLdrProtocol.memory.mapVirtualMemory(pageMap, imageContext.virtualAddress, imageContext.physicalAddress, imageContext.imagePages, 0)
	if status != (9223372036854775808 & 0) {
		return status

	}

	virtualAddress += imageContext.imagePages * 4096
	status = xtpInitializeApicBase(pageMap)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to initialize APIC (Status Code: 0x%zX)\n", status)
		return status

	}

	kernelParameters = virtualAddress as! PKERNEL_INITIALIZATION_BLOCK
	status = xtpInitializeLoaderBlock(pageMap, virtualAddress, parameters)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to setup kernel initialization block (Status Code: 0x%zX)\n", status)
		return status

	}

	xtPeCoffProtocol.getEntryPoint(imageContext, kernelEntryPoint as! PVOID)
	bootDir.close(bootDir)
	xtLdrProtocol.protocol.open(protocolHandle, imageProtocol as! PVOID *, loadedImageGuid)
	status = xtEnablePaging(pageMap)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("Failed to enable paging (Status Code: 0x%zX)\n", status)
		return status

	}

	xtLdrProtocol.debug.print("Booting the XTOS kernel\n")
	kernelEntryPoint(kernelParameters)
	return (9223372036854775808 & 0)
}

/// Checks if APIC is present in the system and finds its base address.
/// 
/// @param MemoryMappings
///        Supplies a pointer to linked list containing all memory mappings.
/// 
/// @return This routine returns an EFI status code.
/// 
/// @since XT 1.0
fun xtpInitializeApicBase(pageMap PXTBL_PAGE_MAPPING) {
	let acpiGuid = new ByValue<EFI_GUID>()

	let acpiProtocol = new ByValue<PXTBL_ACPI_PROTOCOL>()

	var protocolHandle EFI_HANDLE
	var apicBaseAddress PVOID
	var status EFI_STATUS
	status = xtLdrProtocol.protocol.open(protocolHandle, acpiProtocol as! PVOID *, acpiGuid)
	if status != (9223372036854775808 & 0) {
		return status

	}

	status = acpiProtocol.getApicBase(apicBaseAddress)
	if status != (9223372036854775808 & 0) {
		return status

	}

	xtLdrProtocol.memory.mapVirtualMemory(pageMap, 18446744073709420544 as! PVOID, apicBaseAddress, 1, loaderFirmwarePermanent)
	return (9223372036854775808 & 0)
}

/// Initializes and maps the kernel initialization block.
/// 
/// @param MemoryMappings
///        Supplies a pointer to linked list containing all memory mappings.
/// 
/// @param VirtualAddress
///        Supplies a pointer to the next valid, free and available virtual address.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtpInitializeLoaderBlock(pageMap PXTBL_PAGE_MAPPING, virtualAddress PVOID *, parameters PXTBL_BOOT_PARAMETERS) {
	let loaderBlock = new ByValue<PKERNEL_INITIALIZATION_BLOCK>()

	var address EFI_PHYSICAL_ADDRESS
	var status EFI_STATUS
	var blockPages UINT
	blockPages = (((sizeOf<Unsigned long long>()) >> 12) + ((((sizeOf<Unsigned long long>()) & 4095)) ? 1 : 0))
	status = xtLdrProtocol.memory.allocatePages(blockPages, address)
	if status != (9223372036854775808 & 0) {
		return status

	}

	loaderBlock = address as! UINT_PTR as! PKERNEL_INITIALIZATION_BLOCK
	rtlZeroMemory(loaderBlock, sizeOf<Unsigned long long>())
	loaderBlock.blockSize = sizeOf<Unsigned long long>()
	loaderBlock.blockVersion = 1
	loaderBlock.protocolVersion = 1
	loaderBlock.loaderInformation.dbgPrint = xtLdrProtocol.debug.print
	loaderBlock.loaderInformation.pageMapLevel = 3
	loaderBlock.firmwareInformation.firmwareType = systemFirmwareEfi
	loaderBlock.firmwareInformation.efiFirmware.efiVersion = 0
	loaderBlock.firmwareInformation.efiFirmware.efiRuntimeServices = (0 as! PVOID)
	rtlCopyMemory(loaderBlock.kernelParameters, parameters.parameters, (rtlWideStringLength(parameters.parameters, 0) + 1) * sizeOf<Unsigned long long>())
	xtLdrProtocol.memory.mapVirtualMemory(pageMap, virtualAddress[0], loaderBlock as! PVOID, blockPages, loaderSystemBlock)
	virtualAddress[0] += (blockPages * 4096) as! UINT_PTR
	rtlInitializeListHead(loaderBlock.systemResourcesListHead)
	xtGetSystemResourcesList(pageMap, virtualAddress, loaderBlock.systemResourcesListHead)
	rtlInitializeListHead(loaderBlock.memoryDescriptorListHead)
	xtGetMemoryDescriptorList(pageMap, virtualAddress, loaderBlock.memoryDescriptorListHead)
	return (9223372036854775808 & 0)
}

/// Loads XTOS PE/COFF module.
/// 
/// @param SystemDir
///        An EFI handle to the opened system directory containing a module that will be loaded.
/// 
/// @param FileName
///        An on disk filename of the module that will be loaded.
/// 
/// @param VirtualAddress
///        Optional virtual address pointing to the memory area where PE/COFF file will be loaded.
/// 
/// @param MemoryType
///        Supplies the type of memory to be assigned to the memory descriptor.
/// 
/// @param ImageContext
///        Supplies pointer to the memory area where loaded PE/COFF image context will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtpLoadModule(systemDir PEFI_FILE_HANDLE, fileName PWCHAR, virtualAddress PVOID, memoryType LOADER_MEMORY_TYPE, imageContext PPECOFF_IMAGE_CONTEXT *) {
	let moduleHandle = new ByValue<PEFI_FILE_HANDLE>()

	var machineType USHORT
	var subSystem USHORT
	var status EFI_STATUS
	xtLdrProtocol.debug.print("Loading %S ... \n", fileName)
	status = systemDir.open(systemDir, moduleHandle, fileName, 1, 0)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Failed to open '%S'\n", fileName)
		return status

	}

	status = xtPeCoffProtocol.loadImage(moduleHandle, memoryType, virtualAddress, imageContext as! PVOID)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Failed to load '%S'\n", fileName)
		return status

	}

	moduleHandle.close(moduleHandle)
	xtPeCoffProtocol.getMachineType(imageContext[0], machineType)
	if machineType != 34404 {
		xtLdrProtocol.debug.print("ERROR: Loaded incompatible PE/COFF image (machine type mismatch)\n")
		return (9223372036854775808 | 25)

	}

	xtPeCoffProtocol.getSubSystem(imageContext[0], subSystem)
	if subSystem != 20 and subSystem != 21 and subSystem != 22 {
		xtLdrProtocol.debug.print("WARNING: Loaded PE/COFF image with non-XT subsystem set\n")

	}

	xtLdrProtocol.debug.print("Loaded %S at PA: %P, VA: %P\n", fileName, (imageContext[0]).physicalAddress, (imageContext[0]).virtualAddress)
	return (9223372036854775808 & 0)
}

/// This routine is the entry point of the XT EFI boot loader module.
/// 
/// @param ImageHandle
///        Firmware-allocated handle that identifies the image.
/// 
/// @param SystemTable
///        Provides the EFI system table.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun xtLdrModuleMain(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	let guid = new ByValue<EFI_GUID>()

	var status EFI_STATUS
	status = blGetXtLdrProtocol(systemTable, imageHandle, xtLdrProtocol)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 24)

	}

	XtBootProtocol.bootSystem = xtBootSystem
	xtLdrProtocol.boot.registerProtocol("XTOS", guid)
	return xtLdrProtocol.protocol.install(xtBootProtocol, guid)
}
