var __UNIQUE_ID_author0

var __UNIQUE_ID_description1

var __UNIQUE_ID_license2

var __UNIQUE_ID_version3


/// Returns the address of the entry point.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param EntryPoint
///        Supplies a pointer to the memory area where address of the image entry point will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetEntryPoint(imagePointer PVOID, entryPoint PVOID *) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	if image.peHeader.optionalHeader32.magic == 523 {
		entryPoint[0] = image.virtualAddress as! PUINT8 + image.peHeader.optionalHeader64.addressOfEntryPoint

	} else {
		entryPoint[0] = image.virtualAddress as! PUINT8 + image.peHeader.optionalHeader32.addressOfEntryPoint

	}

	return (9223372036854775808 & 0)
}

/// Returns the size of the loaded PE/COFF file.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param ImageSize
///        Supplies a pointer to the memory area where file size will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetFileSize(imagePointer PVOID, fileSize PULONGLONG) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	image = imagePointer
	if !image or !image.imageSize {
		return (9223372036854775808 | 2)

	}

	fileSize[0] = image.fileSize
	return (9223372036854775808 | 14)
}

/// Returns the size of the loaded PE/COFF image.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param ImageSize
///        Supplies a pointer to the memory area where image size will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetImageSize(imagePointer PVOID, imageSize PUINT) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	image = imagePointer
	if !image or !image.imageSize {
		return (9223372036854775808 | 2)

	}

	imageSize[0] = image.imageSize
	return (9223372036854775808 | 14)
}

/// Returns the machine type of the PE/COFF image.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param MachineType
///        Supplies a pointer to the memory area where a value defined for the 'machine' field will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetMachineType(imagePointer PVOID, machineType PUSHORT) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	machineType[0] = image.peHeader.fileHeader.machine
	return (9223372036854775808 & 0)
}

/// Returns an address to the specified section in the PE/COFF image.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param SectionName
///        Supplies a name of the requested section.
/// 
/// @param RawData
///        Supplies a pointer to the memory area where the address of the requested section will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetSection(imagePointer PVOID, sectionName PCHAR, rawData PULONG *) {
	let sectionHeader = new ByValue<PPECOFF_IMAGE_SECTION_HEADER>()

	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	var sectionNameLength SIZE_T
	var sectionIndex USHORT
	image = imagePointer
	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	if image.peHeader.optionalHeader32.magic == 523 {
		sectionHeader = (image.peHeader.optionalHeader64 as! PUCHAR + image.peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	} else {
		sectionHeader = (image.peHeader.optionalHeader32 as! PUCHAR + image.peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	}

	sectionNameLength = rtlStringLength(sectionName, 0)
	sectionIndex = 0
	while sectionIndex < image.peHeader.fileHeader.numberOfSections {
		if rtlCompareString(sectionHeader[sectionIndex].name as! PCHAR, sectionName, sectionNameLength) == 0 {
			rawData[0] = image.data + sectionHeader[sectionIndex].pointerToRawData
			return (9223372036854775808 & 0)

		}

		sectionIndex++
	}

	return (9223372036854775808 | 14)
}

/// Returns an information about subsystem that is required to run PE/COFF image.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param SubSystem
///        Supplies a pointer to the memory area storing a value defined for the 'subsystem' field of the image.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetSubSystem(imagePointer PVOID, subSystem PUSHORT) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	if image.peHeader.optionalHeader32.magic == 523 {
		subSystem[0] = image.peHeader.optionalHeader64.subsystem

	} else {
		subSystem[0] = image.peHeader.optionalHeader32.subsystem

	}

	return (9223372036854775808 & 0)
}

/// Returns an information about major image version.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param Version
///        Supplies a pointer to the memory area storing a major image version.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peGetVersion(imagePointer PVOID, version PUSHORT) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	if image.peHeader.optionalHeader32.magic == 523 {
		version[0] = image.peHeader.optionalHeader64.majorImageVersion

	} else {
		version[0] = image.peHeader.optionalHeader32.majorImageVersion

	}

	return (9223372036854775808 & 0)
}

/// Loads a PE/COFF image file.
/// 
/// @param FileHandle
///        The handle of the opened portable executable (PE) file.
/// 
/// @param MemoryType
///        Supplies the type of memory to be assigned to the memory descriptor.
/// 
/// @param VirtualAddress
///        Optional virtual address pointing to the memory area where PE/COFF file will be loaded.
/// 
/// @param Image
///        Supplies pointer to the memory area where loaded PE/COFF image context will be stored.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peLoadImage(fileHandle PEFI_FILE_HANDLE, memoryType LOADER_MEMORY_TYPE, virtualAddress PVOID, imagePointer PVOID *) {
	let fileInfoGuid = new ByValue<EFI_GUID>()

	let sectionHeader = new ByValue<PPECOFF_IMAGE_SECTION_HEADER>()

	let imageData = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	var address EFI_PHYSICAL_ADDRESS
	let fileInfo = new ByValue<PEFI_FILE_INFO>()

	var readSize UINT_PTR
	var status EFI_STATUS
	var sectionSize UINT
	var pages SIZE_T
	var data PUCHAR
	var index UINT
	readSize = sizeOf<Unsigned long long>() + 32
	status = xtLdrProtocol.memory.allocatePool(readSize, fileInfo as! PVOID *)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return status

	}

	status = fileHandle.getInfo(fileHandle, fileInfoGuid, readSize, fileInfo)
	if status == (9223372036854775808 | 5) {
		xtLdrProtocol.memory.freePool(fileInfo)
		status = xtLdrProtocol.memory.allocatePool(readSize, fileInfo as! PVOID *)
		if status != (9223372036854775808 & 0) {
			xtLdrProtocol.debug.print("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
			return status

		}

		status = fileHandle.getInfo(fileHandle, fileInfoGuid, readSize, fileInfo)

	}

	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Failed to get PE/COFF file information (Status Code: 0x%zX)\n", status)
		return status

	}

	status = xtLdrProtocol.memory.allocatePool(sizeOf<Unsigned long long>(), imageData as! PVOID *)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Memory allocation failure (Status Code: 0x%zX)\n", status)
		return status

	}

	imageData.data = (0 as! PVOID)
	imageData.fileSize = fileInfo.fileSize
	imageData.memoryType = memoryType
	xtLdrProtocol.memory.freePool(fileInfo)
	pages = (((imageData.fileSize) >> 12) + ((((imageData.fileSize) & 4095)) ? 1 : 0))
	status = xtLdrProtocol.memory.allocatePages(pages, address)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Pages allocation failure (Status Code: 0x%zX)\n", status)
		xtLdrProtocol.memory.freePool(imageData)
		return status

	}

	readSize = pages * 4096
	data = address as! UINT_PTR as! PUCHAR
	status = fileHandle.read(fileHandle, readSize, data)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Failed to read PE/COFF image file (Status Code: 0x%zX)\n", status)
		xtLdrProtocol.memory.freePages(pages, data as! UINT_PTR as! EFI_PHYSICAL_ADDRESS)
		xtLdrProtocol.memory.freePool(imageData)
		return status

	}

	imageData.dosHeader = data as! PPECOFF_IMAGE_DOS_HEADER
	imageData.peHeader = (data as! PUINT8 + imageData.dosHeader.peHeaderOffset) as! PPECOFF_IMAGE_PE_HEADER
	status = peVerifyImage(imageData)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Invalid PE/COFF image headers (Status Code: 0x%zX)\n", status)
		xtLdrProtocol.memory.freePages(pages, data as! UINT_PTR as! EFI_PHYSICAL_ADDRESS)
		xtLdrProtocol.memory.freePool(imageData)
		return status

	}

	if !(imageData.peHeader.fileHeader.characteristics & 2) {
		xtLdrProtocol.debug.print("ERROR: Non-executable PE/COFF image loaded\n")
		xtLdrProtocol.memory.freePages(pages, data as! UINT_PTR as! EFI_PHYSICAL_ADDRESS)
		xtLdrProtocol.memory.freePool(imageData)
		return (9223372036854775808 | 1)

	}

	if imageData.peHeader.optionalHeader32.magic == 523 {
		imageData.imageSize = imageData.peHeader.optionalHeader64.sizeOfImage

	} else {
		imageData.imageSize = imageData.peHeader.optionalHeader32.sizeOfImage

	}

	imageData.imagePages = (((imageData.imageSize) >> 12) + ((((imageData.imageSize) & 4095)) ? 1 : 0))
	status = xtLdrProtocol.memory.allocatePages(imageData.imagePages, address)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: Pages reallocation failure (Status Code: 0x%zX)\n", status)
		xtLdrProtocol.memory.freePool(imageData)
		return status

	}

	imageData.data = address as! UINT_PTR as! PUINT8
	imageData.physicalAddress = address as! UINT_PTR as! PVOID
	if virtualAddress {
		imageData.virtualAddress = virtualAddress

	} else {
		imageData.virtualAddress = address as! UINT_PTR as! PVOID

	}

	if imageData.peHeader.optionalHeader32.magic == 523 {
		xtLdrProtocol.memory.copyMemory(imageData.data, data, imageData.peHeader.optionalHeader64.sizeOfHeaders)
		sectionHeader = (imageData.peHeader.optionalHeader64 as! PUCHAR + imageData.peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	} else {
		xtLdrProtocol.memory.copyMemory(imageData.data, data, imageData.peHeader.optionalHeader64.sizeOfHeaders)
		sectionHeader = (imageData.peHeader.optionalHeader64 as! PUCHAR + imageData.peHeader.fileHeader.sizeOfOptionalHeader) as! PPECOFF_IMAGE_SECTION_HEADER

	}

	index = 0
	while index < imageData.peHeader.fileHeader.numberOfSections {
		if sectionHeader[index].sizeOfRawData < sectionHeader[index].misc.virtualSize {
			sectionSize = sectionHeader[index].sizeOfRawData

		} else {
			sectionSize = sectionHeader[index].misc.virtualSize

		}

		if sectionSize > 0 and sectionHeader[index].pointerToRawData != 0 {
			xtLdrProtocol.memory.copyMemory(imageData.data as! PUINT8 + sectionHeader[index].virtualAddress, data + sectionHeader[index].pointerToRawData, sectionSize)

		}

		if sectionSize < sectionHeader[index].misc.virtualSize {
			xtLdrProtocol.memory.zeroMemory(imageData.data as! PUINT8 + sectionHeader[index].virtualAddress + sectionSize, sectionHeader[index].misc.virtualSize - sectionSize)

		}

		index++
	}

	xtLdrProtocol.memory.freePages(data as! UINT_PTR as! EFI_PHYSICAL_ADDRESS, pages)
	status = pepRelocateLoadedImage(imageData)
	if status != (9223372036854775808 & 0) {
		xtLdrProtocol.debug.print("ERROR: PE/COFF image relocation failed (Status Code: 0x%zX)\n", status)
		return status

	}

	imagePointer[0] = imageData
	return (9223372036854775808 & 0)
}

/// Relocates PE/COFF image to the specified address.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @param Address
///        Specifies destination address of memory region, where image should be relocated.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peRelocateImage(imagePointer PVOID, address EFI_VIRTUAL_ADDRESS) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	var imageBase UINT64
	var oldVirtualAddress UINT64
	var status EFI_STATUS
	oldVirtualAddress = image.virtualAddress as! UINT_PTR
	if image.peHeader.optionalHeader32.magic == 523 {
		imageBase = image.peHeader.optionalHeader64.imageBase

	} else {
		imageBase = image.peHeader.optionalHeader32.imageBase

	}

	image.virtualAddress = (address - oldVirtualAddress + imageBase) as! PVOID
	status = pepRelocateLoadedImage(image)
	if status != (9223372036854775808 & 0) {
		return status

	}

	image.virtualAddress = address as! PVOID
	return (9223372036854775808 & 0)
}

/// Unloads a PE/COFF image file and frees allocated memory.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peUnloadImage(imagePointer PVOID) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	var status EFI_STATUS
	image = imagePointer
	if !image or !image.data {
		return (9223372036854775808 | 2)

	}

	status = xtLdrProtocol.memory.freePages(image.imagePages, image.data as! UINT_PTR as! EFI_PHYSICAL_ADDRESS)
	status |= xtLdrProtocol.memory.freePool(image)
	return status
}

/// Validates a PE/COFF image headers.
/// 
/// @param ImagePointer
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun peVerifyImage(imagePointer PVOID) {
	let image = new ByValue<PPECOFF_IMAGE_CONTEXT>()

	if !image or !image.peHeader {
		return (9223372036854775808 | 2)

	}

	if image.fileSize < sizeOf<Unsigned long long>() {
		return (9223372036854775808 | 31)

	}

	if image.dosHeader.magic != 23117 {
		return (9223372036854775808 | 25)

	}

	if image.peHeader.signature != 17744 and image.peHeader.signature != 1415071056 {
		return (9223372036854775808 | 25)

	}

	if image.peHeader.optionalHeader32.magic != 267 and image.peHeader.optionalHeader64.magic != 523 {
		return (9223372036854775808 | 25)

	}

	return (9223372036854775808 & 0)
}

/// Relocates a loaded PE/COFF image.
/// 
/// @param Image
///        Supplies a pointer to the PE/COFF context structure representing the loaded image.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun pepRelocateLoadedImage(image PPECOFF_IMAGE_CONTEXT) {
	let relocationDir = new ByValue<PPECOFF_IMAGE_BASE_RELOCATION>()

	let relocationEnd = new ByValue<PPECOFF_IMAGE_BASE_RELOCATION>()

	let dataDirectory = new ByValue<PPECOFF_IMAGE_DATA_DIRECTORY>()

	var offset USHORT
	var type USHORT
	var count USHORT
	var typeOffset PUSHORT
	var imageBase UINT64
	var address PUINT32
	var longPtr PUINT64
	var shortPtr PUINT
	if image.peHeader.fileHeader.characteristics & 1 {
		xtLdrProtocol.debug.print("WARNING: PE/COFF image is stripped and contains no information about relocations\n")
		return (9223372036854775808 & 0)

	}

	if image.peHeader.optionalHeader32.magic == 523 {
		dataDirectory = image.peHeader.optionalHeader64.dataDirectory[5]
		imageBase = image.peHeader.optionalHeader64.imageBase
		if image.peHeader.optionalHeader64.numberOfRvaAndSizes <= 5 or dataDirectory.virtualAddress == 0 or dataDirectory.size < sizeOf<Unsigned long long>() {
			return (9223372036854775808 & 0)

		}


	} else {
		dataDirectory = image.peHeader.optionalHeader32.dataDirectory[5]
		imageBase = image.peHeader.optionalHeader32.imageBase
		if image.peHeader.optionalHeader32.numberOfRvaAndSizes <= 5 or dataDirectory.virtualAddress == 0 or dataDirectory.size < sizeOf<Unsigned long long>() {
			return (9223372036854775808 & 0)

		}


	}

	relocationDir = (image.data as! ULONG_PTR + dataDirectory.virtualAddress) as! PPECOFF_IMAGE_BASE_RELOCATION
	relocationEnd = (relocationDir as! ULONG_PTR + dataDirectory.size) as! PPECOFF_IMAGE_BASE_RELOCATION
	while relocationDir < relocationEnd and relocationDir.sizeOfBlock > 0 {
		count = (relocationDir.sizeOfBlock - sizeOf<Unsigned long long>()) / sizeOf<Unsigned long long>()
		address = (image.data as! PUCHAR + relocationDir.virtualAddress) as! PUINT
		typeOffset = (relocationDir as! PUCHAR + sizeOf<Unsigned long long>()) as! PUSHORT
		while --count {
			offset = typeOffset[0] & 4095
			type = typeOffset[0] >> 12
			if (address + offset) as! PUSHORT as! PVOID >= image.data + image.imageSize {
				break
			}

			if (address + offset) as! ULONG_PTR < relocationDir as! ULONG_PTR or (address + offset) as! ULONG_PTR >= relocationEnd as! ULONG_PTR {
				switch type {
					case 0:
						break
					case 10:
						longPtr = (address as! PUCHAR + offset) as! PULONGLONG
					longPtr[0] = longPtr[0] - imageBase + image.virtualAddress as! UINT_PTR
					break
					case 3:
						shortPtr = (address as! PUCHAR + offset) as! PUINT32
					shortPtr[0] = shortPtr[0] - imageBase + image.virtualAddress as! UINT_PTR
					break
					case _:
						return (9223372036854775808 | 3)

				}


			}

			typeOffset++
		}

		relocationDir = (relocationDir as! PUCHAR + relocationDir.sizeOfBlock) as! PPECOFF_IMAGE_BASE_RELOCATION

	}

	return (9223372036854775808 & 0)
}

/// This routine is the entry point of the XT EFI boot loader module.
/// 
/// @param ImageHandle
///        Firmware-allocated handle that identifies the image.
/// 
/// @param SystemTable
///        Provides the EFI system table.
/// 
/// @return This routine returns a status code.
/// 
/// @since XT 1.0
fun xtLdrModuleMain(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	let guid = new ByValue<EFI_GUID>()

	var status EFI_STATUS
	status = blGetXtLdrProtocol(systemTable, imageHandle, xtLdrProtocol)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 24)

	}

	PeCoffProtocol.getEntryPoint = peGetEntryPoint
	PeCoffProtocol.getFileSize = peGetFileSize
	PeCoffProtocol.getImageSize = peGetImageSize
	PeCoffProtocol.getMachineType = peGetMachineType
	PeCoffProtocol.getSection = peGetSection
	PeCoffProtocol.getSubSystem = peGetSubSystem
	PeCoffProtocol.getVersion = peGetVersion
	PeCoffProtocol.loadImage = peLoadImage
	PeCoffProtocol.relocateImage = peRelocateImage
	PeCoffProtocol.unloadImage = peUnloadImage
	PeCoffProtocol.verifyImage = peVerifyImage
	return xtLdrProtocol.protocol.install(peCoffProtocol, guid)
}
