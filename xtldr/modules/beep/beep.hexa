var __UNIQUE_ID_author0

var __UNIQUE_ID_description1

var __UNIQUE_ID_license2

var __UNIQUE_ID_version3


/// Disables the PC speaker.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun bpDisableToneBeep() {
	var status UCHAR
	status = hlIoPortInByte(97)
	hlIoPortOutByte(97, status & 252)
}

/// Enables the PC speaker and plays a sound.
/// 
/// @param Pitch
///        Specifies a pitch (in Hz) of the sound.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun bpEnableToneBeep(pitch UINT) {
	var counter UINT
	var status UCHAR
	if pitch < 20 {
		pitch = 20

	} else {
		if pitch > 20000 {
			pitch = 20000

		}


	}

	counter = 1193181 / pitch
	hlIoPortOutByte(67, 182)
	hlIoPortOutByte(67, 182)
	hlIoPortOutByte(66, counter as! UCHAR & 255)
	hlIoPortOutByte(66, (counter >> 8) as! UCHAR & 255)
	status = hlIoPortInByte(97)
	hlIoPortOutByte(97, status | 3)
}

/// This routine plays a tune.
/// 
/// @param Arguments
///        Optional list of parameters provided with the command.
/// 
/// @return This routine does not return any value.
/// 
/// @since XT 1.0
fun bpPlayTune(arguments PWCHAR) {
	var pitch LONG
	var duration LONG
	var tempo LONG
	var argument PWCHAR
	var lastArgument PWCHAR
	duration = -1
	pitch = -1
	tempo = -1
	argument = rtlTokenizeWideString(arguments, " ", lastArgument)
	while argument != (0 as! PVOID) {
		if tempo < 0 {
			tempo = bpWideStringToNumber(argument)

		} else {
			if pitch < 0 {
				pitch = bpWideStringToNumber(argument)

			} else {
				duration = bpWideStringToNumber(argument)
				if pitch > 0 {
					bpEnableToneBeep(pitch)

				} else {
					bpDisableToneBeep()

				}

				xtLdrProtocol.util.sleepExecution(60000 * duration / tempo)
				pitch = -1
				duration = -1

			}


		}

		argument = rtlTokenizeWideString((0 as! PVOID), " ", lastArgument)

	}

	bpDisableToneBeep()
}

/// Converts a wide string into a number.
/// 
/// @param String
///        Supplies an input wide string.
/// 
/// @return This routine returns the number that was converted from the wide string.
/// 
/// @since XT 1.0
fun bpWideStringToNumber(string PWCHAR) {
	var number ULONG = 0
	do {
		if string[0] - 48/* "0" */ < 10 {
			number *= 10
			number += string[0] - 48/* "0" */

		}


	} while ++string[0] != 0/* "\u0000" */

	return number
}

/// This routine is the entry point of the XT EFI boot loader module.
/// 
/// @param ImageHandle
///        Firmware-allocated handle that identifies the image.
/// 
/// @param SystemTable
///        Provides the EFI system table.
/// 
/// @return This routine returns status code.
/// 
/// @since XT 1.0
fun xtLdrModuleMain(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	var status EFI_STATUS
	status = blGetXtLdrProtocol(systemTable, imageHandle, xtLdrProtocol)
	if status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 24)

	}

	bpPlayTune(xtLdrProtocol.config.getValue("TUNE"))
	return (9223372036854775808 & 0)
}
