// Hexa 2024 from clang 15.0.3var __UNIQUE_ID_author0

var __UNIQUE_ID_description1

var __UNIQUE_ID_license2

var __UNIQUE_ID_version3


fun chBootSystem(parameters PXTBL_BOOT_PARAMETERS) {
	let lIPGuid = new ByValue<EFI_GUID>()

	var memoryDevicePath EFI_MEMMAP_DEVICE_PATH[2]
	let loadedImage = new ByValue<PEFI_LOADED_IMAGE_PROTOCOL>()

	var diskHandle EFI_HANDLE
	var loaderHandle EFI_HANDLE
	let fsHandle = new ByValue<PEFI_FILE_HANDLE>()

	let bootDir = new ByValue<PEFI_FILE_HANDLE>()

	var status EFI_STATUS
	var loaderSize SIZE_T
	var loaderData PVOID
	if Parameters.KernelFile == (???? resolve CStyleCastExpr) {
		XtLdrProtocol.Debug.Print(???? resolve StringLiteral)
		return (9223372036854775808 | 2)

	}

	Status = XtLdrProtocol.Disk.OpenVolume((???? resolve CStyleCastExpr), ???? resolve UnaryOperator, ???? resolve UnaryOperator)
	if Status != (9223372036854775808 & 0) {
		XtLdrProtocol.Debug.Print(???? resolve StringLiteral, Status)
		return Status

	}

	Status = FsHandle.Open(FsHandle, ???? resolve UnaryOperator, Parameters.EfiPath, 1, 0)
	FsHandle.Close(FsHandle)
	if Status != (9223372036854775808 & 0) {
		XtLdrProtocol.Debug.Print(???? resolve StringLiteral, Status)
		XtLdrProtocol.Disk.CloseVolume(DiskHandle)
		return Status

	}

	Status = XtLdrProtocol.Disk.ReadFile(BootDir, Parameters.KernelFile, ???? resolve UnaryOperator, ???? resolve UnaryOperator)
	BootDir.Close(BootDir)
	XtLdrProtocol.Disk.CloseVolume(DiskHandle)
	???? resolve ArraySubscriptExpr = ???? resolve UnaryExprOrTypeTraitExpr
	???? resolve ArraySubscriptExpr = ???? resolve UnaryExprOrTypeTraitExpr >> 8
	???? resolve ArraySubscriptExpr.Header.Type = 1
	???? resolve ArraySubscriptExpr.Header.SubType = 3
	???? resolve ArraySubscriptExpr.MemoryType = EfiLoaderData
	???? resolve ArraySubscriptExpr.StartingAddress = ???? resolve CStyleCastExpr
	???? resolve ArraySubscriptExpr.EndingAddress = ???? resolve CStyleCastExpr + LoaderSize
	???? resolve ArraySubscriptExpr = ???? resolve UnaryExprOrTypeTraitExpr
	???? resolve ArraySubscriptExpr = ???? resolve UnaryExprOrTypeTraitExpr >> 8
	???? resolve ArraySubscriptExpr.Header.Type = 127
	???? resolve ArraySubscriptExpr.Header.SubType = 255
	Status = XtLdrProtocol.Util.LoadEfiImage(???? resolve CStyleCastExpr, LoaderData, LoaderSize, ???? resolve UnaryOperator)
	if Status != (9223372036854775808 & 0) {
		XtLdrProtocol.Debug.Print(???? resolve StringLiteral, Parameters.KernelFile, Status)
		return Status

	}

	Status = XtLdrProtocol.Protocol.OpenHandle(LoaderHandle, ???? resolve CStyleCastExpr, ???? resolve UnaryOperator)
	if Status != (9223372036854775808 & 0) {
		XtLdrProtocol.Debug.Print(???? resolve StringLiteral, Status)
		return Status

	}

	if Parameters.Parameters {
		LoadedImage.LoadOptionsSize = RtlWideStringLength(Parameters.Parameters, 0) * ???? resolve UnaryExprOrTypeTraitExpr
		LoadedImage.LoadOptions = Parameters.Parameters

	}

	LoadedImage.DeviceHandle = DiskHandle
	return XtLdrProtocol.Util.StartEfiImage(LoaderHandle)
}

fun xtLdrModuleMain(imageHandle EFI_HANDLE, systemTable PEFI_SYSTEM_TABLE) {
	let guid = new ByValue<EFI_GUID>()

	var status EFI_STATUS
	Status = BlGetXtLdrProtocol(SystemTable, ImageHandle, ???? resolve UnaryOperator)
	if Status != (9223372036854775808 & 0) {
		return (9223372036854775808 | 24)

	}

	ChpBootProtocol.BootSystem = ChBootSystem
	XtLdrProtocol.Boot.RegisterProtocol(???? resolve StringLiteral, ???? resolve UnaryOperator)
	return XtLdrProtocol.Protocol.Install(???? resolve UnaryOperator, ???? resolve UnaryOperator)
}
