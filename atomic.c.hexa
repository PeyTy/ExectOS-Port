// Hexa 2024 from clang 15.0.3
fun rtlAtomicAnd8(address Volatile PCHAR, mask CHAR) {
	return __sync_fetch_and_and_1(Address, Mask)
}

fun rtlAtomicAnd16(address Volatile PSHORT, mask SHORT) {
	return __sync_fetch_and_and_2(Address, Mask)
}

fun rtlAtomicAnd32(address Volatile PLONG, mask LONG) {
	return __sync_fetch_and_and_4(Address, Mask)
}

fun rtlAtomicAnd64(address Volatile PLONG_PTR, mask LONG_PTR) {
	return __sync_fetch_and_and_8(Address, Mask)
}

fun rtlAtomicBitTestAndSet(base Volatile PLONG, offset LONG) {
	return (???? resolve AtomicExpr >> Offset) & 1
}

fun rtlAtomicBitTestAndSet64(base Volatile PLONGLONG, offset LONGLONG) {
	return (???? resolve AtomicExpr >> Offset) & 1
}

fun rtlAtomicCompareExchange8(address Volatile PCHAR, comperand CHAR, exchange CHAR) {
	return __sync_val_compare_and_swap_1(Address, Comperand, Exchange)
}

fun rtlAtomicCompareExchange16(address Volatile PSHORT, comperand SHORT, exchange SHORT) {
	return __sync_val_compare_and_swap_2(Address, Comperand, Exchange)
}

fun rtlAtomicCompareExchange32(address Volatile PLONG, comperand LONG, exchange LONG) {
	return __sync_val_compare_and_swap_4(Address, Comperand, Exchange)
}

fun rtlAtomicCompareExchange64(address Volatile PLONG_PTR, comperand LONG_PTR, exchange LONG_PTR) {
	return __sync_val_compare_and_swap_8(Address, Comperand, Exchange)
}

fun rtlAtomicCompareExchangePointer(address Volatile PVOID *, comperand PVOID, exchange PVOID) {
	return ???? resolve CStyleCastExpr
}

fun rtlAtomicDecrement8(address Volatile PCHAR) {
	return __sync_sub_and_fetch_1(Address, 1)
}

fun rtlAtomicDecrement16(address Volatile PSHORT) {
	return __sync_sub_and_fetch_2(Address, 1)
}

fun rtlAtomicDecrement32(address Volatile PLONG) {
	return __sync_sub_and_fetch_4(Address, 1)
}

fun rtlAtomicDecrement64(address Volatile PLONG_PTR) {
	return __sync_sub_and_fetch_8(Address, 1)
}

fun rtlAtomicExchange8(address Volatile PCHAR, exchange CHAR) {
	return __sync_lock_test_and_set_1(Address, Exchange)
}

fun rtlAtomicExchange16(address Volatile PSHORT, exchange SHORT) {
	return __sync_lock_test_and_set_2(Address, Exchange)
}

fun rtlAtomicExchange32(address Volatile PLONG, exchange LONG) {
	return __sync_lock_test_and_set_4(Address, Exchange)
}

fun rtlAtomicExchange64(address Volatile PLONG_PTR, exchange LONG_PTR) {
	return __sync_lock_test_and_set_8(Address, Exchange)
}

fun rtlAtomicExchangeAdd8(address Volatile PCHAR, value CHAR) {
	return __sync_fetch_and_add_1(Address, Value)
}

fun rtlAtomicExchangeAdd16(address Volatile PSHORT, value SHORT) {
	return __sync_fetch_and_add_2(Address, Value)
}

fun rtlAtomicExchangeAdd32(address Volatile PLONG, value LONG) {
	return __sync_fetch_and_add_4(Address, Value)
}

fun rtlAtomicExchangeAdd64(address Volatile PLONG_PTR, value LONG_PTR) {
	return __sync_fetch_and_add_8(Address, Value)
}

fun rtlAtomicExchangePointer(address Volatile PVOID *, exchange PVOID) {
	__sync_synchronize()
	return ???? resolve CStyleCastExpr
}

fun rtlAtomicFlushSingleList(header PSINGLE_LIST_HEADER) {
	return ???? resolve CStyleCastExpr
}

fun rtlAtomicIncrement8(address Volatile PCHAR) {
	return __sync_add_and_fetch_1(Address, 1)
}

fun rtlAtomicIncrement16(address Volatile PSHORT) {
	return __sync_add_and_fetch_2(Address, 1)
}

fun rtlAtomicIncrement32(address Volatile PLONG) {
	return __sync_add_and_fetch_4(Address, 1)
}

fun rtlAtomicIncrement64(address Volatile PLONG_PTR) {
	return __sync_add_and_fetch_8(Address, 1)
}

fun rtlAtomicOr8(address Volatile PCHAR, mask CHAR) {
	return __sync_fetch_and_or_1(Address, Mask)
}

fun rtlAtomicOr16(address Volatile PSHORT, mask SHORT) {
	return __sync_fetch_and_or_2(Address, Mask)
}

fun rtlAtomicOr32(address Volatile PLONG, mask LONG) {
	return __sync_fetch_and_or_4(Address, Mask)
}

fun rtlAtomicOr64(address Volatile PLONG_PTR, mask LONG_PTR) {
	return __sync_fetch_and_or_8(Address, Mask)
}

fun rtlAtomicPopEntrySingleList(header PSINGLE_LIST_HEADER) {
	let listHead = new ByValue<PSINGLE_LIST_ENTRY>()

	let firstEntry = new ByValue<PSINGLE_LIST_ENTRY>()

	let nextEntry = new ByValue<PSINGLE_LIST_ENTRY>()

	ListHead = ???? resolve CStyleCastExpr
	FirstEntry = ListHead.Next
	??? CompoundStmt DoStmt
	return FirstEntry
}

fun rtlAtomicPushEntrySingleList(header PSINGLE_LIST_HEADER, entry PSINGLE_LIST_ENTRY) {
	let listHead = new ByValue<PSINGLE_LIST_ENTRY>()

	let listEntry = new ByValue<PSINGLE_LIST_ENTRY>()

	let firstEntry = new ByValue<PSINGLE_LIST_ENTRY>()

	let nextEntry = new ByValue<PSINGLE_LIST_ENTRY>()

	ListHead = ???? resolve CStyleCastExpr
	ListEntry = ???? resolve CStyleCastExpr
	FirstEntry = ListHead.Next
	??? CompoundStmt DoStmt
	return FirstEntry
}

fun rtlAtomicXor8(address Volatile PCHAR, mask CHAR) {
	return __sync_fetch_and_xor_1(Address, Mask)
}

fun rtlAtomicXor16(address Volatile PSHORT, mask SHORT) {
	return __sync_fetch_and_xor_2(Address, Mask)
}

fun rtlAtomicXor32(address Volatile PLONG, mask LONG) {
	return __sync_fetch_and_xor_4(Address, Mask)
}

fun rtlAtomicXor64(address Volatile PLONG_PTR, mask LONG_PTR) {
	return __sync_fetch_and_xor_8(Address, Mask)
}
